<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Dashboard</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            500: '#0ea5e9',
                            600: '#0284c7',
                        }
                    }
                }
            }
        }
    </script>

    <style>
        .glass-effect {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 50;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            width: 80%;
            max-width: 600px;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }
        
        #jobForm {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        #jobForm label {
            font-weight: 500;
            color: #374151;
        }
        
        #jobForm input,
        #jobForm textarea,
        #jobForm select {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            width: 100%;
        }
        
        #jobForm textarea {
            min-height: 100px;
        }
        
        #jobForm button[type="submit"] {
            background-color: #0ea5e9;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            cursor: pointer;
            border: none;
            font-weight: 500;
        }
        
        #jobForm button[type="submit"]:hover {
            background-color: #0284c7;
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-gray-50 to-primary-50 font-sans">
    <section class="flex h-screen overflow-hidden">
        <!-- Sidebar -->
        <section id="sidebar" class="fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 transition duration-200 ease-in-out z-30 w-64 bg-white shadow-lg">
            <section class="flex flex-col h-full">
                <!-- Logo Section -->
                <section class="p-6 border-b">
                    <section class="flex items-center space-x-3">
                        <section class="h-10 w-10 bg-primary-500 rounded-lg flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                        </section>
                        <span class="text-xl font-bold">Client Portal</span>
                    </section>
                </section>

                <!-- Navigation Links -->
                <nav class="flex-1 p-4 space-y-2">
                    <a href="#" class="flex items-center space-x-3 px-4 py-3 rounded-lg bg-primary-50 text-primary-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                        <span>Dashboard</span>
                    </a>
                </nav>

                <!-- Bottom Section with Sign Out -->
                <section class="p-4 border-t">
                    <button onclick="handleSignOut()" class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition duration-150 w-full">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        <span>Sign Out</span>
                    </button>
                </section>
            </section>
        </section>

        <!-- Main Content -->
        <section class="flex-1 flex flex-col md:pl-64">
            <!-- Top Navigation Bar -->
            <header class="bg-white shadow-sm h-16 fixed w-full md:w-[calc(100%-16rem)] z-10">
                <section class="px-4 h-full flex items-center justify-between">
                    <button onclick="toggleSidebar()" class="p-2 rounded-lg hover:bg-gray-100 md:hidden">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>

                    <section class="flex items-center space-x-4">
                        <span class="text-sm text-gray-600" id="clientName">Client Name</span>
                        <button class="h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center text-primary-600 font-medium" id="clientInitials">CN</button>
                    </section>
                </section>
            </header>

            <!-- Main Content Area -->
            <main class="flex-1 overflow-y-auto pt-16">
                <section class="p-6 md:p-8">
                    <!-- Posted Jobs Section -->
                    <section class="glass-effect rounded-2xl shadow-lg overflow-hidden">
                        <section class="p-6 border-b border-gray-100 flex justify-between items-center">
                            <h2 class="text-xl font-semibold text-gray-800">Posted Jobs</h2>
                            <button onclick="openModal()" class="bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition duration-200">
                                + Post New Job
                            </button>
                        </section>
                        <section class="p-6">
                            <!-- Jobs Grid -->
                            <section class="grid grid-cols-1 md:grid-cols-2 gap-6" id="jobsContainer">
                                <!-- Loading State -->
                                <section class="animate-pulse">
                                    <section class="h-48 bg-gray-200 rounded-lg"></section>
                                </section>
                                <section class="animate-pulse">
                                    <section class="h-48 bg-gray-200 rounded-lg"></section>
                                </section>
                            </section>
                        </section>
                    </section>
                </section>
            </main>
        </section>
    </section>

    <!-- Job Card Template -->
    <template id="jobCardTemplate">
        <section class="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow">
            <section class="flex justify-between items-start mb-4">
                <section>
                    <h3 class="font-semibold text-gray-800 job-title">...</h3>
                    <p class="text-sm text-gray-500 client-name">...</p>
                    <p class="text-sm text-gray-500 job-date">...</p>
                </section>
                <span class="px-3 py-1 rounded-full text-sm job-status"></span>
            </section>
            <p class="text-gray-600 mb-4 job-description">...</p>
            <section class="flex flex-wrap gap-2 mb-4 job-skills"></section>
            <section class="flex items-center justify-between pt-4 border-t border-gray-100">
                <section class="flex items-center space-x-4">
                    <span class="text-sm text-gray-500 job-budget">...</span>
                    <span class="text-sm text-gray-500 job-applications">...</span>
                </section>
                <button class="view-applications-btn px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
                    View Applications
                </button>
            </section>
        </section>
    </template>

    <!-- The Modal -->
    <div id="jobModal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeModalBtn">&times;</span>
            <h2 class="text-xl font-semibold mb-4">Post a Job</h2>

            <form id="jobForm">
                <div>
                    <label for="jobTitle">Job Title:</label>
                    <input type="text" id="jobTitle" name="jobTitle" required>
                </div>

                <div>
                    <label for="jobDescription">Job Description:</label>
                    <textarea id="jobDescription" name="jobDescription" required></textarea>
                </div>

                <div>
                    <label for="wage">Wage (R):</label>
                    <input type="number" id="wage" name="wage" required>
                </div>

                <div>
                    <label for="category">Category:</label>
                    <select id="category" name="category" required>
                        <option value="">Select a category</option>
                        <option value="web-development">Web Development</option>
                        <option value="design">Design</option>
                        <option value="writing">Writing</option>
                        <option value="marketing">Marketing</option>
                    </select>
                </div>

                <div>
                    <label for="duration">Duration:</label>
                    <select id="duration" name="duration" required>
                        <option value="">Select duration</option>
                        <option value="Less than 1 week">Less than 1 week</option>
                        <option value="1-2 weeks">1-2 weeks</option>
                        <option value="2-4 weeks">2-4 weeks</option>
                        <option value="1-3 months">1-3 months</option>
                        <option value="3+ months">3+ months</option>
                    </select>
                </div>

                <div>
                    <label for="location">Location:</label>
                    <input type="text" id="location" name="location" placeholder="e.g. Remote, Johannesburg" required>
                </div>

                <button type="submit">Post Job</button>
            </form>
        </div>
    </div>

    <script>
        const API_URL = 'https://lance-api-ftcehba3hhheg9hu.southafricanorth-01.azurewebsites.net';
        
        // Toggle Sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('-translate-x-full');
        }

        // Handle Sign Out
        function handleSignOut() {
            // Redirect to logout page or handle session termination
            window.location.href = '/logout';
        }

        // Modal Functions
        function openModal() {
            document.getElementById('jobModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('jobModal').style.display = 'none';
            document.getElementById('jobForm').reset();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('jobModal');
            if (event.target == modal) {
                closeModal();
            }
        }

        // API Functions
        async function getJobs() {
            try {
                const response = await fetch(`${API_URL}/jobs`);
                if (!response.ok) throw new Error('Failed to fetch jobs');
                return await response.json();
            } catch (error) {
                console.error('Error fetching jobs:', error);
                throw error;
            }
        }

        async function createJob(jobData) {
            try {
                const response = await fetch(`${API_URL}/jobs`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(jobData)
                });
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Failed to create job: ${errorText}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error('Error creating job:', error);
                throw error;
            }
        }

        // Handle form submission
        document.getElementById('jobForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                // Show loading state
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.textContent;
                submitBtn.disabled = true;
                submitBtn.textContent = 'Posting...';
                
                // Get form data
                const jobData = {
                    clientId: 'c001', // This should be dynamic based on logged in user
                    jobTitle: document.getElementById('jobTitle').value,
                    description: document.getElementById('jobDescription').value,
                    wage: document.getElementById('wage').value,
                    category: document.getElementById('category').value,
                    duration: document.getElementById('duration').value,
                    location: document.getElementById('location').value,
                    status: 'Active'
                };
                
                // Create job
                const result = await createJob(jobData);
                
                console.log('Job Posted:', result);
                
                // Show success message
                alert('Job posted successfully!');
                
                // Close modal and reset form
                closeModal();
                
                // Refresh jobs list
                fetchAndDisplayJobs();
            } catch (error) {
                console.error('Error posting job:', error);
                alert(`Error posting job: ${error.message}`);
            } finally {
                // Restore button state
                const submitBtn = this.querySelector('button[type="submit"]');
                submitBtn.disabled = false;
                submitBtn.textContent = 'Post Job';
            }
        });

        // View Applications
        function viewApplications(jobId) {
            // Navigate to applications page with job ID
            window.location.href = `/applications?jobId=${jobId}`;
        }

        // Format date function
        function formatDate(dateString) {
            if (!dateString) return 'Unknown date';
            
            const date = new Date(dateString);
            if (isNaN(date.getTime())) return dateString; // If invalid date, return original string
            
            // Calculate time difference
            const now = new Date();
            const diffInDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));
            
            if (diffInDays === 0) return "Today";
            if (diffInDays === 1) return "Yesterday";
            if (diffInDays < 7) return `${diffInDays} days ago`;
            
            // For older dates, return formatted date
            return date.toLocaleDateString();
        }

        // Fetch and Display Jobs
        async function fetchAndDisplayJobs() {
            try {
                // Show loading state
                const jobsContainer = document.getElementById('jobsContainer');
                jobsContainer.innerHTML = `
                    <section class="animate-pulse col-span-1 md:col-span-2">
                        <section class="h-48 bg-gray-200 rounded-lg"></section>
                    </section>
                `;
                
                // Fetch jobs from API
                const jobs = await getJobs();
                console.log('Fetched jobs:', jobs);
                
                // Clear loading state
                jobsContainer.innerHTML = '';
                
                // Check if jobs array is empty
                if (!Array.isArray(jobs) || jobs.length === 0) {
                    jobsContainer.innerHTML = `
                        <section class="col-span-1 md:col-span-2 bg-white rounded-lg p-8 text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                            </svg>
                            <h3 class="mt-4 text-lg font-medium text-gray-900">No jobs found</h3>
                            <p class="mt-2 text-gray-500">You haven't posted any jobs yet. Click "Post New Job" to get started.</p>
                        </section>
                    `;
                    return;
                }
                
                // Create job cards for each job
                jobs.forEach(job => {
                    // Filter client jobs if needed
                    // if (job.clientId !== 'c001') return;
                    
                    const template = document.getElementById('jobCardTemplate');
                    const clone = template.content.cloneNode(true);
                    
                    // Extract job data with fallbacks for missing properties
                    const jobTitle = job.jobTitle || 'Untitled Job';
                    const description = job.description || 'No description provided';
                    const budget = job.wage ? `Budget: R${job.wage}` : 'Budget: Not specified';
                    const status = job.status || 'Unknown';
                    const clientName = 'Posted by you';
                    const postedDate = formatDate(job.createdAt);
                    const jobId = job.jobId || job._id; // API might use different IDs
                    
                    // Set job data in template
                    clone.querySelector('.job-title').textContent = jobTitle;
                    clone.querySelector('.client-name').textContent = clientName;
                    clone.querySelector('.job-date').textContent = postedDate;
                    clone.querySelector('.job-description').textContent = description;
                    clone.querySelector('.job-budget').textContent = budget;
                    
                    // Applications count - may need to be fetched from a separate endpoint
                    async function fetchApplicationCount() {
                        try {
                            const response = await fetch(`https://lance-api-ftcehba3hhheg9hu.southafricanorth-01.azurewebsites.net/jobs/countApp?applicationID=1`);

                            if (!response.ok) {
                            throw new Error(`Server responded with status ${response.status}`);
                            }

                            const data = await response.json();
                            console.log('Application count:', data.count);
                            return data.count;
                        } catch (error) {
                            console.error('Error fetching application count:', error.message);
                            return null;
                        }
                        }
                    const applicationsCount = fetchApplicationCount() || 0;
                    clone.querySelector('.job-applications').textContent = `${applicationsCount} application${applicationsCount !== 1 ? 's' : ''}`;
                    
                    // Set status with appropriate styling
                    const statusElement = clone.querySelector('.job-status');
                    statusElement.textContent = status;
                    statusElement.className = `px-3 py-1 rounded-full text-sm ${getStatusClass(status)}`;
                    
                    // Add skills/tags if available
                    const skillsContainer = clone.querySelector('.job-skills');
                    if (job.skills && Array.isArray(job.skills) && job.skills.length > 0) {
                        job.skills.forEach(skill => {
                            const skillTag = document.createElement('span');
                            skillTag.className = 'px-2 py-1 rounded text-xs bg-gray-100 text-gray-600';
                            skillTag.textContent = skill;
                            skillsContainer.appendChild(skillTag);
                        });
                    } else {
                        // Add category as a skill if available
                        if (job.category) {
                            const categoryTag = document.createElement('span');
                            categoryTag.className = 'px-2 py-1 rounded text-xs bg-gray-100 text-gray-600';
                            categoryTag.textContent = job.category.replace(/-/g, ' ');
                            skillsContainer.appendChild(categoryTag);
                        }
                        
                        // Add duration as a tag if available
                        if (job.duration) {
                            const durationTag = document.createElement('span');
                            durationTag.className = 'px-2 py-1 rounded text-xs bg-blue-100 text-blue-600';
                            durationTag.textContent = job.duration;
                            skillsContainer.appendChild(durationTag);
                        }
                    }
                    
                    // Set job ID for view applications button and add click handler
                    const viewButton = clone.querySelector('.view-applications-btn');
                    viewButton.setAttribute('data-job-id', jobId);
                    viewButton.addEventListener('click', function() {
                        viewApplications(jobId);
                    });
                    
                    jobsContainer.appendChild(clone);
                });
            } catch (error) {
                console.error('Error displaying jobs:', error);
                const jobsContainer = document.getElementById('jobsContainer');
                jobsContainer.innerHTML = `
                    <section class="col-span-1 md:col-span-2 bg-white rounded-lg p-8 text-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <h3 class="mt-4 text-lg font-medium text-gray-900">Error loading jobs</h3>
                        <p class="mt-2 text-gray-500">There was a problem fetching your jobs. Please try again later.</p>
                    </section>
                `;
            }
        }

        // Helper function for status classes
        function getStatusClass(status) {
            const statusLower = status.toLowerCase();
            
            if (statusLower.includes('active')) {
                return 'bg-green-100 text-green-600';
            } else if (statusLower.includes('pending') || statusLower.includes('review')) {
                return 'bg-yellow-100 text-yellow-600';
            } else if (statusLower.includes('closed') || statusLower.includes('completed')) {
                return 'bg-gray-100 text-gray-600';
            } else if (statusLower.includes('new')) {
                return 'bg-blue-100 text-blue-600';
            } else {
                return 'bg-gray-100 text-gray-600';
            }
        }

        // Initialize user info (in a real app, this would come from your auth system)
        function initUserInfo() {
            const clientName = 'Client Name'; // Replace with actual client name
            const initials = clientName.split(' ').map(n => n[0]).join('').toUpperCase();
            
            document.getElementById('clientName').textContent = clientName;
            document.getElementById('clientInitials').textContent = initials;
        }

        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', () => {
            initUserInfo();
            fetchAndDisplayJobs();
            
            // Set up modal close button
            document.getElementById('closeModalBtn').addEventListener('click', closeModal);
        });
    </script>
</body>
</html>