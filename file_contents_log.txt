

=== FILE: app.js ===

const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const passport = require('passport');
const flash = require('connect-flash');
const morgan = require('morgan');
const helmet = require('helmet');
const methodOverride = require('method-override');
const { Pool } = require('pg');
require('dotenv').config();

// Import routes
const authRoutes = require('./routes/authRoutes');
const clientRoutes = require('./routes/clientRoutes');
const freelancerRoutes = require('./routes/freelancerRoutes');
const adminRoutes = require('./routes/adminRoutes');
const jobRoutes = require('./routes/jobRoutes');
const paymentRoutes = require('./routes/paymentRoutes');
const profileRoutes = require('./routes/profileRoutes');

// Import passport config
require('./config/passport');

// Create Express app 
const app = express();

// Set view engine
app.set('view engine', 'ejs');
const expressLayouts = require('express-ejs-layouts');

app.use(expressLayouts);

// Set layout file (optional, defaults to views/layout.ejs)
app.set('layout', 'common/layout');

// Middlewares
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "https://cdn.yoco.com"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:"],
      connectSrc: ["'self'", "https://api.yoco.com"]
    }
  }
}));
app.use(morgan('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(methodOverride('_method'));
app.use(express.static(path.join(__dirname, 'public')));

// Session configuration
app.use(session({
  secret: process.env.SESSION_SECRET || 'freelancer_platform_secret',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false, //process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  }
}));

// Passport initialization
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

// Global variables
app.use((req, res, next) => {
  res.locals.success_msg = req.flash('success_msg');
  res.locals.error_msg = req.flash('error_msg');
  res.locals.error = req.flash('error');
  res.locals.user = req.user || null;
  next();
});

// Routes
app.use('/auth', authRoutes);
app.use('/client', clientRoutes);
app.use('/freelancer', freelancerRoutes);
app.use('/admin', adminRoutes);
app.use('/jobs', jobRoutes);
app.use('/payments', paymentRoutes);
app.use('/profile', profileRoutes);

// Home route
app.get('/', (req, res) => {
  res.render('index');
});

// 404 handler
app.use((req, res, next) => {
  res.status(404).render('error', {
    message: 'Page not found',
    status: 404
  });
});

// Error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).render('error', {
    message: err.message || 'Something went wrong!',
    status: err.status || 500
  });
});

// Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

module.exports = app;


=== END OF FILE: app.js ===



=== FILE: config/database.js ===

const { Pool } = require('pg');
require('dotenv').config();


const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT,10),
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

pool.on('connect', () => {
  console.log('Connected to the database');
});

pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
  process.exit(-1);
});

// Initialize database with tables if they don't exist
const initializeDatabase = async () => {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // Create users table
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255),
        role VARCHAR(20) NOT NULL,
        google_id VARCHAR(255) UNIQUE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create clients table
    await client.query(`
      CREATE TABLE IF NOT EXISTS clients (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        company_name VARCHAR(200),
        phone VARCHAR(20),
        address TEXT,
        skills TEXT[],
        experience TEXT,
        cv_path VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create freelancers table
    await client.query(`
      CREATE TABLE IF NOT EXISTS freelancers (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        phone VARCHAR(20),
        address TEXT,
        skills TEXT[],
        experience TEXT,
        cv_path VARCHAR(255),
        clearance_path VARCHAR(255),
        is_approved BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create admins table
    await client.query(`
      CREATE TABLE IF NOT EXISTS admins (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        first_name VARCHAR(100) NOT NULL,
        last_name VARCHAR(100) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create jobs table
    await client.query(`
      CREATE TABLE IF NOT EXISTS jobs (
        id SERIAL PRIMARY KEY,
        client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
        title VARCHAR(255) NOT NULL,
        description TEXT NOT NULL,
        requirements TEXT,
        budget DECIMAL(10, 2) NOT NULL,
        deadline DATE,
        status VARCHAR(20) DEFAULT 'open',
        payment_status VARCHAR(20) DEFAULT 'unpaid',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create job applications table
    await client.query(`
      CREATE TABLE IF NOT EXISTS job_applications (
        id SERIAL PRIMARY KEY,
        job_id INTEGER REFERENCES jobs(id) ON DELETE CASCADE,
        freelancer_id INTEGER REFERENCES freelancers(id) ON DELETE CASCADE,
        motivation TEXT NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(job_id, freelancer_id)
      )
    `);

    // Create payments table
    await client.query(`
      CREATE TABLE IF NOT EXISTS payments (
        id SERIAL PRIMARY KEY,
        job_id INTEGER REFERENCES jobs(id) ON DELETE CASCADE,
        amount DECIMAL(10, 2) NOT NULL,
        transaction_id VARCHAR(255),
        payment_type VARCHAR(20) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        paid_by INTEGER REFERENCES users(id),
        paid_to INTEGER REFERENCES users(id),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create reports table
    await client.query(`
      CREATE TABLE IF NOT EXISTS reports (
        id SERIAL PRIMARY KEY,
        reported_by INTEGER REFERENCES users(id),
        reported_user INTEGER REFERENCES users(id),
        job_id INTEGER REFERENCES jobs(id) ON DELETE SET NULL,
        issue TEXT NOT NULL,
        admin_notes TEXT,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Create job completions table
    await client.query(`
      CREATE TABLE IF NOT EXISTS job_completions (
        id SERIAL PRIMARY KEY,
        job_id INTEGER REFERENCES jobs(id) ON DELETE CASCADE,
        client_confirmed BOOLEAN DEFAULT FALSE,
        freelancer_confirmed BOOLEAN DEFAULT FALSE,
        completed_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Insert admin user if not exists
    const adminEmail = process.env.ADMIN_EMAIL || 'admin@example.com';
    const adminPassword = process.env.ADMIN_PASSWORD || 'admin123'; // Will be hashed in production

    const adminCheck = await client.query('SELECT * FROM users WHERE email = $1', [adminEmail]);
    
    if (adminCheck.rowCount === 0) {
      const bcrypt = require('bcryptjs');
      const hashedPassword = await bcrypt.hash(adminPassword, 10);
      
      const userInsert = await client.query(
        'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
        [adminEmail, hashedPassword, 'admin']
      );
      
      await client.query(
        'INSERT INTO admins (user_id, first_name, last_name) VALUES ($1, $2, $3)',
        [userInsert.rows[0].id, 'System', 'Administrator']
      );
    }

    await client.query('COMMIT');
    console.log('Database initialized successfully');
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error initializing database:', error);
    throw error;
  } finally {
    client.release();
  }
};

// Run initialization on import
initializeDatabase().catch(console.error);

module.exports = {
  query: (text, params) => pool.query(text, params),
  getClient: () => pool.connect(),
  pool
};

=== END OF FILE: config/database.js ===



=== FILE: config/passport.js ===

const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const bcrypt = require('bcryptjs');
const db = require('./database');
require('dotenv').config();

// Local Strategy (email/password)
passport.use(new LocalStrategy(
  { usernameField: 'email' },
  async (email, password, done) => {
    try {
      // Find user by email
      const userResult = await db.query(
        'SELECT * FROM users WHERE email = $1',
        [email]
      );

      if (userResult.rows.length === 0) {
        return done(null, false, { message: 'Invalid email or password' });
      }

      const user = userResult.rows[0];

      // Compare passwords
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return done(null, false, { message: 'Invalid email or password' });
      }

      // Check if freelancer is approved
      if (user.role === 'freelancer') {
        const freelancerResult = await db.query(
          'SELECT is_approved FROM freelancers WHERE user_id = $1',
          [user.id]
        );

        if (freelancerResult.rows.length > 0 && !freelancerResult.rows[0].is_approved) {
          return done(null, false, { message: 'Your account is pending approval by an administrator' });
        }
      }

      return done(null, user);
    } catch (error) {
      return done(error);
    }
  }
));

// Google OAuth Strategy
passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: process.env.GOOGLE_CALLBACK_URL || 'http://localhost:3000/auth/google/callback'
}, async (accessToken, refreshToken, profile, done) => {
  try {
    // Check if user already exists
    const userResult = await db.query(
      'SELECT * FROM users WHERE google_id = $1 OR email = $2',
      [profile.id, profile.emails[0].value]
    );

    if (userResult.rows.length > 0) {
      // User exists, update Google ID if necessary
      if (!userResult.rows[0].google_id) {
        await db.query(
          'UPDATE users SET google_id = $1 WHERE id = $2',
          [profile.id, userResult.rows[0].id]
        );
      }
      return done(null, userResult.rows[0]);
    }

    // Redirect to role selection for new users
    // We'll handle the actual creation in the auth controller
    const insertResult = await db.query(
  `INSERT INTO users (google_id, email, role)
   VALUES ($1, $2, $3)
   RETURNING *`,
  [profile.id, profile.emails[0].value, 'client'] // default role can be changed
);

const newUser = insertResult.rows[0];

// Optionally, insert into clients table
await db.query(`INSERT INTO clients (user_id,first_name,last_name) VALUES ($1,$1,$3)`, [profile.id, profile.name.givenName, profile.name.familyName, 'client']);

return done(null, newUser);

  } catch (error) {
    return done(error);
  }
}));

// Serialize and Deserialize User
passport.serializeUser((user, done) => {
   if (!user.id) {
    return done(new Error('Cannot serialize user without id'));
  }
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    const userResult = await db.query('SELECT * FROM users WHERE id = $1', [id]);
    
    if (userResult.rows.length === 0) {
      return done(null, false);
    }
    
    const user = userResult.rows[0];
    let profile = null;
    
    // Get role-specific data
    if (user.role === 'client') {
      const profileResult = await db.query('SELECT * FROM clients WHERE user_id = $1', [id]);
      if (profileResult.rows.length > 0) {
        profile = profileResult.rows[0];
      }
    } else if (user.role === 'freelancer') {
      const profileResult = await db.query('SELECT * FROM freelancers WHERE user_id = $1', [id]);
      if (profileResult.rows.length > 0) {
        profile = profileResult.rows[0];
      }
    } else if (user.role === 'admin') {
      const profileResult = await db.query('SELECT * FROM admins WHERE user_id = $1', [id]);
      if (profileResult.rows.length > 0) {
        profile = profileResult.rows[0];
      }
    }
    
    // Combine user and profile data
    done(null, { ...user, profile });
  } catch (error) {
    done(error);
  }
});

module.exports = passport;

=== END OF FILE: config/passport.js ===



=== FILE: config/scripts/create-default-users.js ===

/**
 * Script to create default users for testing
 * Run with: node scripts/create-default-users.js
 */
require('dotenv').config();
const bcrypt = require('bcryptjs');
const { Pool } = require('pg');

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

async function createDefaultUsers() {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    console.log('Creating default users...');
    
    // Create admin user if not exists
    const adminExists = await client.query(
      'SELECT * FROM users WHERE email = $1',
      ['admin@example.com']
    );
    
    if (adminExists.rows.length === 0) {
      const hashedPassword = await bcrypt.hash('admin123', 10);
      
      const adminInsert = await client.query(
        'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
        ['admin@example.com', hashedPassword, 'admin']
      );
      
      await client.query(
        'INSERT INTO admins (user_id, first_name, last_name) VALUES ($1, $2, $3)',
        [adminInsert.rows[0].id, 'System', 'Administrator']
      );
      
      console.log('Created admin user: admin@example.com / admin123');
    } else {
      console.log('Admin user already exists');
    }
    
    // Create test client
    const clientExists = await client.query(
      'SELECT * FROM users WHERE email = $1',
      ['client@example.com']
    );
    
    if (clientExists.rows.length === 0) {
      const hashedPassword = await bcrypt.hash('client123', 10);
      
      const clientInsert = await client.query(
        'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
        ['client@example.com', hashedPassword, 'client']
      );
      
      await client.query(
        'INSERT INTO clients (user_id, first_name, last_name, company_name, skills, experience) VALUES ($1, $2, $3, $4, $5, $6)',
        [
          clientInsert.rows[0].id, 
          'Test', 
          'Client', 
          'Test Company', 
          ['Web Development', 'Design', 'Marketing'],
          'We are a small company looking for skilled freelancers for various projects.'
        ]
      );
      
      console.log('Created client user: client@example.com / client123');
    } else {
      console.log('Client user already exists');
    }
    
    // Create test freelancer
    const freelancerExists = await client.query(
      'SELECT * FROM users WHERE email = $1',
      ['freelancer@example.com']
    );
    
    if (freelancerExists.rows.length === 0) {
      const hashedPassword = await bcrypt.hash('freelancer123', 10);
      
      const freelancerInsert = await client.query(
        'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
        ['freelancer@example.com', hashedPassword, 'freelancer']
      );
      
      await client.query(
        'INSERT INTO freelancers (user_id, first_name, last_name, skills, experience, is_approved) VALUES ($1, $2, $3, $4, $5, $6)',
        [
          freelancerInsert.rows[0].id, 
          'Test', 
          'Freelancer', 
          ['Web Development', 'JavaScript', 'React', 'Node.js'],
          'Experienced web developer with 5 years of experience in full-stack development.',
          true
        ]
      );
      
      console.log('Created freelancer user: freelancer@example.com / freelancer123');
    } else {
      console.log('Freelancer user already exists');
    }
    
    // Create sample job
    const jobExists = await client.query(
      'SELECT * FROM jobs WHERE title = $1',
      ['Sample Web Development Project']
    );
    
    if (jobExists.rows.length === 0) {
      // Get client id
      const clientResult = await client.query(
        'SELECT c.id FROM clients c JOIN users u ON c.user_id = u.id WHERE u.email = $1',
        ['client@example.com']
      );
      
      if (clientResult.rows.length > 0) {
        const clientId = clientResult.rows[0].id;
        
        await client.query(
          'INSERT INTO jobs (client_id, title, description, requirements, budget, status, payment_status) VALUES ($1, $2, $3, $4, $5, $6, $7)',
          [
            clientId,
            'Sample Web Development Project',
            'We need a skilled developer to build a responsive website for our company.',
            'HTML, CSS, JavaScript, Responsive Design',
            1000.00,
            'open',
            'paid'
          ]
        );
        
        console.log('Created sample job');
      }
    } else {
      console.log('Sample job already exists');
    }
    
    await client.query('COMMIT');
    console.log('Default users created successfully!');
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error creating default users:', error);
  } finally {
    client.release();
    pool.end();
  }
}

createDefaultUsers();

module.exports = {createDefaultUsers};

=== END OF FILE: config/scripts/create-default-users.js ===



=== FILE: config/yoco.js ===

const axios = require('axios');
require('dotenv').config();

const apiKey = process.env.YOCO_SECRET_KEY;
const baseUrl = 'https://api.yoco.com/v1';

// Simulate Yoco API for development
const yoco = {
  payments: {
    create: async (paymentData) => {
      // In production, use real Yoco API
      if (process.env.NODE_ENV === 'production') {
        try {
          const response = await axios.post(`${baseUrl}/charges`, paymentData, {
            headers: {
              'X-Auth-Secret-Key': apiKey,
              'Content-Type': 'application/json'
            }
          });
          return response.data;
        } catch (error) {
          throw new Error(error.response?.data?.message || 'Payment processing failed');
        }
      }
      
      // Simulate successful payment for development
      return {
        id: `ch_${Date.now()}`,
        status: 'successful',
        amount: paymentData.amountInCents,
        currency: paymentData.currency,
        metadata: paymentData.metadata
      };
    }
  }
};

module.exports = yoco;

=== END OF FILE: config/yoco.js ===



=== FILE: controllers/adminController.js ===

const db = require('../config/database');

// Admin dashboard
exports.getDashboard = async (req, res) => {
  try {
    // Get counts and statistics
    const clientsCount = await db.query('SELECT COUNT(*) FROM clients');
    const freelancersCount = await db.query('SELECT COUNT(*) FROM freelancers');
    const jobsCount = await db.query('SELECT COUNT(*) FROM jobs');
    const paymentsSum = await db.query('SELECT SUM(amount) FROM payments WHERE status = $1', ['completed']);
    const pendingApprovalsCount = await db.query('SELECT COUNT(*) FROM freelancers WHERE is_approved = false');
    const reportsCount = await db.query('SELECT COUNT(*) FROM reports WHERE status = $1', ['pending']);
    
    // Get recent jobs
    const recentJobs = await db.query(`
      SELECT j.*, c.first_name, c.last_name, c.company_name
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      ORDER BY j.created_at DESC
      LIMIT 5
    `);
    
    res.render('admin/dashboard', {
      counts: {
        clients: clientsCount.rows[0].count,
        freelancers: freelancersCount.rows[0].count,
        jobs: jobsCount.rows[0].count,
        payments: paymentsSum.rows[0].sum || 0,
        pendingApprovals: pendingApprovalsCount.rows[0].count,
        reports: reportsCount.rows[0].count
      },
      recentJobs: recentJobs.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error loading admin dashboard:', error);
    req.flash('error_msg', 'Error loading dashboard');
    res.redirect('/');
  }
};

// Manage users - list all
exports.getUsers = async (req, res) => {
  try {
    // Get all users with role-specific details
    const usersResult = await db.query(`
      SELECT u.id, u.email, u.role, u.created_at,
             CASE
               WHEN u.role = 'client' THEN (SELECT c.first_name || ' ' || c.last_name FROM clients c WHERE c.user_id = u.id)
               WHEN u.role = 'freelancer' THEN (SELECT f.first_name || ' ' || f.last_name FROM freelancers f WHERE f.user_id = u.id)
               WHEN u.role = 'admin' THEN (SELECT a.first_name || ' ' || a.last_name FROM admins a WHERE a.user_id = u.id)
             END as full_name,
             CASE
               WHEN u.role = 'freelancer' THEN (SELECT f.is_approved FROM freelancers f WHERE f.user_id = u.id)
               ELSE true
             END as is_approved
      FROM users u
      ORDER BY u.created_at DESC
    `);
    
    res.render('admin/users', {
      users: usersResult.rows,
      currentUser: req.user
    });
  } catch (error) {
    console.error('Error fetching users:', error);
    req.flash('error_msg', 'Error fetching users');
    res.redirect('/admin/dashboard');
  }
};

// Get user details
exports.getUserDetails = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Get user
    const userResult = await db.query('SELECT * FROM users WHERE id = $1', [id]);
    
    if (userResult.rows.length === 0) {
      req.flash('error_msg', 'User not found');
      return res.redirect('/admin/users');
    }
    
    const user = userResult.rows[0];
    let profile = null;
    
    // Get role-specific details
    if (user.role === 'client') {
      const profileResult = await db.query('SELECT * FROM clients WHERE user_id = $1', [id]);
      if (profileResult.rows.length > 0) {
        profile = profileResult.rows[0];
      }
    } else if (user.role === 'freelancer') {
      const profileResult = await db.query('SELECT * FROM freelancers WHERE user_id = $1', [id]);
      if (profileResult.rows.length > 0) {
        profile = profileResult.rows[0];
      }
    } else if (user.role === 'admin') {
      const profileResult = await db.query('SELECT * FROM admins WHERE user_id = $1', [id]);
      if (profileResult.rows.length > 0) {
        profile = profileResult.rows[0];
      }
    }
    const jobStats = await db.query(`
                    SELECT 
                      COUNT(*) AS total,
                      COUNT(CASE WHEN status = 'open' THEN 1 END) AS open,
                      COUNT(CASE WHEN status = 'in-progress' THEN 1 END) AS in_progress,
                      COUNT(CASE WHEN status = 'completed' THEN 1 END) AS completed
                    FROM jobs 
                    WHERE client_id = $1
                  `, [profile.id]).then(res => res.rows[0]);
    const jobs = await db.query(`
                    SELECT * FROM jobs WHERE client_id = $1 ORDER BY created_at DESC LIMIT 5
                  `, [profile.id]).then(res => res.rows);
    const applications = await db.query(`
                    SELECT ja.*, j.title, j.status AS job_status
                    FROM job_applications ja
                    INNER JOIN jobs j ON ja.job_id = j.id
                    WHERE ja.freelancer_id = $1
                    ORDER BY ja.created_at DESC LIMIT 5
                  `, [profile.id]).then(res => res.rows);
    const payments = await db.query(`
                SELECT p.*, j.title AS job_title
                FROM payments p
                LEFT JOIN jobs j ON p.job_id = j.id
                WHERE p.paid_by = $1 OR p.paid_to = $1
                ORDER BY p.created_at DESC
                LIMIT 10
              `, [user.id]).then(res => res.rows);
    
    const appStats = await db.query(`
                    SELECT 
                      COUNT(*) AS total,
                      COUNT(CASE WHEN status = 'pending' THEN 1 END) AS pending,
                      COUNT(CASE WHEN status = 'hired' THEN 1 END) AS hired,
                      COUNT(CASE WHEN status = 'rejected' THEN 1 END) AS rejected
                    FROM job_applications 
                    WHERE freelancer_id = $1
                  `, [profile.id]).then(res => res.rows[0]);
    // res.render('admin/user-details', {
    //   layout:'common/layout',
    //   async:true,
    //   userData: user,
    //   profile,
    //   user: req.user,
    //   jobs,
    //   jobStats,
    //   applications,
    //   payments
    // });
    res.render('admin/user-details', {
      userData:user,
      async:true,
      profile,
      user: req.user,
      jobs,
      jobStats,
      applications,
      payments,
      appStats
    }, (err, html) => {
      if (err) {
        console.error('Render error:', err);
        return res.status(500).send('Error rendering template');
      }
      res.type('html').send(html);
    });
  } catch (error) {
    console.error('Error fetching user details:', error);
    req.flash('error_msg', 'Error fetching user details');
    res.redirect('/admin/users');
  }
};

// Delete user
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Don't allow deleting self
    if (req.user.id === parseInt(id)) {
      req.flash('error_msg', 'You cannot delete your own account');
      return res.redirect('/admin/users');
    }
    
    // Delete user (cascade will handle role-specific records)
    await db.query('DELETE FROM users WHERE id = $1', [id]);
    
    req.flash('success_msg', 'User deleted successfully');
    res.redirect('/admin/users');
  } catch (error) {
    console.error('Error deleting user:', error);
    req.flash('error_msg', 'Error deleting user');
    res.redirect('/admin/users');
  }
};

// Get pending freelancer approvals
exports.getPendingApprovals = async (req, res) => {
  try {
    // Get pending freelancers
    const freelancersResult = await db.query(`
      SELECT f.*, u.email, u.created_at
      FROM freelancers f
      INNER JOIN users u ON f.user_id = u.id
      WHERE f.is_approved = false
      ORDER BY u.created_at ASC
    `);
    
    res.render('admin/freelancer-approvals', {
      freelancers: freelancersResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching pending approvals:', error);
    req.flash('error_msg', 'Error fetching pending approvals');
    res.redirect('/admin/dashboard');
  }
};

// Approve freelancer
exports.approveFreelancer = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Update approval status
    await db.query(
      'UPDATE freelancers SET is_approved = true, updated_at = NOW() WHERE id = $1',
      [id]
    );
    
    // Get freelancer email for notification
    const freelancerResult = await db.query(`
      SELECT u.email
      FROM freelancers f
      INNER JOIN users u ON f.user_id = u.id
      WHERE f.id = $1
    `, [id]);
    
    if (freelancerResult.rows.length > 0) {
      // Here you would normally send an email notification
      console.log(`Freelancer approved: ${freelancerResult.rows[0].email}`);
    }
    
    req.flash('success_msg', 'Freelancer approved successfully');
    res.redirect('/admin/approvals');
  } catch (error) {
    console.error('Error approving freelancer:', error);
    req.flash('error_msg', 'Error approving freelancer');
    res.redirect('/admin/approvals');
  }
};

// Reject freelancer
exports.rejectFreelancer = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Get freelancer user_id for deletion
    const freelancerResult = await db.query(
      'SELECT user_id FROM freelancers WHERE id = $1',
      [id]
    );
    
    if (freelancerResult.rows.length === 0) {
      req.flash('error_msg', 'Freelancer not found');
      return res.redirect('/admin/approvals');
    }
    
    const userId = freelancerResult.rows[0].user_id;
    
    // Delete user (cascade will handle freelancer record)
    await db.query('DELETE FROM users WHERE id = $1', [userId]);
    
    req.flash('success_msg', 'Freelancer rejected and account removed');
    res.redirect('/admin/approvals');
  } catch (error) {
    console.error('Error rejecting freelancer:', error);
    req.flash('error_msg', 'Error rejecting freelancer');
    res.redirect('/admin/approvals');
  }
};

// Get reports
exports.getReports = async (req, res) => {
  try {
    // Get all reports with user details
    const reportsResult = await db.query(`
      SELECT r.*, 
             u_reporter.email AS reporter_email,
             u_reported.email AS reported_email,
             j.title AS job_title
      FROM reports r
      LEFT JOIN users u_reporter ON r.reported_by = u_reporter.id
      LEFT JOIN users u_reported ON r.reported_user = u_reported.id
      LEFT JOIN jobs j ON r.job_id = j.id
      ORDER BY 
        CASE WHEN r.status = 'pending' THEN 0 ELSE 1 END,
        r.created_at DESC
    `);
    
    res.render('admin/reports', {
      reports: reportsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching reports:', error);
    req.flash('error_msg', 'Error fetching reports');
    res.redirect('/admin/dashboard');
  }
};

// Get report details
exports.getReportDetails = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Get report with user details
    const reportResult = await db.query(`
      SELECT r.*, 
             u_reporter.email AS reporter_email,
             u_reported.email AS reported_email,
             j.title AS job_title, j.id AS job_id
      FROM reports r
      LEFT JOIN users u_reporter ON r.reported_by = u_reporter.id
      LEFT JOIN users u_reported ON r.reported_user = u_reported.id
      LEFT JOIN jobs j ON r.job_id = j.id
      WHERE r.id = $1
    `, [id]);
    
    if (reportResult.rows.length === 0) {
      req.flash('error_msg', 'Report not found');
      return res.redirect('/admin/reports');
    }
    
    res.render('admin/report-details', {
      report: reportResult.rows[0],
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching report details:', error);
    req.flash('error_msg', 'Error fetching report details');
    res.redirect('/admin/reports');
  }
};

// Process report
exports.processReport = async (req, res) => {
  try {
    const { id } = req.params;
    const { action, notes } = req.body;
    
    // Update report status
    await db.query(
      'UPDATE reports SET status = $1, admin_notes = $2, updated_at = NOW() WHERE id = $3',
      [action, notes, id]
    );
    
    req.flash('success_msg', 'Report processed successfully');
    res.redirect('/admin/reports');
  } catch (error) {
    console.error('Error processing report:', error);
    req.flash('error_msg', 'Error processing report');
    res.redirect(`/admin/reports/${req.params.id}`);
  }
};

// Add admin user
exports.addAdminUser = async (req, res) => {
  try {
    const { email, password, firstName, lastName } = req.body;
    
    // Validate inputs
    if (!email || !password || !firstName || !lastName) {
      req.flash('error_msg', 'Please fill in all fields');
      return res.redirect('/admin/users');
    }
    
    // Check if email is already in use
    const emailCheck = await db.query('SELECT * FROM users WHERE email = $1', [email]);
    
    if (emailCheck.rows.length > 0) {
      req.flash('error_msg', 'Email is already in use');
      return res.redirect('/admin/users');
    }
    
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Hash password
    const bcrypt = require('bcryptjs');
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Insert user
    const userInsert = await client.query(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      [email, hashedPassword, 'admin']
    );
    
    const userId = userInsert.rows[0].id;
    
    // Insert admin profile
    await client.query(
      'INSERT INTO admins (user_id, first_name, last_name) VALUES ($1, $2, $3)',
      [userId, firstName, lastName]
    );
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'Admin user added successfully');
    res.redirect('/admin/users');
  } catch (error) {
    console.error('Error adding admin user:', error);
    req.flash('error_msg', 'Error adding admin user');
    res.redirect('/admin/users');
  }
};

// System stats
exports.getSystemStats = async (req, res) => {
  try {
    // Get various counts and stats
    const counts = {
      users: (await db.query('SELECT COUNT(*) FROM users')).rows[0].count,
      clients: (await db.query('SELECT COUNT(*) FROM clients')).rows[0].count,
      freelancers: (await db.query('SELECT COUNT(*) FROM freelancers')).rows[0].count,
      admins: (await db.query('SELECT COUNT(*) FROM admins')).rows[0].count,
      jobs: (await db.query('SELECT COUNT(*) FROM jobs')).rows[0].count,
      openJobs: (await db.query('SELECT COUNT(*) FROM jobs WHERE status = $1', ['open'])).rows[0].count,
      inProgressJobs: (await db.query('SELECT COUNT(*) FROM jobs WHERE status = $1', ['in-progress'])).rows[0].count,
      completedJobs: (await db.query('SELECT COUNT(*) FROM jobs WHERE status = $1', ['completed'])).rows[0].count,
      applications: (await db.query('SELECT COUNT(*) FROM job_applications')).rows[0].count,
      reports: (await db.query('SELECT COUNT(*) FROM reports')).rows[0].count,
      pendingReports: (await db.query('SELECT COUNT(*) FROM reports WHERE status = $1', ['pending'])).rows[0].count
    };
    
    // Get financial stats
    const financialStats = {
      totalPayments: (await db.query('SELECT SUM(amount) FROM payments WHERE status = $1', ['completed'])).rows[0].sum || 0,
      clientPayments: (await db.query('SELECT SUM(amount) FROM payments WHERE payment_type = $1 AND status = $2', ['job_posting', 'completed'])).rows[0].sum || 0,
      freelancerPayments: (await db.query('SELECT SUM(amount) FROM payments WHERE payment_type = $1 AND status = $2', ['freelancer_payment', 'completed'])).rows[0].sum || 0,
      pendingPayments: (await db.query('SELECT SUM(amount) FROM payments WHERE status = $1', ['pending'])).rows[0].sum || 0
    };
    
    // Get monthly job stats for the past 12 months
    const monthlyJobsResult = await db.query(`
      SELECT 
        DATE_TRUNC('month', created_at) AS month,
        COUNT(*) AS job_count
      FROM jobs
      WHERE created_at >= NOW() - INTERVAL '1 year'
      GROUP BY month
      ORDER BY month
    `);
    
    // Format monthly data for charts
    const monthlyJobs = monthlyJobsResult.rows.map(row => ({
      month: new Date(row.month).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
      count: parseInt(row.job_count)
    }));
    
    res.render('admin/stats', {
      counts,
      financialStats,
      monthlyJobs,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching system stats:', error);
    req.flash('error_msg', 'Error fetching system stats');
    res.redirect('/admin/dashboard');
  }
};

=== END OF FILE: controllers/adminController.js ===



=== FILE: controllers/authController.js ===

const passport = require('passport');
const bcrypt = require('bcryptjs');
const db = require('../config/database');

// Login page
exports.getLogin = (req, res) => {
  if (req.isAuthenticated()) {
    return res.redirect('/');
  }
  res.render('auth/login');
};

// Process login
exports.postLogin = (req, res, next) => {
  passport.authenticate('local', (err, user, info) => {
    if (err) return next(err);
    if (!user) {
      req.flash('error_msg', info.message);
      return res.redirect('/auth/login');
    }
    
    req.logIn(user, (err) => {
      if (err) return next(err);
      if (user.role === 'client') {
        
        return res.redirect('/client/dashboard');
       
      } else if (user.role === 'freelancer') {
        return res.redirect('/freelancer/dashboard');
      } else if (user.role === 'admin') {
        return res.redirect('/admin/dashboard');
      }
      
      return res.redirect('/');
    });
  })(req, res, next);
};

// Registration page
exports.getRegister = (req, res) => {
  if (req.isAuthenticated()) {
    return res.redirect('/');
  }
  res.render('auth/register');
};

// Client registration page
exports.getRegisterClient = (req, res) => {
  if (req.isAuthenticated()) {
    return res.redirect('/');
  }
  res.render('auth/register-client');
};

// Freelancer registration page
exports.getRegisterFreelancer = (req, res) => {
  if (req.isAuthenticated()) {
    return res.redirect('/');
  }
  res.render('auth/register-freelancer');
};

// Process client registration
exports.postRegisterClient = async (req, res) => {
  const { email, password, confirmPassword, firstName, lastName, companyName, phone, address } = req.body;
  let skills = req.body.skills ? req.body.skills.split(',').map(skill => skill.trim()) : [];
  const experience = req.body.experience || '';
  let cvPath = req.file ? `/uploads/cvs/${req.file.filename}` : '';
  
  const errors = [];
  
  // Validate inputs
  if (!email || !password || !confirmPassword || !firstName || !lastName) {
    errors.push({ message: 'Please fill in all required fields' });
  }
  
  if (password.length < 6) {
    errors.push({ message: 'Password should be at least 6 characters' });
  }
  
  if (password !== confirmPassword) {
    errors.push({ message: 'Passwords do not match' });
  }
  
  // Check if email is already registered
  const emailCheck = await db.query('SELECT * FROM users WHERE email = $1', [email]);
  
  if (emailCheck.rows.length > 0) {
    errors.push({ message: 'Email is already registered' });
  }
  
  if (errors.length > 0) {
    return res.render('auth/register-client', {
      errors,
      email,
      firstName,
      lastName,
      companyName,
      phone,
      address,
      skills: skills.join(', '),
      experience
    });
  }
  
  // If all validations pass, create new client
  try {
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Insert user
    const userInsert = await client.query(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      [email, hashedPassword, 'client']
    );
    
    const userId = userInsert.rows[0].id;
    
    // Insert client profile
    await client.query(
      'INSERT INTO clients (user_id, first_name, last_name, company_name, phone, address, skills, experience, cv_path) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)',
      [userId, firstName, lastName, companyName, phone, address, skills, experience, cvPath]
    );
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'You are now registered as a client. Please log in');
    res.redirect('/auth/login');
  } catch (error) {
    console.error('Registration error:', error);
    req.flash('error_msg', 'Registration failed. Please try again.');
    res.redirect('/auth/register-client');
  }
};

// Process freelancer registration
exports.postRegisterFreelancer = async (req, res) => {
  const { email, password, confirmPassword, firstName, lastName, phone, address } = req.body;
  let skills = req.body.skills ? req.body.skills.split(',').map(skill => skill.trim()) : [];
  const experience = req.body.experience || '';
  
  // Get file paths
  let cvPath = req.files && req.files.cv ? `/uploads/cvs/${req.files.cv[0].filename}` : '';
  let clearancePath = req.files && req.files.clearance ? `/uploads/clearances/${req.files.clearance[0].filename}` : '';
  
  const errors = [];
  
  // Validate inputs
  if (!email || !password || !confirmPassword || !firstName || !lastName) {
    errors.push({ message: 'Please fill in all required fields' });
  }
  
  if (!req.files || !req.files.clearance || !req.files.cv) {
    errors.push({ message: 'Please upload both a CV and police clearance certificate' });
  }
  
  if (password.length < 6) {
    errors.push({ message: 'Password should be at least 6 characters' });
  }
  
  if (password !== confirmPassword) {
    errors.push({ message: 'Passwords do not match' });
  }
  
  // Check if email is already registered
  const emailCheck = await db.query('SELECT * FROM users WHERE email = $1', [email]);
  
  if (emailCheck.rows.length > 0) {
    errors.push({ message: 'Email is already registered' });
  }
  
  if (errors.length > 0) {
    return res.render('auth/register-freelancer', {
      errors,
      email,
      firstName,
      lastName,
      phone,
      address,
      skills: skills.join(', '),
      experience
    });
  }
  
  // If all validations pass, create new freelancer
  try {
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Insert user
    const userInsert = await client.query(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      [email, hashedPassword, 'freelancer']
    );
    
    const userId = userInsert.rows[0].id;
    
    // Insert freelancer profile
    await client.query(
      'INSERT INTO freelancers (user_id, first_name, last_name, phone, address, skills, experience, cv_path, clearance_path, is_approved) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)',
      [userId, firstName, lastName, phone, address, skills, experience, cvPath, clearancePath, false]
    );
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'You are now registered as a freelancer. An admin will review your application.');
    res.redirect('/auth/login');
  } catch (error) {
    console.error('Registration error:', error);
    req.flash('error_msg', 'Registration failed. Please try again.');
    res.redirect('/auth/register-freelancer');
  }
};

// Google OAuth callback
exports.googleCallback = (req, res) => {
  if (req.user.tempUser) {
    // Store temp user data in session and redirect to role selection
    req.session.tempUser = req.user;
    return res.redirect('/auth/select-role');
  }
  
  // Regular user - redirect based on role
  if (req.user.role === 'client') {
    return res.redirect('/client/dashboard');
  } else if (req.user.role === 'freelancer') {
    return res.redirect('/freelancer/dashboard');
  } else if (req.user.role === 'admin') {
    return res.redirect('/admin/dashboard');
  }
  
  return res.redirect('/');
};

// Role selection page for Google OAuth users
exports.getSelectRole = (req, res) => {
  if (!req.session.tempUser) {
    return res.redirect('/auth/login');
  }
  
  res.render('auth/select-role', { user: req.session.tempUser });
};

// Process role selection
exports.postSelectRole = (req, res) => {
  const { role } = req.body;
  const tempUser = req.session.tempUser;
  
  if (!tempUser) {
    return res.redirect('/auth/login');
  }
  
  if (role === 'client') {
    return res.redirect('/auth/complete-profile/client');
  } else if (role === 'freelancer') {
    return res.redirect('/auth/complete-profile/freelancer');
  } else {
    req.flash('error_msg', 'Invalid role selected');
    return res.redirect('/auth/select-role');
  }
};

// Complete client profile for OAuth users
exports.getCompleteClientProfile = (req, res) => {
  if (!req.session.tempUser) {
    return res.redirect('/auth/login');
  }
  
  res.render('auth/complete-profile-client', { user: req.session.tempUser });
};

// Process client profile completion
exports.postCompleteClientProfile = async (req, res) => {
  const tempUser = req.session.tempUser;
  
  if (!tempUser) {
    return res.redirect('/auth/login');
  }
  
  const { firstName, lastName, companyName, phone, address } = req.body;
  let skills = req.body.skills ? req.body.skills.split(',').map(skill => skill.trim()) : [];
  const experience = req.body.experience || '';
  let cvPath = req.file ? `/uploads/cvs/${req.file.filename}` : '';
  
  const errors = [];
  
  // Validate inputs
  if (!firstName || !lastName) {
    errors.push({ message: 'Please fill in all required fields' });
  }
  
  if (errors.length > 0) {
    return res.render('auth/complete-profile-client', {
      errors,
      user: tempUser,
      firstName,
      lastName,
      companyName,
      phone,
      address,
      skills: skills.join(', '),
      experience
    });
  }
  
  // Create user and profile
  try {
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Insert user
    const userInsert = await client.query(
      'INSERT INTO users (email, role, google_id) VALUES ($1, $2, $3) RETURNING id',
      [tempUser.email, 'client', tempUser.google_id]
    );
    
    const userId = userInsert.rows[0].id;
    
    // Insert client profile
    await client.query(
      'INSERT INTO clients (user_id, first_name, last_name, company_name, phone, address, skills, experience, cv_path) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)',
      [userId, firstName || tempUser.first_name, lastName || tempUser.last_name, companyName, phone, address, skills, experience, cvPath]
    );
    
    await client.query('COMMIT');
    client.release();
    
    // Clear temp user and login
    delete req.session.tempUser;
    
    // Login the new user
    const user = {
      id: userId,
      email: tempUser.email,
      role: 'client',
      google_id: tempUser.google_id
    };
    
    req.login(user, (err) => {
      if (err) {
        req.flash('error_msg', 'Error logging in. Please try again.');
        return res.redirect('/auth/login');
      }
      
      req.flash('success_msg', 'Profile completed successfully');
      return res.redirect('/client/dashboard');
    });
  } catch (error) {
    console.error('Profile completion error:', error);
    req.flash('error_msg', 'Profile completion failed. Please try again.');
    res.redirect('/auth/complete-profile/client');
  }
};

// Complete freelancer profile for OAuth users
exports.getCompleteFreelancerProfile = (req, res) => {
  if (!req.session.tempUser) {
    return res.redirect('/auth/login');
  }
  
  res.render('auth/complete-profile-freelancer', { user: req.session.tempUser });
};

// Process freelancer profile completion
exports.postCompleteFreelancerProfile = async (req, res) => {
  const tempUser = req.session.tempUser;
  
  if (!tempUser) {
    return res.redirect('/auth/login');
  }
  
  const { firstName, lastName, phone, address } = req.body;
  let skills = req.body.skills ? req.body.skills.split(',').map(skill => skill.trim()) : [];
  const experience = req.body.experience || '';
  
  // Get file paths
  let cvPath = req.files && req.files.cv ? `/uploads/cvs/${req.files.cv[0].filename}` : '';
  let clearancePath = req.files && req.files.clearance ? `/uploads/clearances/${req.files.clearance[0].filename}` : '';
  
  const errors = [];
  
  // Validate inputs
  if (!firstName || !lastName) {
    errors.push({ message: 'Please fill in all required fields' });
  }
  
  if (!req.files || !req.files.clearance || !req.files.cv) {
    errors.push({ message: 'Please upload both a CV and police clearance certificate' });
  }
  
  if (errors.length > 0) {
    return res.render('auth/complete-profile-freelancer', {
      errors,
      user: tempUser,
      firstName,
      lastName,
      phone,
      address,
      skills: skills.join(', '),
      experience
    });
  }
  
  // Create user and profile
  try {
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Insert user
    const userInsert = await client.query(
      'INSERT INTO users (email, role, google_id) VALUES ($1, $2, $3) RETURNING id',
      [tempUser.email, 'freelancer', tempUser.google_id]
    );
    
    const userId = userInsert.rows[0].id;
    
    // Insert freelancer profile
    await client.query(
      'INSERT INTO freelancers (user_id, first_name, last_name, phone, address, skills, experience, cv_path, clearance_path, is_approved) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)',
      [userId, firstName || tempUser.first_name, lastName || tempUser.last_name, phone, address, skills, experience, cvPath, clearancePath, false]
    );
    
    await client.query('COMMIT');
    client.release();
    
    // Clear temp user
    delete req.session.tempUser;
    
    req.flash('success_msg', 'Profile completed successfully. An admin will review your application.');
    return res.redirect('/auth/login');
  } catch (error) {
    console.error('Profile completion error:', error);
    req.flash('error_msg', 'Profile completion failed. Please try again.');
    res.redirect('/auth/complete-profile/freelancer');
  }
};

// Logout
exports.logout = (req, res) => {
  req.logout((err) => {
    if (err) {
      console.error('Logout error:', err);
      return res.redirect('/');
    }
    req.flash('success_msg', 'You are logged out');
    res.redirect('/auth/login');
  });
};

=== END OF FILE: controllers/authController.js ===



=== FILE: controllers/clientController.js ===

const db = require('../config/database');

// Client dashboard
exports.getDashboard = async (req, res) => {
  try {
    const clientId = req.user.profile.id;
    
    // Get client's jobs
    const jobsResult = await db.query(
      'SELECT * FROM jobs WHERE client_id = $1 ORDER BY created_at DESC LIMIT 5',
      [clientId]
    );
    
    // Get counts
    const jobCounts = {
      total: (await db.query('SELECT COUNT(*) FROM jobs WHERE client_id = $1', [clientId])).rows[0].count,
      open: (await db.query('SELECT COUNT(*) FROM jobs WHERE client_id = $1 AND status = $2', [clientId, 'open'])).rows[0].count,
      inProgress: (await db.query('SELECT COUNT(*) FROM jobs WHERE client_id = $1 AND status = $2', [clientId, 'in-progress'])).rows[0].count,
      completed: (await db.query('SELECT COUNT(*) FROM jobs WHERE client_id = $1 AND status = $2', [clientId, 'completed'])).rows[0].count
    };
    
    // Get recent applications to client's jobs
    const applicationsResult = await db.query(`
      SELECT ja.*, j.title AS job_title, f.first_name, f.last_name
      FROM job_applications ja
      INNER JOIN jobs j ON ja.job_id = j.id
      INNER JOIN freelancers f ON ja.freelancer_id = f.id
      WHERE j.client_id = $1
      ORDER BY ja.created_at DESC
      LIMIT 5
    `, [clientId]);
    
    res.render('client/dashboard', {
      jobs: jobsResult.rows,
      jobCounts,
      applications: applicationsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error loading client dashboard:', error);
    req.flash('error_msg', 'Error loading dashboard');
    res.redirect('/');
  }
};

// Get client's jobs
exports.getJobs = async (req, res) => {
  try {
    const clientId = req.user.profile.id;
    
    // Get all jobs for this client
    const jobsResult = await db.query(
      'SELECT * FROM jobs WHERE client_id = $1 ORDER BY created_at DESC',
      [clientId]
    );
    
    res.render('client/job-management', {
      jobs: jobsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching jobs:', error);
    req.flash('error_msg', 'Error fetching jobs');
    res.redirect('/client/dashboard');
  }
};

// Get client's job details
exports.getJobDetails = async (req, res) => {
  try {
    const { id } = req.params;
    const clientId = req.user.profile.id;
    
    // Get job details and verify ownership
    const jobResult = await db.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [id, clientId]
    );
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found or you are not authorized to view it');
      return res.redirect('/client/jobs');
    }
    
    // Get applications count
    const applicationsCount = await db.query(
      'SELECT COUNT(*) FROM job_applications WHERE job_id = $1',
      [id]
    );
    
    // Get hired freelancer if any
    const hiredFreelancerResult = await db.query(`
      SELECT f.first_name, f.last_name, f.skills, f.experience, f.cv_path, ja.created_at AS hired_at
      FROM job_applications ja
      INNER JOIN freelancers f ON ja.freelancer_id = f.id
      WHERE ja.job_id = $1 AND ja.status = $2
    `, [id, 'hired']);
    
    let hiredFreelancer = null;
    if (hiredFreelancerResult.rows.length > 0) {
      hiredFreelancer = hiredFreelancerResult.rows[0];
    }
    
    // Get job completion status if any
    let completionStatus = null;
    if (jobResult.rows[0].status === 'in-progress' || jobResult.rows[0].status === 'completed') {
      const completionResult = await db.query(
        'SELECT * FROM job_completions WHERE job_id = $1',
        [id]
      );
      
      if (completionResult.rows.length > 0) {
        completionStatus = completionResult.rows[0];
      }
    }
    
    res.render('client/job-details', {
      job: jobResult.rows[0],
      applicationsCount: applicationsCount.rows[0].count,
      hiredFreelancer,
      completionStatus,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching job details:', error);
    req.flash('error_msg', 'Error fetching job details');
    res.redirect('/client/jobs');
  }
};

// Report a problem with a job
exports.reportJobIssue = async (req, res) => {
  try {
    const { id } = req.params;
    const { issue, reportedUser } = req.body;
    const userId = req.user.id;
    
    if (!issue || issue.trim().length < 10) {
      req.flash('error_msg', 'Please provide a detailed description of the issue (at least 10 characters)');
      return res.redirect(`/client/jobs/${id}`);
    }
    
    // Create report
    await db.query(
      'INSERT INTO reports (reported_by, reported_user, job_id, issue, status) VALUES ($1, $2, $3, $4, $5)',
      [userId, reportedUser, id, issue, 'pending']
    );
    
    req.flash('success_msg', 'Issue reported successfully. An admin will review it shortly.');
    res.redirect(`/client/jobs/${id}`);
  } catch (error) {
    console.error('Error reporting issue:', error);
    req.flash('error_msg', 'Error reporting issue');
    res.redirect(`/client/jobs/${id}`);
  }
};

=== END OF FILE: controllers/clientController.js ===



=== FILE: controllers/freelancerController.js ===

const db = require('../config/database');

// Freelancer dashboard
exports.getDashboard = async (req, res) => {
  try {
    const freelancerId = req.user.profile.id;
    
    // Get freelancer's applications
    const applicationsResult = await db.query(`
      SELECT ja.*, j.title, j.budget, j.status AS job_status, c.first_name AS client_first_name, c.last_name AS client_last_name
      FROM job_applications ja
      INNER JOIN jobs j ON ja.job_id = j.id
      INNER JOIN clients c ON j.client_id = c.id
      WHERE ja.freelancer_id = $1
      ORDER BY ja.created_at DESC
      LIMIT 5
    `, [freelancerId]);
    
    // Get active jobs (hired and in progress)
    const activeJobsResult = await db.query(`
      SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      INNER JOIN job_applications ja ON j.id = ja.job_id
      WHERE ja.freelancer_id = $1 AND ja.status = $2 AND j.status = $3
      ORDER BY j.updated_at DESC
    `, [freelancerId, 'hired', 'in-progress']);
    
    // Get counts
    const counts = {
      applications: (await db.query('SELECT COUNT(*) FROM job_applications WHERE freelancer_id = $1', [freelancerId])).rows[0].count,
      activeJobs: activeJobsResult.rows.length,
      completedJobs: (await db.query(`
        SELECT COUNT(*) FROM jobs j
        INNER JOIN job_applications ja ON j.id = ja.job_id
        WHERE ja.freelancer_id = $1 AND ja.status = $2 AND j.status = $3
      `, [freelancerId, 'hired', 'completed'])).rows[0].count
    };
    
    // Get recent available jobs
    const availableJobsResult = await db.query(`
      SELECT j.*, c.company_name
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      WHERE j.status = 'open'
      AND NOT EXISTS (
        SELECT 1 FROM job_applications ja 
        WHERE ja.job_id = j.id AND ja.freelancer_id = $1
      )
      ORDER BY j.created_at DESC
      LIMIT 5
    `, [freelancerId]);
    
    res.render('freelancer/dashboard', {
      applications: applicationsResult.rows,
      activeJobs: activeJobsResult.rows,
      availableJobs: availableJobsResult.rows,
      counts,
      user: req.user
    });
  } catch (error) {
    console.error('Error loading freelancer dashboard:', error);
    req.flash('error_msg', 'Error loading dashboard');
    res.redirect('/');
  }
};

// Pending approval page
exports.getPendingPage = (req, res) => {
  res.render('freelancer/pending-approval', {
    user: req.user
  });
};

// Get freelancer's applications
exports.getApplications = async (req, res) => {
  try {
    const freelancerId = req.user.profile.id;
    
    // Get all applications
    const applicationsResult = await db.query(`
      SELECT ja.*, j.title, j.description, j.budget, j.deadline, j.status AS job_status, 
             c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name
      FROM job_applications ja
      INNER JOIN jobs j ON ja.job_id = j.id
      INNER JOIN clients c ON j.client_id = c.id
      WHERE ja.freelancer_id = $1
      ORDER BY ja.created_at DESC
    `, [freelancerId]);
    
    res.render('freelancer/applications', {
      applications: applicationsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching applications:', error);
    req.flash('error_msg', 'Error fetching applications');
    res.redirect('/freelancer/dashboard');
  }
};

// Get freelancer's active jobs
exports.getActiveJobs = async (req, res) => {
  try {
    const freelancerId = req.user.profile.id;
    
    // Get active jobs (hired and in progress or completed)
    const jobsResult = await db.query(`
      SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name,
             ja.status AS application_status, ja.created_at AS application_date
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      INNER JOIN job_applications ja ON j.id = ja.job_id
      WHERE ja.freelancer_id = $1 AND ja.status = $2
      ORDER BY 
        CASE 
          WHEN j.status = 'in-progress' THEN 0
          WHEN j.status = 'completed' THEN 1
          ELSE 2
        END,
        j.updated_at DESC
    `, [freelancerId, 'hired']);
    
    // Get completion status for each job
    const jobs = await Promise.all(jobsResult.rows.map(async (job) => {
      if (job.status === 'in-progress' || job.status === 'completed') {
        const completionResult = await db.query(
          'SELECT * FROM job_completions WHERE job_id = $1',
          [job.id]
        );
        
        if (completionResult.rows.length > 0) {
          job.completionStatus = completionResult.rows[0];
        }
      }
      return job;
    }));
    
    res.render('freelancer/active-jobs', {
      jobs,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching active jobs:', error);
    req.flash('error_msg', 'Error fetching active jobs');
    res.redirect('/freelancer/dashboard');
  }
};

// Get job details for a freelancer
exports.getJobDetails = async (req, res) => {
  try {
    const { id } = req.params;
    const freelancerId = req.user.profile.id;
    
    // Get job details
    const jobResult = await db.query(`
      SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
             c.company_name, c.skills AS client_skills, c.experience AS client_experience
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      WHERE j.id = $1
    `, [id]);
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found');
      return res.redirect('/freelancer/jobs');
    }
    
    const job = jobResult.rows[0];
    
    // Check application status
    const applicationResult = await db.query(
      'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2',
      [id, freelancerId]
    );
    
    let application = 0;
    if (applicationResult.rows.length > 0) {
      application = applicationResult.rows[0];
    }
    
    // Get completion status if applicable
    let completionStatus = null;
    if (job.status === 'in-progress' || job.status === 'completed') {
      const completionResult = await db.query(
        'SELECT * FROM job_completions WHERE job_id = $1',
        [id]
      );
      
      if (completionResult.rows.length > 0) {
        completionStatus = completionResult.rows[0];
      }
    }
    
    res.render('freelancer/job-details', {
      job,
      application,
      completionStatus,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching job details:', error);
    req.flash('error_msg', 'Error fetching job details');
    res.redirect('/freelancer/jobs');
  }
};

// Report a problem with a job
exports.reportJobIssue = async (req, res) => {
  const { id } = req.params;
  try {
    
    const { issue, reportedUser } = req.body;
    const userId = req.user.id;
    
    if (!issue || issue.trim().length < 10) {
      req.flash('error_msg', 'Please provide a detailed description of the issue (at least 10 characters)');
      return res.redirect(`/freelancer/jobs/${id}`);
    }
    console.log(">>>>>>>>>>>>> ",id);
    // Create report
    await db.query(
      'INSERT INTO reports (reported_by, reported_user, job_id, issue, status) VALUES ($1, $2, $3, $4, $5)',
      [userId, parseInt(reportedUser), id, issue, 'pending']
    );
    
    req.flash('success_msg', 'Issue reported successfully. An admin will review it shortly.');
    res.redirect(`/freelancer/jobs/${id}`);
  } catch (error) {
    console.error('Error reporting issue:', error);
    req.flash('error_msg', 'Error reporting issue');
    res.redirect(`/freelancer/jobs/${id}`);
  }
};

=== END OF FILE: controllers/freelancerController.js ===



=== FILE: controllers/jobController.js ===

const db = require('../config/database');

// Get all jobs
exports.getAllJobs = async (req, res) => {
  try {
    // Get all jobs and join with client info
    const jobsResult = await db.query(`
      SELECT j.*, c.first_name, c.last_name, c.company_name
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      WHERE j.status = 'open'
      ORDER BY j.created_at DESC
    `);
    
    res.render('freelancer/jobs', {
      jobs: jobsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching jobs:', error);
    req.flash('error_msg', 'Error fetching jobs');
    res.redirect('/');
  }
};

// Get job details
exports.getJobDetails = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Get job details
    const jobResult = await db.query(`
      SELECT j.*, c.first_name, c.last_name, c.company_name 
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      WHERE j.id = $1
    `, [id]);
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found');
      return res.redirect('/jobs');
    }
    
    const job = jobResult.rows[0];
    
    // Check if current freelancer has already applied
    let hasApplied = false;
    
    if (req.user && req.user.role === 'freelancer') {
      const applicationResult = await db.query(
        'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2',
        [id, req.user.profile.id]
      );
      
      hasApplied = applicationResult.rows.length > 0;
    }
    
    res.render('freelancer/job-details', {
      job,
      hasApplied,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching job details:', error);
    req.flash('error_msg', 'Error fetching job details');
    res.redirect('/jobs');
  }
};

// Get job application form
exports.getApplyJob = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Get job details
    const jobResult = await db.query('SELECT * FROM jobs WHERE id = $1', [id]);
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found');
      return res.redirect('/jobs');
    }
    
    // Check if job is still open
    if (jobResult.rows[0].status !== 'open') {
      req.flash('error_msg', 'This job is no longer accepting applications');
      return res.redirect(`/jobs/${id}`);
    }
    
    // Check if already applied
    const applicationResult = await db.query(
      'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2',
      [id, req.user.profile.id]
    );
    
    if (applicationResult.rows.length > 0) {
      req.flash('error_msg', 'You have already applied for this job');
      return res.redirect(`/jobs/${id}`);
    }
    
    res.render('freelancer/apply-job', {
      job: jobResult.rows[0],
      user: req.user
    });
  } catch (error) {
    console.error('Error loading application form:', error);
    req.flash('error_msg', 'Error loading application form');
    res.redirect('/jobs');
  }
};

// Submit job application
exports.postApplyJob = async (req, res) => {
  try {
    const { id } = req.params;
    const { motivation } = req.body;
    
    if (!motivation || motivation.trim().length < 10) {
      req.flash('error_msg', 'Please provide a proper motivation (at least 10 characters)');
      return res.redirect(`/jobs/${id}/apply`);
    }
    
    // Check if job exists and is open
    const jobResult = await db.query('SELECT * FROM jobs WHERE id = $1', [id]);
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found');
      return res.redirect('/jobs');
    }
    
    if (jobResult.rows[0].status !== 'open') {
      req.flash('error_msg', 'This job is no longer accepting applications');
      return res.redirect(`/jobs/${id}`);
    }
    
    // Insert application
    await db.query(
      'INSERT INTO job_applications (job_id, freelancer_id, motivation) VALUES ($1, $2, $3)',
      [id, req.user.profile.id, motivation]
    );
    
    req.flash('success_msg', 'Application submitted successfully');
    res.redirect('/freelancer/applications');
  } catch (error) {
    console.error('Error submitting application:', error);
    req.flash('error_msg', 'Error submitting application');
    res.redirect(`/jobs/${req.params.id}/apply`);
  }
};

// Client: Get job creation form
exports.getCreateJob = (req, res) => {
  res.render('client/job-form', {
    job: null,
    edit: false,
    user: req.user
  });
};

// Client: Process job creation
exports.postCreateJob = async (req, res) => {
  try {
    const { title, description, requirements, budget, deadline } = req.body;
    const clientId = req.user.profile.id;
    
    // Validate inputs
    if (!title || !description || !budget) {
      req.flash('error_msg', 'Please fill all required fields');
      return res.redirect('/jobs/create');
    }
    
    // Create job (initially unpaid)
    const jobResult = await db.query(
      'INSERT INTO jobs (client_id, title, description, requirements, budget, deadline, status, payment_status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id',
      [clientId, title, description, requirements, budget, deadline, 'pending', 'unpaid']
    );
    
    const jobId = jobResult.rows[0].id;
    
    // Redirect to payment page
    res.redirect(`/payments/job/${jobId}`);
  } catch (error) {
    console.error('Error creating job:', error);
    req.flash('error_msg', 'Error creating job');
    res.redirect('/jobs/create');
  }
};

// Client: Get job edit form
exports.getEditJob = async (req, res) => {
  try {
    const { id } = req.params;
    const clientId = req.user.profile.id;
    
    // Get job details and verify ownership
    const jobResult = await db.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [id, clientId]
    );
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found or you are not authorized to edit it');
      return res.redirect('/client/jobs');
    }
    
    // Only allow editing of jobs that are still open
    if (jobResult.rows[0].status !== 'open') {
      req.flash('error_msg', 'You cannot edit a job that is not open');
      return res.redirect('/client/jobs');
    }
    
    res.render('client/job-form', {
      job: jobResult.rows[0],
      edit: true,
      user: req.user
    });
  } catch (error) {
    console.error('Error loading job edit form:', error);
    req.flash('error_msg', 'Error loading job edit form');
    res.redirect('/client/jobs');
  }
};

// Client: Process job edit
exports.putEditJob = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, description, requirements, budget, deadline } = req.body;
    const clientId = req.user.profile.id;
    
    // Validate inputs
    if (!title || !description || !budget) {
      req.flash('error_msg', 'Please fill all required fields');
      return res.redirect(`/jobs/${id}/edit`);
    }
    
    // Verify ownership and update
    const jobResult = await db.query(
      'UPDATE jobs SET title = $1, description = $2, requirements = $3, budget = $4, deadline = $5, updated_at = NOW() WHERE id = $6 AND client_id = $7 AND status = $8 RETURNING *',
      [title, description, requirements, budget, deadline, id, clientId, 'open']
    );
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found, not open, or you are not authorized to edit it');
      return res.redirect('/client/jobs');
    }
    
    req.flash('success_msg', 'Job updated successfully');
    res.redirect('/client/jobs');
  } catch (error) {
    console.error('Error updating job:', error);
    req.flash('error_msg', 'Error updating job');
    res.redirect(`/jobs/${req.params.id}/edit`);
  }
};

// Client: Delete job
exports.deleteJob = async (req, res) => {
  try {
    const { id } = req.params;
    const clientId = req.user.profile.id;
    
    // Verify ownership and delete
    const jobResult = await db.query(
      'DELETE FROM jobs WHERE id = $1 AND client_id = $2 AND status = $3 RETURNING *',
      [id, clientId, 'open']
    );
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found, not open, or you are not authorized to delete it');
      return res.redirect('/client/jobs');
    }
    
    req.flash('success_msg', 'Job deleted successfully');
    res.redirect('/client/jobs');
  } catch (error) {
    console.error('Error deleting job:', error);
    req.flash('error_msg', 'Error deleting job');
    res.redirect('/client/jobs');
  }
};

// Client: View job applications
exports.getJobApplications = async (req, res) => {
  try {
    const { id } = req.params;
    const clientId = req.user.profile.id;
    
    // Get job details and verify ownership
    const jobResult = await db.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [id, clientId]
    );
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found or you are not authorized to view it');
      return res.redirect('/client/jobs');
    }
    
    // Get applications with freelancer details
    const applicationsResult = await db.query(`
      SELECT ja.*, f.first_name, f.last_name, f.skills, f.experience, f.cv_path
      FROM job_applications ja
      INNER JOIN freelancers f ON ja.freelancer_id = f.id
      WHERE ja.job_id = $1
      ORDER BY ja.created_at DESC
    `, [id]);
    
    res.render('client/job-applications', {
      job: jobResult.rows[0],
      applications: applicationsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching job applications:', error);
    req.flash('error_msg', 'Error fetching job applications');
    res.redirect('/client/jobs');
  }
};

// Client: Hire freelancer
exports.postHireFreelancer = async (req, res) => {
  try {
    const { jobId, applicationId } = req.params;
    const clientId = req.user.profile.id;
    
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Verify job ownership
    const jobResult = await client.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [jobId, clientId]
    );
    
    if (jobResult.rows.length === 0) {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Job not found or you are not authorized');
      return res.redirect('/client/jobs');
    }
    
    // Check if job is open and paid
    if (jobResult.rows[0].status !== 'open' || jobResult.rows[0].payment_status !== 'paid') {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Job is not open or payment is not confirmed');
      return res.redirect(`/client/jobs/${jobId}/applications`);
    }
    
    // Verify application exists
    const applicationResult = await client.query(
      'SELECT * FROM job_applications WHERE id = $1 AND job_id = $2',
      [applicationId, jobId]
    );
    
    if (applicationResult.rows.length === 0) {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Application not found');
      return res.redirect(`/client/jobs/${jobId}/applications`);
    }
    
    // Update application status to hired
    await client.query(
      'UPDATE job_applications SET status = $1 WHERE id = $2',
      ['hired', applicationId]
    );
    
    // Update job status to in-progress
    await client.query(
      'UPDATE jobs SET status = $1 WHERE id = $2',
      ['in-progress', jobId]
    );
    
    // Create job completion record
    await client.query(
      'INSERT INTO job_completions (job_id) VALUES ($1)',
      [jobId]
    );
    
    // Reject all other applications
    await client.query(
      'UPDATE job_applications SET status = $1 WHERE job_id = $2 AND id != $3',
      ['rejected', jobId, applicationId]
    );
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'Freelancer hired successfully');
    res.redirect('/client/jobs');
  } catch (error) {
    console.error('Error hiring freelancer:', error);
    req.flash('error_msg', 'Error hiring freelancer');
    res.redirect(`/client/jobs/${req.params.jobId}/applications`);
  }
};

// Client: Mark job as complete
exports.postCompleteJob = async (req, res) => {
  try {
    const { id } = req.params;
    const clientId = req.user.profile.id;
    
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Verify job ownership and status
    const jobResult = await client.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2 AND status = $3',
      [id, clientId, 'in-progress']
    );
    
    if (jobResult.rows.length === 0) {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Job not found, not in progress, or you are not authorized');
      return res.redirect('/client/jobs');
    }
    
    // Update job completion record
    await client.query(
      'UPDATE job_completions SET client_confirmed = true, updated_at = NOW() WHERE job_id = $1',
      [id]
    );
    
    // Check if both client and freelancer have confirmed
    const completionResult = await client.query(
      'SELECT * FROM job_completions WHERE job_id = $1',
      [id]
    );
    
    // If both confirmed, mark job as complete
    if (completionResult.rows[0].freelancer_confirmed) {
      await client.query(
        'UPDATE jobs SET status = $1, updated_at = NOW() WHERE id = $2',
        ['completed', id]
      );
      
      await client.query(
        'UPDATE job_completions SET completed_at = NOW() WHERE job_id = $1',
        [id]
      );
      
      // Get the hired freelancer to pay them
      const hiredApplicationResult = await client.query(
        'SELECT * FROM job_applications WHERE job_id = $1 AND status = $2',
        [id, 'hired']
      );
      
      if (hiredApplicationResult.rows.length > 0) {
        const freelancerId = hiredApplicationResult.rows[0].freelancer_id;
        
        // Get freelancer user_id for payment
        const freelancerResult = await client.query(
          'SELECT user_id FROM freelancers WHERE id = $1',
          [freelancerId]
        );
        
        if (freelancerResult.rows.length > 0) {
          const freelancerUserId = freelancerResult.rows[0].user_id;
          
          // Create payment record for freelancer payment
          await client.query(
            'INSERT INTO payments (job_id, amount, payment_type, status, paid_by, paid_to) VALUES ($1, $2, $3, $4, $5, $6)',
            [id, jobResult.rows[0].budget, 'freelancer_payment', 'pending', null, freelancerUserId]
          );
        }
      }
    }
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'Job marked as complete from your side');
    res.redirect('/client/jobs');
  } catch (error) {
    console.error('Error marking job as complete:', error);
    req.flash('error_msg', 'Error marking job as complete');
    res.redirect('/client/jobs');
  }
};

// Freelancer: Mark job as complete
exports.postFreelancerCompleteJob = async (req, res) => {
  try {
    const { id } = req.params;
    const freelancerId = req.user.profile.id;
    
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Verify freelancer is hired for this job
    const applicationResult = await client.query(
      'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2 AND status = $3',
      [id, freelancerId, 'hired']
    );
    
    if (applicationResult.rows.length === 0) {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Job not found or you are not hired for this job');
      return res.redirect('/freelancer/jobs');
    }
    
    // Verify job is in progress
    const jobResult = await client.query(
      'SELECT * FROM jobs WHERE id = $1 AND status = $2',
      [id, 'in-progress']
    );
    
    if (jobResult.rows.length === 0) {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Job is not in progress');
      return res.redirect('/freelancer/jobs');
    }
    
    // Update job completion record
    await client.query(
      'UPDATE job_completions SET freelancer_confirmed = true, updated_at = NOW() WHERE job_id = $1',
      [id]
    );
    
    // Check if both client and freelancer have confirmed
    const completionResult = await client.query(
      'SELECT * FROM job_completions WHERE job_id = $1',
      [id]
    );
    
    // If both confirmed, mark job as complete
    if (completionResult.rows[0].client_confirmed) {
      await client.query(
        'UPDATE jobs SET status = $1, updated_at = NOW() WHERE id = $2',
        ['completed', id]
      );
      
      await client.query(
        'UPDATE job_completions SET completed_at = NOW() WHERE job_id = $1',
        [id]
      );
      
      // Get client user_id and create payment for freelancer
      const jobWithClientResult = await client.query(
        'SELECT j.*, c.user_id as client_user_id FROM jobs j JOIN clients c ON j.client_id = c.id WHERE j.id = $1',
        [id]
      );
      
      if (jobWithClientResult.rows.length > 0) {
        const clientUserId = jobWithClientResult.rows[0].client_user_id;
        
        // Get freelancer user_id
        const freelancerResult = await client.query(
          'SELECT user_id FROM freelancers WHERE id = $1',
          [freelancerId]
        );
        
        if (freelancerResult.rows.length > 0) {
          const freelancerUserId = freelancerResult.rows[0].user_id;
          
          // Create payment record for freelancer payment if not already created
          const paymentCheck = await client.query(
            'SELECT * FROM payments WHERE job_id = $1 AND payment_type = $2',
            [id, 'freelancer_payment']
          );
          
          if (paymentCheck.rows.length === 0) {
            await client.query(
              'INSERT INTO payments (job_id, amount, payment_type, status, paid_by, paid_to) VALUES ($1, $2, $3, $4, $5, $6)',
              [id, jobWithClientResult.rows[0].budget, 'freelancer_payment', 'pending', clientUserId, freelancerUserId]
            );
          }
        }
      }
    }
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'Job marked as complete from your side');
    res.redirect('/freelancer/jobs');
  } catch (error) {
    console.error('Error marking job as complete:', error);
    req.flash('error_msg', 'Error marking job as complete');
    res.redirect('/freelancer/jobs');
  }
};

// Admin: Get all jobs
exports.adminGetAllJobs = async (req, res) => {
  try {
    // Get all jobs with client info
    const jobsResult = await db.query(`
      SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      ORDER BY j.created_at DESC
    `);
    
    res.render('admin/jobs', {
      jobs: jobsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching jobs:', error);
    req.flash('error_msg', 'Error fetching jobs');
    res.redirect('/admin/dashboard');
  }
};

// Admin: Get job details
exports.adminGetJobDetails = async (req, res) => {
  try {
    const { id } = req.params;
    
    // Get job details with client info
    const jobResult = await db.query(`
      SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      WHERE j.id = $1
    `, [id]);
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found');
      return res.redirect('/admin/jobs');
    }
    
    // Get applications with freelancer details
    const applicationsResult = await db.query(`
      SELECT ja.*, f.first_name, f.last_name, f.skills, f.experience, f.cv_path
      FROM job_applications ja
      INNER JOIN freelancers f ON ja.freelancer_id = f.id
      WHERE ja.job_id = $1
      ORDER BY ja.created_at DESC
    `, [id]);
    
    // Get payment info
    const paymentResult = await db.query(
      'SELECT * FROM payments WHERE job_id = $1 ORDER BY created_at DESC',
      [id]
    );
    
    res.render('admin/job-details', {
      job: jobResult.rows[0],
      applications: applicationsResult.rows,
      payments: paymentResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching job details:', error);
    req.flash('error_msg', 'Error fetching job details');
    res.redirect('/admin/jobs');
  }
};

// Admin: Delete job
exports.adminDeleteJob = async (req, res) => {
  try {
    const { id } = req.params;
    
    await db.query('DELETE FROM jobs WHERE id = $1', [id]);
    
    req.flash('success_msg', 'Job deleted successfully');
    res.redirect('/admin/jobs');
  } catch (error) {
    console.error('Error deleting job:', error);
    req.flash('error_msg', 'Error deleting job');
    res.redirect('/admin/jobs');
  }
};

// Get invoice
exports.getJobInvoice = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    // Get job details
    let jobResult;
    
    if (req.user.role === 'admin') {
      jobResult = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.phone AS client_phone, c.address AS client_address,
               c.email AS client_email
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN users u ON c.user_id = u.id
        WHERE j.id = $1
      `, [id]);
    } else if (req.user.role === 'client') {
      jobResult = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.phone AS client_phone, c.address AS client_address,
               u.email AS client_email
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN users u ON c.user_id = u.id
        WHERE j.id = $1 AND c.user_id = $2
      `, [id, userId]);
    } else { // freelancer
      jobResult = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.phone AS client_phone, c.address AS client_address,
               u.email AS client_email
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN users u ON c.user_id = u.id
        INNER JOIN job_applications ja ON j.id = ja.job_id
        WHERE j.id = $1 AND ja.freelancer_id = $2 AND ja.status = 'hired'
      `, [id, req.user.profile.id]);
    }
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found or you are not authorized to view this invoice');
      return res.redirect('/');
    }
    
    const job = jobResult.rows[0];
    
    // Get hired freelancer info
    const freelancerResult = await db.query(`
      SELECT f.first_name, f.last_name, f.phone, f.address, u.email
      FROM freelancers f
      INNER JOIN users u ON f.user_id = u.id
      INNER JOIN job_applications ja ON f.id = ja.freelancer_id
      WHERE ja.job_id = $1 AND ja.status = 'hired'
    `, [id]);
    
    let freelancer = null;
    if (freelancerResult.rows.length > 0) {
      freelancer = freelancerResult.rows[0];
    }
    
    // Generate CSV
    const { generateCsv } = require('../utils/csvGenerator');
    const csvData = generateCsv(job, freelancer);
    
    // Set headers for CSV download
    res.setHeader('Content-Type', 'text/csv');
    res.setHeader('Content-Disposition', `attachment; filename=invoice-job-${id}.csv`);
    
    // Send CSV data
    res.send(csvData);
  } catch (error) {
    console.error('Error generating invoice:', error);
    req.flash('error_msg', 'Error generating invoice');
    res.redirect('/');
  }
};

=== END OF FILE: controllers/jobController.js ===



=== FILE: controllers/paymentController.js ===

const db = require('../config/database');
const yoco = require('../config/yoco');

// Client: Get payment page for job
exports.getJobPaymentPage = async (req, res) => {
  try {
    const { id } = req.params;
    const clientId = req.user.profile.id;
    
    // Verify job ownership
    const jobResult = await db.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [id, clientId]
    );
    
    if (jobResult.rows.length === 0) {
      req.flash('error_msg', 'Job not found or you are not authorized');
      return res.redirect('/client/jobs');
    }
    
    // Check if already paid
    if (jobResult.rows[0].payment_status === 'paid') {
      req.flash('success_msg', 'Job has already been paid for');
      return res.redirect('/client/jobs');
    }
    
    res.render('client/payment', {
      job: jobResult.rows[0],
      yocoPublicKey: process.env.YOCO_PUBLIC_KEY,
      user: req.user
    });
  } catch (error) {
    console.error('Error loading payment page:', error);
    req.flash('error_msg', 'Error loading payment page');
    res.redirect('/client/jobs');
  }
};

// Client: Process job payment
exports.postJobPayment = async (req, res) => {
  try {
    const { id } = req.params;
    const { token } = req.body;
    const clientId = req.user.profile.id;
    const userId = req.user.id;
    
    // Verify job ownership
    const jobResult = await db.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [id, clientId]
    );
    
    if (jobResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Job not found or you are not authorized' 
      });
    }
    
    // Check if already paid
    if (jobResult.rows[0].payment_status === 'paid') {
      return res.status(400).json({ 
        success: false, 
        message: 'Job has already been paid for' 
      });
    }
    
    const job = jobResult.rows[0];
    
    // Process payment with Yoco
    try {
      const charge = await yoco.payments.create({
        token: token,
        amountInCents: Math.round(job.budget * 100), // Convert to cents
        currency: 'ZAR',
        metadata: {
          jobId: id,
          clientId: clientId
        }
      });
      
      // Payment successful, update job and create payment record
      const client = await db.getClient();
      await client.query('BEGIN');
      
      // Update job payment status
      await client.query(
        'UPDATE jobs SET payment_status = $1, status = $2 WHERE id = $3',
        ['paid', 'open', id]
      );
      
      // Create payment record
      await client.query(
        'INSERT INTO payments (job_id, amount, transaction_id, payment_type, status, paid_by) VALUES ($1, $2, $3, $4, $5, $6)',
        [id, job.budget, charge.id, 'job_posting', 'completed', userId]
      );
      
      await client.query('COMMIT');
      client.release();
      
      return res.json({ success: true, message: 'Payment successful' });
    } catch (error) {
      console.error('Yoco payment error:', error);
      return res.status(400).json({ 
        success: false, 
        message: error.message || 'Payment processing failed' 
      });
    }
  } catch (error) {
    console.error('Payment error:', error);
    return res.status(500).json({ 
      success: false, 
      message: 'An error occurred during payment processing' 
    });
  }
};

// Admin: Process freelancer payment (after job completion)
exports.adminProcessFreelancerPayment = async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    const client = await db.getClient();
    await client.query('BEGIN');
    
    // Get payment details
    const paymentResult = await client.query(
      'SELECT * FROM payments WHERE id = $1 AND payment_type = $2 AND status = $3',
      [paymentId, 'freelancer_payment', 'pending']
    );
    
    if (paymentResult.rows.length === 0) {
      await client.query('ROLLBACK');
      client.release();
      req.flash('error_msg', 'Payment not found or not eligible for processing');
      return res.redirect('/admin/payments');
    }
    
    const payment = paymentResult.rows[0];
    
    // Update payment status
    await client.query(
      'UPDATE payments SET status = $1, updated_at = NOW() WHERE id = $2',
      ['completed', paymentId]
    );
    
    await client.query('COMMIT');
    client.release();
    
    req.flash('success_msg', 'Freelancer payment processed successfully');
    res.redirect('/admin/payments');
  } catch (error) {
    console.error('Error processing freelancer payment:', error);
    req.flash('error_msg', 'Error processing freelancer payment');
    res.redirect('/admin/payments');
  }
};

// Admin: Get all payments
exports.adminGetAllPayments = async (req, res) => {
  try {
    // Get all payments with job and user details
    const paymentsResult = await db.query(`
      SELECT p.*, j.title AS job_title, 
             u_from.email AS paid_by_email,
             u_to.email AS paid_to_email
      FROM payments p
      LEFT JOIN jobs j ON p.job_id = j.id
      LEFT JOIN users u_from ON p.paid_by = u_from.id
      LEFT JOIN users u_to ON p.paid_to = u_to.id
      ORDER BY p.created_at DESC
    `);
    
    res.render('admin/payments', {
      payments: paymentsResult.rows,
      user: req.user
    });
  } catch (error) {
    console.error('Error fetching payments:', error);
    req.flash('error_msg', 'Error fetching payments');
    res.redirect('/admin/dashboard');
  }
};

=== END OF FILE: controllers/paymentController.js ===



=== FILE: controllers/profileController.js ===

/**
 * Controller for user profile management
 */
const User = require('../models/User');
const Client = require('../models/Client');
const Freelancer = require('../models/Freelancer');
const Admin = require('../models/Admin');
const bcrypt = require('bcryptjs');
const { AppError } = require('../utils/errorHandler');

// Get profile page
exports.getProfile = async (req, res, next) => {
  try {
    if (req.user.role === 'client') {
      res.render('profile/client-profile', {
        user: req.user
      });
    } else if (req.user.role === 'freelancer') {
      res.render('profile/freelancer-profile', {
        user: req.user
      });
    } else if (req.user.role === 'admin') {
      res.render('profile/admin-profile', {
        user: req.user
      });
    } else {
      return next(new AppError('Invalid user role', 400));
    }
  } catch (error) {
    next(error);
  }
};

// Update client profile
exports.updateClientProfile = async (req, res, next) => {
  try {
    const { firstName, lastName, companyName, phone, address, skills, experience } = req.body;
    const userId = req.user.id;
    const clientId = req.user.profile.id;
    
    // Process skills into array
    let skillsArray = skills ? skills.split(',').map(skill => skill.trim()).filter(skill => skill !== '') : [];
    
    // Get CV path from file upload or use existing
    let cvPath = req.user.profile.cv_path;
    if (req.file) {
      cvPath = `/uploads/cvs/${req.file.filename}`;
    }
    
    // Update profile
    await Client.update(clientId, {
      firstName,
      lastName,
      companyName,
      phone,
      address,
      skills: skillsArray,
      experience,
      cvPath
    });
    
    req.flash('success_msg', 'Profile updated successfully');
    res.redirect('/profile');
  } catch (error) {
    next(error);
  }
};

// Update freelancer profile
exports.updateFreelancerProfile = async (req, res, next) => {
  try {
    const { firstName, lastName, phone, address, skills, experience } = req.body;
    const userId = req.user.id;
    const freelancerId = req.user.profile.id;
    
    // Process skills into array
    let skillsArray = skills ? skills.split(',').map(skill => skill.trim()).filter(skill => skill !== '') : [];
    
    // Get file paths from uploads or use existing
    let cvPath = req.user.profile.cv_path;
    let clearancePath = req.user.profile.clearance_path;
    
    if (req.files) {
      if (req.files.cv && req.files.cv.length > 0) {
        cvPath = `/uploads/cvs/${req.files.cv[0].filename}`;
      }
      
      if (req.files.clearance && req.files.clearance.length > 0) {
        clearancePath = `/uploads/clearances/${req.files.clearance[0].filename}`;
      }
    }
    
    // Update profile
    await Freelancer.update(freelancerId, {
      firstName,
      lastName,
      phone,
      address,
      skills: skillsArray,
      experience,
      cvPath,
      clearancePath
    });
    
    req.flash('success_msg', 'Profile updated successfully');
    res.redirect('/profile');
  } catch (error) {
    next(error);
  }
};

// Update admin profile
exports.updateAdminProfile = async (req, res, next) => {
  try {
    const { firstName, lastName } = req.body;
    const adminId = req.user.profile.id;
    
    // Update profile
    await Admin.update(adminId, {
      firstName,
      lastName
    });
    
    req.flash('success_msg', 'Profile updated successfully');
    res.redirect('/profile');
  } catch (error) {
    next(error);
  }
};

// Change password
exports.changePassword = async (req, res, next) => {
  try {
    const { currentPassword, newPassword, confirmPassword } = req.body;
    const userId = req.user.id;
    
    // Validate inputs
    if (!currentPassword || !newPassword || !confirmPassword) {
      req.flash('error_msg', 'Please fill in all password fields');
      return res.redirect('/profile');
    }
    
    if (newPassword.length < 6) {
      req.flash('error_msg', 'New password must be at least 6 characters');
      return res.redirect('/profile');
    }
    
    if (newPassword !== confirmPassword) {
      req.flash('error_msg', 'New passwords do not match');
      return res.redirect('/profile');
    }
    
    // Get user
    const user = await User.findById(userId);
    
    if (!user) {
      req.flash('error_msg', 'User not found');
      return res.redirect('/profile');
    }
    
    // Check if current password is correct
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    
    if (!isMatch) {
      req.flash('error_msg', 'Current password is incorrect');
      return res.redirect('/profile');
    }
    
    // Hash new password and update
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    await User.update(userId, {
      password: hashedPassword
    });
    
    req.flash('success_msg', 'Password changed successfully');
    res.redirect('/profile');
  } catch (error) {
    next(error);
  }
};

=== END OF FILE: controllers/profileController.js ===



=== FILE: crawler.js ===

const fs = require('fs');
const path = require('path');

// Configuration
const TARGET_DIRECTORY = './'; // Change this to your project directory if needed
const OUTPUT_FILE = 'file_contents_log.txt';
const FILE_EXTENSIONS = ['.ejs', '.js'];
const IGNORED_DIRECTORIES = ['node_modules', '.vscode']; // Directories to ignore

// Function to process a directory recursively
function processDirectory(directory, relativePath = '') {
  const entries = fs.readdirSync(directory, { withFileTypes: true });
  let output = '';

  for (const entry of entries) {
    const fullPath = path.join(directory, entry.name);
    const relativeFilePath = path.join(relativePath, entry.name);

    if (entry.isDirectory()) {
      // Skip ignored directories
      if (IGNORED_DIRECTORIES.includes(entry.name)) {
        continue;
      }
      output += processDirectory(fullPath, relativeFilePath);
    } else if (FILE_EXTENSIONS.includes(path.extname(entry.name).toLowerCase())) {
      try {
        const fileContent = fs.readFileSync(fullPath, 'utf8');
        output += `\n\n=== FILE: ${relativeFilePath} ===\n\n`;
        output += fileContent;
        output += `\n\n=== END OF FILE: ${relativeFilePath} ===\n\n`;
      } catch (err) {
        console.error(`Error reading file ${fullPath}:`, err);
      }
    }
  }

  return output;
}

// Main function
function main() {
  console.log(`Starting scan of directory: ${TARGET_DIRECTORY}`);
  console.log(`Ignoring directories: ${IGNORED_DIRECTORIES.join(', ')}`);
  
  // Check if target directory exists
  if (!fs.existsSync(TARGET_DIRECTORY)) {
    console.error(`Error: Directory ${TARGET_DIRECTORY} does not exist.`);
    process.exit(1);
  }

  // Process the directory
  const outputContent = processDirectory(TARGET_DIRECTORY);

  // Write to output file
  fs.writeFileSync(OUTPUT_FILE, outputContent, 'utf8');
  console.log(`Scan completed. Results written to ${OUTPUT_FILE}`);
  console.log(`Total file size: ${(outputContent.length / 1024 / 1024).toFixed(2)} MB`);
}

// Run the program
main();

=== END OF FILE: crawler.js ===



=== FILE: middleware/auth.js ===

// Check if user is authenticated
exports.isAuthenticated = (req, res, next) => {
  if (req.isAuthenticated()) {
    return next();
  }
  req.flash('error_msg', 'Please log in to view this resource');
  res.redirect('/auth/login');
};

// Check if user is a client
exports.isClient = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'client') {
    return next();
  }
  req.flash('error_msg', 'Access denied. Client access only.');
  res.redirect('/');
};

// Check if user is a freelancer
exports.isFreelancer = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'freelancer') {
    return next();
  }
  req.flash('error_msg', 'Access denied. Freelancer access only.');
  res.redirect('/');
};

// Check if user is an admin
exports.isAdmin = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'admin') {
    return next();
  }
  req.flash('error_msg', 'Access denied. Admin access only.');
  res.redirect('/');
};

// Check if a freelancer is approved
exports.isApprovedFreelancer = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'freelancer') {
    if (req.user.profile && req.user.profile.is_approved) {
      return next();
    }
    req.flash('error_msg', 'Your account is pending approval by an administrator.');
    res.redirect('/freelancer/pending');
  } else {
    req.flash('error_msg', 'Access denied. Approved freelancer access only.');
    res.redirect('/');
  }
};

=== END OF FILE: middleware/auth.js ===



=== FILE: middleware/fileUpload.js ===

const multer = require('multer');
const path = require('path');
const fs = require('fs');

// Ensure upload directories exist
const cvDir = path.join(__dirname, '../public/uploads/cvs');
const clearanceDir = path.join(__dirname, '../public/uploads/clearances');

if (!fs.existsSync(cvDir)) {
  fs.mkdirSync(cvDir, { recursive: true });
}

if (!fs.existsSync(clearanceDir)) {
  fs.mkdirSync(clearanceDir, { recursive: true });
}

// Configure storage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    if (file.fieldname === 'cv') {
      cb(null, cvDir);
    } else if (file.fieldname === 'clearance') {
      cb(null, clearanceDir);
    } else {
      cb(new Error('Invalid file field'));
    }
  },
  filename: (req, file, cb) => {
    const fileName = `${Date.now()}-${Math.round(Math.random() * 1E9)}${path.extname(file.originalname)}`;
    cb(null, fileName);
  }
});

// File filter
const fileFilter = (req, file, cb) => {
  const allowedTypes = ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png'];
  const ext = path.extname(file.originalname).toLowerCase();
  
  if (allowedTypes.includes(ext)) {
    cb(null, true);
  } else {
    cb(new Error('Only PDF, DOC, DOCX, JPG, JPEG, and PNG files are allowed'));
  }
};

// Create multer instance
const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024 // 5MB
  }
});

module.exports = { upload };

=== END OF FILE: middleware/fileUpload.js ===



=== FILE: middleware/roleCheck.js ===

/**
 * Role-based access control middleware
 */

// Check if user has admin role
exports.isAdmin = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'admin') {
    return next();
  }
  req.flash('error_msg', 'Access denied. Admin privileges required.');
  res.redirect('/');
};

// Check if user has client role
exports.isClient = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'client') {
    return next();
  }
  req.flash('error_msg', 'Access denied. Client account required.');
  res.redirect('/');
};

// Check if user has freelancer role
exports.isFreelancer = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'freelancer') {
    return next();
  }
  req.flash('error_msg', 'Access denied. Freelancer account required.');
  res.redirect('/');
};

// Check if freelancer is approved
exports.isApprovedFreelancer = (req, res, next) => {
  if (req.isAuthenticated() && req.user.role === 'freelancer') {
    if (req.user.profile && req.user.profile.is_approved) {
      return next();
    }
    req.flash('error_msg', 'Your account is pending approval by an administrator.');
    res.redirect('/freelancer/pending');
  } else {
    req.flash('error_msg', 'Access denied. Approved freelancer account required.');
    res.redirect('/');
  }
};

// Check if user owns a specific job (for clients)
exports.isJobOwner = async (req, res, next) => {
  try {
    if (!req.isAuthenticated() || req.user.role !== 'client') {
      req.flash('error_msg', 'Access denied.');
      return res.redirect('/');
    }
    
    const jobId = req.params.id || req.params.jobId;
    const clientId = req.user.profile.id;
    
    // Require database access
    const db = require('../config/database');
    
    const result = await db.query(
      'SELECT * FROM jobs WHERE id = $1 AND client_id = $2',
      [jobId, clientId]
    );
    
    if (result.rows.length === 0) {
      req.flash('error_msg', 'Access denied. You do not own this job.');
      return res.redirect('/client/jobs');
    }
    
    // Add job to req object for later use
    req.job = result.rows[0];
    next();
  } catch (error) {
    console.error('Error in isJobOwner middleware:', error);
    req.flash('error_msg', 'An error occurred while checking job ownership.');
    res.redirect('/client/jobs');
  }
};

// Check if user has applied to a specific job (for freelancers)
exports.hasAppliedToJob = async (req, res, next) => {
  try {
    if (!req.isAuthenticated() || req.user.role !== 'freelancer') {
      req.flash('error_msg', 'Access denied.');
      return res.redirect('/');
    }
    
    const jobId = req.params.id || req.params.jobId;
    const freelancerId = req.user.profile.id;
    
    // Require database access
    const db = require('../config/database');
    
    const result = await db.query(
      'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2',
      [jobId, freelancerId]
    );
    
    if (result.rows.length === 0) {
      req.flash('error_msg', 'You have not applied to this job.');
      return res.redirect('/jobs/' + jobId);
    }
    
    // Add application to req object for later use
    req.application = result.rows[0];
    next();
  } catch (error) {
    console.error('Error in hasAppliedToJob middleware:', error);
    req.flash('error_msg', 'An error occurred while checking job application.');
    res.redirect('/freelancer/applications');
  }
};

// Check if user is hired for a job (for freelancers)
exports.isHiredForJob = async (req, res, next) => {
  try {
    if (!req.isAuthenticated() || req.user.role !== 'freelancer') {
      req.flash('error_msg', 'Access denied.');
      return res.redirect('/');
    }
    
    const jobId = req.params.id || req.params.jobId;
    const freelancerId = req.user.profile.id;
    
    // Require database access
    const db = require('../config/database');
    
    const result = await db.query(
      'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2 AND status = $3',
      [jobId, freelancerId, 'hired']
    );
    
    if (result.rows.length === 0) {
      req.flash('error_msg', 'You are not hired for this job.');
      return res.redirect('/freelancer/applications');
    }
    
    // Add application to req object for later use
    req.application = result.rows[0];
    next();
  } catch (error) {
    console.error('Error in isHiredForJob middleware:', error);
    req.flash('error_msg', 'An error occurred while checking job status.');
    res.redirect('/freelancer/applications');
  }
};

=== END OF FILE: middleware/roleCheck.js ===



=== FILE: models/Admin.js ===

/**
 * Admin model for admin-specific operations
 */
const db = require('../config/database');

class Admin {
  // Find an admin by user ID
  static async findByUserId(userId) {
    try {
      const result = await db.query('SELECT * FROM admins WHERE user_id = $1', [userId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding admin by user ID:', error);
      throw error;
    }
  }
  
  // Find an admin by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM admins WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding admin by ID:', error);
      throw error;
    }
  }
  
  // Create a new admin profile
  static async create(adminData) {
    try {
      const { userId, firstName, lastName } = adminData;
      
      const result = await db.query(
        'INSERT INTO admins (user_id, first_name, last_name) VALUES ($1, $2, $3) RETURNING *',
        [userId, firstName, lastName]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating admin profile:', error);
      throw error;
    }
  }
  
  // Update an admin profile
  static async update(id, adminData) {
    try {
      const { firstName, lastName } = adminData;
      
      const result = await db.query(
        `UPDATE admins 
         SET first_name = $1, last_name = $2, updated_at = $3 
         WHERE id = $4 
         RETURNING *`,
        [firstName, lastName, new Date(), id]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error updating admin profile:', error);
      throw error;
    }
  }
  
  // Get all admins
  static async getAll() {
    try {
      const result = await db.query(`
        SELECT a.*, u.email, u.created_at as user_created_at
        FROM admins a
        JOIN users u ON a.user_id = u.id
        ORDER BY a.created_at DESC
      `);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting all admins:', error);
      throw error;
    }
  }
  
  // Count all admins
  static async count() {
    try {
      const result = await db.query('SELECT COUNT(*) FROM admins');
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error('Error counting admins:', error);
      throw error;
    }
  }
}

//Test invoice, approvals for admins, delete user by admin, assign credentials 

module.exports = Admin;

=== END OF FILE: models/Admin.js ===



=== FILE: models/Client.js ===

/**
 * Client model for client-specific operations
 */
const db = require('../config/database');

class Client {
  // Find a client by user ID
  static async findByUserId(userId) {
    try {
      const result = await db.query('SELECT * FROM clients WHERE user_id = $1', [userId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding client by user ID:', error);
      throw error;
    }
  }
  
  // Find a client by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM clients WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding client by ID:', error);
      throw error;
    }
  }
  
  // Create a new client profile
  static async create(clientData) {
    try {
      const { 
        userId, firstName, lastName, companyName, 
        phone, address, skills, experience, cvPath 
      } = clientData;
      
      const result = await db.query(
        `INSERT INTO clients 
         (user_id, first_name, last_name, company_name, phone, address, skills, experience, cv_path) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) 
         RETURNING *`,
        [userId, firstName, lastName, companyName, phone, address, skills, experience, cvPath]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating client profile:', error);
      throw error;
    }
  }
  
  // Update a client profile
  static async update(id, clientData) {
    try {
      const { 
        firstName, lastName, companyName, 
        phone, address, skills, experience, cvPath 
      } = clientData;
      
      // Start building the query
      let query = 'UPDATE clients SET ';
      const values = [];
      const queryParts = [];
      
      // Add fields if provided
      if (firstName) {
        queryParts.push(`first_name = $${values.length + 1}`);
        values.push(firstName);
      }
      
      if (lastName) {
        queryParts.push(`last_name = $${values.length + 1}`);
        values.push(lastName);
      }
      
      if (companyName !== undefined) {
        queryParts.push(`company_name = $${values.length + 1}`);
        values.push(companyName);
      }
      
      if (phone !== undefined) {
        queryParts.push(`phone = $${values.length + 1}`);
        values.push(phone);
      }
      
      if (address !== undefined) {
        queryParts.push(`address = $${values.length + 1}`);
        values.push(address);
      }
      
      if (skills) {
        queryParts.push(`skills = $${values.length + 1}`);
        values.push(skills);
      }
      
      if (experience !== undefined) {
        queryParts.push(`experience = $${values.length + 1}`);
        values.push(experience);
      }
      
      if (cvPath) {
        queryParts.push(`cv_path = $${values.length + 1}`);
        values.push(cvPath);
      }
      
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating client profile:', error);
      throw error;
    }
  }
  
  // Get a client with user details
  static async getWithUserDetails(id) {
    try {
      const result = await db.query(`
        SELECT c.*, u.email, u.created_at as user_created_at
        FROM clients c
        JOIN users u ON c.user_id = u.id
        WHERE c.id = $1
      `, [id]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting client with user details:', error);
      throw error;
    }
  }
  
  // Get all clients
  static async getAll() {
    try {
      const result = await db.query(`
        SELECT c.*, u.email, u.created_at as user_created_at
        FROM clients c
        JOIN users u ON c.user_id = u.id
        ORDER BY c.created_at DESC
      `);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting all clients:', error);
      throw error;
    }
  }
  
  // Count all clients
  static async count() {
    try {
      const result = await db.query('SELECT COUNT(*) FROM clients');
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error('Error counting clients:', error);
      throw error;
    }
  }
  
  // Get client's jobs
  static async getJobs(clientId) {
    try {
      const result = await db.query(`
        SELECT * FROM jobs
        WHERE client_id = $1
        ORDER BY created_at DESC
      `, [clientId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting client jobs:', error);
      throw error;
    }
  }
}

module.exports = Client;

=== END OF FILE: models/Client.js ===



=== FILE: models/Freelancer.js ===

/**
 * Freelancer model for freelancer-specific operations
 */
const db = require('../config/database');

class Freelancer {
  // Find a freelancer by user ID
  static async findByUserId(userId) {
    try {
      const result = await db.query('SELECT * FROM freelancers WHERE user_id = $1', [userId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding freelancer by user ID:', error);
      throw error;
    }
  }
  
  // Find a freelancer by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM freelancers WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding freelancer by ID:', error);
      throw error;
    }
  }
  
  // Create a new freelancer profile
  static async create(freelancerData) {
    try {
      const { 
        userId, firstName, lastName, phone, address, 
        skills, experience, cvPath, clearancePath 
      } = freelancerData;
      
      const result = await db.query(
        `INSERT INTO freelancers 
         (user_id, first_name, last_name, phone, address, skills, experience, cv_path, clearance_path, is_approved) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) 
         RETURNING *`,
        [userId, firstName, lastName, phone, address, skills, experience, cvPath, clearancePath, false]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating freelancer profile:', error);
      throw error;
    }
  }
  
  // Update a freelancer profile
  static async update(id, freelancerData) {
    try {
      const { 
        firstName, lastName, phone, address, 
        skills, experience, cvPath, clearancePath 
      } = freelancerData;
      
      // Start building the query
      let query = 'UPDATE freelancers SET ';
      const values = [];
      const queryParts = [];
      
      // Add fields if provided
      if (firstName) {
        queryParts.push(`first_name = $${values.length + 1}`);
        values.push(firstName);
      }
      
      if (lastName) {
        queryParts.push(`last_name = $${values.length + 1}`);
        values.push(lastName);
      }
      
      if (phone !== undefined) {
        queryParts.push(`phone = $${values.length + 1}`);
        values.push(phone);
      }
      
      if (address !== undefined) {
        queryParts.push(`address = $${values.length + 1}`);
        values.push(address);
      }
      
      if (skills) {
        queryParts.push(`skills = $${values.length + 1}`);
        values.push(skills);
      }
      
      if (experience !== undefined) {
        queryParts.push(`experience = $${values.length + 1}`);
        values.push(experience);
      }
      
      if (cvPath) {
        queryParts.push(`cv_path = $${values.length + 1}`);
        values.push(cvPath);
      }
      
      if (clearancePath) {
        queryParts.push(`clearance_path = $${values.length + 1}`);
        values.push(clearancePath);
      }
      
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating freelancer profile:', error);
      throw error;
    }
  }
  
  // Approve a freelancer
  static async approve(id) {
    try {
      const result = await db.query(
        'UPDATE freelancers SET is_approved = TRUE, updated_at = $1 WHERE id = $2 RETURNING *',
        [new Date(), id]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error approving freelancer:', error);
      throw error;
    }
  }
  
  // Get freelancer with user details
  static async getWithUserDetails(id) {
    try {
      const result = await db.query(`
        SELECT f.*, u.email, u.created_at as user_created_at
        FROM freelancers f
        JOIN users u ON f.user_id = u.id
        WHERE f.id = $1
      `, [id]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting freelancer with user details:', error);
      throw error;
    }
  }
  
  // Get all freelancers
  static async getAll(options = {}) {
    try {
      let query = `
        SELECT f.*, u.email, u.created_at as user_created_at
        FROM freelancers f
        JOIN users u ON f.user_id = u.id
      `;
      
      const values = [];
      
      // Add filters
      if (options.approved !== undefined) {
        query += ` WHERE f.is_approved = $${values.length + 1}`;
        values.push(options.approved);
      }
      
      // Add ordering
      query += ' ORDER BY f.created_at DESC';
      
      const result = await db.query(query, values);
      return result.rows;
    } catch (error) {
      console.error('Error getting freelancers:', error);
      throw error;
    }
  }
  
  // Get all pending approvals
  static async getPendingApprovals() {
    return this.getAll({ approved: false });
  }
  
  // Count all freelancers
  static async count(approved = null) {
    try {
      let query = 'SELECT COUNT(*) FROM freelancers';
      const values = [];
      
      if (approved !== null) {
        query += ' WHERE is_approved = $1';
        values.push(approved);
      }
      
      const result = await db.query(query, values);
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error('Error counting freelancers:', error);
      throw error;
    }
  }
  
  // Get freelancer's applications
  static async getApplications(freelancerId) {
    try {
      const result = await db.query(`
        SELECT ja.*, j.title, j.description, j.budget, j.deadline, j.status AS job_status, 
               c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name
        FROM job_applications ja
        INNER JOIN jobs j ON ja.job_id = j.id
        INNER JOIN clients c ON j.client_id = c.id
        WHERE ja.freelancer_id = $1
        ORDER BY ja.created_at DESC
      `, [freelancerId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting freelancer applications:', error);
      throw error;
    }
  }
  
  // Get freelancer's hired jobs
  static async getHiredJobs(freelancerId) {
    try {
      const result = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name,
               ja.status AS application_status, ja.created_at AS application_date
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN job_applications ja ON j.id = ja.job_id
        WHERE ja.freelancer_id = $1 AND ja.status = 'hired'
        ORDER BY j.updated_at DESC
      `, [freelancerId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting freelancer hired jobs:', error);
      throw error;
    }
  }
}

module.exports = Freelancer;

=== END OF FILE: models/Freelancer.js ===



=== FILE: models/Job.js ===

/**
 * Job model for job-related operations
 */
const db = require('../config/database');

class Job {
  // Find a job by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM jobs WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding job by ID:', error);
      throw error;
    }
  }
  
  // Get a job with client details
  static async getWithClientDetails(id) {
    try {
      const result = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.user_id AS client_user_id
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        WHERE j.id = $1
      `, [id]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting job with client details:', error);
      throw error;
    }
  }
  
  // Create a new job
  static async create(jobData) {
    try {
      const { 
        clientId, title, description, requirements, 
        budget, deadline, status, paymentStatus 
      } = jobData;
      
      const result = await db.query(
        `INSERT INTO jobs 
         (client_id, title, description, requirements, budget, deadline, status, payment_status) 
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8) 
         RETURNING *`,
        [clientId, title, description, requirements, budget, deadline, status || 'pending', paymentStatus || 'unpaid']
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating job:', error);
      throw error;
    }
  }
  
  // Update a job
  static async update(id, jobData) {
    try {
      const { 
        title, description, requirements, 
        budget, deadline, status, paymentStatus 
      } = jobData;
      
      // Start building the query
      let query = 'UPDATE jobs SET ';
      const values = [];
      const queryParts = [];
      
      // Add fields if provided
      if (title) {
        queryParts.push(`title = $${values.length + 1}`);
        values.push(title);
      }
      
      if (description) {
        queryParts.push(`description = $${values.length + 1}`);
        values.push(description);
      }
      
      if (requirements !== undefined) {
        queryParts.push(`requirements = $${values.length + 1}`);
        values.push(requirements);
      }
      
      if (budget) {
        queryParts.push(`budget = $${values.length + 1}`);
        values.push(budget);
      }
      
      if (deadline !== undefined) {
        queryParts.push(`deadline = $${values.length + 1}`);
        values.push(deadline);
      }
      
      if (status) {
        queryParts.push(`status = $${values.length + 1}`);
        values.push(status);
      }
      
      if (paymentStatus) {
        queryParts.push(`payment_status = $${values.length + 1}`);
        values.push(paymentStatus);
      }
      
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating job:', error);
      throw error;
    }
  }
  
  // Delete a job
  static async delete(id) {
    try {
      const result = await db.query('DELETE FROM jobs WHERE id = $1 RETURNING *', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error deleting job:', error);
      throw error;
    }
  }
  
  // Get all jobs with optional filters
  static async getAll(options = {}) {
    try {
      let query = `
        SELECT j.*, c.first_name, c.last_name, c.company_name
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
      `;
      
      const values = [];
      const conditions = [];
      
      // Add filters
      if (options.status) {
        conditions.push(`j.status = $${values.length + 1}`);
        values.push(options.status);
      }
      
      if (options.clientId) {
        conditions.push(`j.client_id = $${values.length + 1}`);
        values.push(options.clientId);
      }
      
      if (options.minBudget) {
        conditions.push(`j.budget >= $${values.length + 1}`);
        values.push(options.minBudget);
      }
      
      if (options.maxBudget) {
        conditions.push(`j.budget <= $${values.length + 1}`);
        values.push(options.maxBudget);
      }
      
      // Add WHERE clause if there are conditions
      if (conditions.length > 0) {
        query += ' WHERE ' + conditions.join(' AND ');
      }
      
      // Add ordering
      query += ' ORDER BY ' + (options.orderBy || 'j.created_at DESC');
      
      // Add limit if specified
      if (options.limit) {
        query += ` LIMIT $${values.length + 1}`;
        values.push(options.limit);
      }
      
      const result = await db.query(query, values);
      return result.rows;
    } catch (error) {
      console.error('Error getting jobs:', error);
      throw error;
    }
  }
  
  // Get open jobs
  static async getOpenJobs() {
    return this.getAll({ status: 'open' });
  }
  
  // Get a client's jobs
  static async getClientJobs(clientId) {
    return this.getAll({ clientId });
  }
  
  // Get job applications
  static async getApplications(jobId) {
    try {
      const result = await db.query(`
        SELECT ja.*, f.first_name, f.last_name, f.skills, f.experience, f.cv_path
        FROM job_applications ja
        INNER JOIN freelancers f ON ja.freelancer_id = f.id
        WHERE ja.job_id = $1
        ORDER BY ja.created_at DESC
      `, [jobId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting job applications:', error);
      throw error;
    }
  }
  
  // Hire a freelancer for a job
  static async hireFreelancer(jobId, applicationId) {
    const client = await db.getClient();
    
    try {
      await client.query('BEGIN');
      
      // Update application status to hired
      await client.query(
        'UPDATE job_applications SET status = $1 WHERE id = $2',
        ['hired', applicationId]
      );
      
      // Update job status to in-progress
      await client.query(
        'UPDATE jobs SET status = $1 WHERE id = $2',
        ['in-progress', jobId]
      );
      
      // Create job completion record
      await client.query(
        'INSERT INTO job_completions (job_id) VALUES ($1)',
        [jobId]
      );
      
      // Reject all other applications
      await client.query(
        'UPDATE job_applications SET status = $1 WHERE job_id = $2 AND id != $3',
        ['rejected', jobId, applicationId]
      );
      
      await client.query('COMMIT');
      
      return true;
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('Error hiring freelancer:', error);
      throw error;
    } finally {
      client.release();
    }
  }
  
  // Mark job as complete from client side
  static async markCompleteByClient(jobId) {
    try {
      // Update job completion record
      await db.query(
        'UPDATE job_completions SET client_confirmed = true, updated_at = NOW() WHERE job_id = $1',
        [jobId]
      );
      
      // Check if both parties have confirmed
      const completionResult = await db.query(
        'SELECT * FROM job_completions WHERE job_id = $1',
        [jobId]
      );
      
      if (completionResult.rows.length > 0 && completionResult.rows[0].freelancer_confirmed) {
        // If both confirmed, mark job as complete
        await db.query(
          'UPDATE jobs SET status = $1, updated_at = NOW() WHERE id = $2',
          ['completed', jobId]
        );
        
        await db.query(
          'UPDATE job_completions SET completed_at = NOW() WHERE job_id = $1',
          [jobId]
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error marking job as complete by client:', error);
      throw error;
    }
  }
  
  // Mark job as complete from freelancer side
  static async markCompleteByFreelancer(jobId) {
    try {
      // Update job completion record
      await db.query(
        'UPDATE job_completions SET freelancer_confirmed = true, updated_at = NOW() WHERE job_id = $1',
        [jobId]
      );
      
      // Check if both parties have confirmed
      const completionResult = await db.query(
        'SELECT * FROM job_completions WHERE job_id = $1',
        [jobId]
      );
      
      if (completionResult.rows.length > 0 && completionResult.rows[0].client_confirmed) {
        // If both confirmed, mark job as complete
        await db.query(
          'UPDATE jobs SET status = $1, updated_at = NOW() WHERE id = $2',
          ['completed', jobId]
        );
        
        await db.query(
          'UPDATE job_completions SET completed_at = NOW() WHERE job_id = $1',
          [jobId]
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Error marking job as complete by freelancer:', error);
      throw error;
    }
  }
  
  // Get job completion status
  static async getCompletionStatus(jobId) {
    try {
      const result = await db.query(
        'SELECT * FROM job_completions WHERE job_id = $1',
        [jobId]
      );
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting job completion status:', error);
      throw error;
    }
  }
  
  // Count jobs by status
  static async countByStatus(status) {
    try {
      const result = await db.query(
        'SELECT COUNT(*) FROM jobs WHERE status = $1',
        [status]
      );
      
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error(`Error counting ${status} jobs:`, error);
      throw error;
    }
  }
  
  // Get monthly job statistics
  static async getMonthlyStats(months = 12) {
    try {
      const result = await db.query(`
        SELECT 
          DATE_TRUNC('month', created_at) AS month,
          COUNT(*) AS job_count
        FROM jobs
        WHERE created_at >= NOW() - INTERVAL '${months} months'
        GROUP BY month
        ORDER BY month
      `);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting monthly job stats:', error);
      throw error;
    }
  }
}

module.exports = Job;

=== END OF FILE: models/Job.js ===



=== FILE: models/JobApplication.js ===

/**
 * JobApplication model for application-related operations
 */
const db = require('../config/database');

class JobApplication {
  // Find an application by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM job_applications WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding application by ID:', error);
      throw error;
    }
  }
  
  // Find an application by job and freelancer IDs
  static async findByJobAndFreelancer(jobId, freelancerId) {
    try {
      const result = await db.query(
        'SELECT * FROM job_applications WHERE job_id = $1 AND freelancer_id = $2',
        [jobId, freelancerId]
      );
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding application by job and freelancer:', error);
      throw error;
    }
  }
  
  // Create a new application
  static async create(applicationData) {
    try {
      const { jobId, freelancerId, motivation } = applicationData;
      
      // Check if freelancer has already applied
      const existingApplication = await this.findByJobAndFreelancer(jobId, freelancerId);
      if (existingApplication) {
        throw new Error('You have already applied for this job');
      }
      
      const result = await db.query(
        'INSERT INTO job_applications (job_id, freelancer_id, motivation) VALUES ($1, $2, $3) RETURNING *',
        [jobId, freelancerId, motivation]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating application:', error);
      throw error;
    }
  }
  
  // Update an application
  static async update(id, applicationData) {
    try {
      const { motivation, status } = applicationData;
      
      // Start building the query
      let query = 'UPDATE job_applications SET ';
      const values = [];
      const queryParts = [];
      
      if (motivation) {
        queryParts.push(`motivation = $${values.length + 1}`);
        values.push(motivation);
      }
      
      if (status) {
        queryParts.push(`status = $${values.length + 1}`);
        values.push(status);
      }
      
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating application:', error);
      throw error;
    }
  }
  
  // Get application with job and freelancer details
  static async getWithDetails(id) {
    try {
      const result = await db.query(`
        SELECT ja.*, j.title AS job_title, j.budget, j.status AS job_status,
               f.first_name AS freelancer_first_name, f.last_name AS freelancer_last_name,
               c.first_name AS client_first_name, c.last_name AS client_last_name,
               c.company_name
        FROM job_applications ja
        INNER JOIN jobs j ON ja.job_id = j.id
        INNER JOIN freelancers f ON ja.freelancer_id = f.id
        INNER JOIN clients c ON j.client_id = c.id
        WHERE ja.id = $1
      `, [id]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting application with details:', error);
      throw error;
    }
  }
  
  // Get all applications for a job
  static async getByJobId(jobId) {
    try {
      const result = await db.query(`
        SELECT ja.*, f.first_name, f.last_name, f.skills, f.experience, f.cv_path
        FROM job_applications ja
        INNER JOIN freelancers f ON ja.freelancer_id = f.id
        WHERE ja.job_id = $1
        ORDER BY ja.created_at DESC
      `, [jobId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting applications by job ID:', error);
      throw error;
    }
  }
  
  // Get all applications by a freelancer
  static async getByFreelancerId(freelancerId) {
    try {
      const result = await db.query(`
        SELECT ja.*, j.title, j.description, j.budget, j.deadline, j.status AS job_status, 
               c.first_name AS client_first_name, c.last_name AS client_last_name, c.company_name
        FROM job_applications ja
        INNER JOIN jobs j ON ja.job_id = j.id
        INNER JOIN clients c ON j.client_id = c.id
        WHERE ja.freelancer_id = $1
        ORDER BY ja.created_at DESC
      `, [freelancerId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting applications by freelancer ID:', error);
      throw error;
    }
  }
  
  // Get hired application for a job
  static async getHiredApplication(jobId) {
    try {
      const result = await db.query(`
        SELECT ja.*, f.first_name, f.last_name, f.user_id AS freelancer_user_id
        FROM job_applications ja
        INNER JOIN freelancers f ON ja.freelancer_id = f.id
        WHERE ja.job_id = $1 AND ja.status = 'hired'
      `, [jobId]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting hired application:', error);
      throw error;
    }
  }
  
  // Count applications
  static async count(filters = {}) {
    try {
      let query = 'SELECT COUNT(*) FROM job_applications';
      const values = [];
      const conditions = [];
      
      if (filters.jobId) {
        conditions.push(`job_id = $${values.length + 1}`);
        values.push(filters.jobId);
      }
      
      if (filters.freelancerId) {
        conditions.push(`freelancer_id = $${values.length + 1}`);
        values.push(filters.freelancerId);
      }
      
      if (filters.status) {
        conditions.push(`status = $${values.length + 1}`);
        values.push(filters.status);
      }
      
      if (conditions.length > 0) {
        query += ' WHERE ' + conditions.join(' AND ');
      }
      
      const result = await db.query(query, values);
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error('Error counting applications:', error);
      throw error;
    }
  }
}

module.exports = JobApplication;

=== END OF FILE: models/JobApplication.js ===



=== FILE: models/Payment.js ===

/**
 * Payment model for payment-related operations
 */
const db = require('../config/database');

class Payment {
  // Find a payment by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM payments WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding payment by ID:', error);
      throw error;
    }
  }
  
  // Create a new payment
  static async create(paymentData) {
    try {
      const { 
        jobId, amount, transactionId, paymentType, 
        status, paidBy, paidTo
      } = paymentData;
      
      const result = await db.query(
        `INSERT INTO payments 
         (job_id, amount, transaction_id, payment_type, status, paid_by, paid_to) 
         VALUES ($1, $2, $3, $4, $5, $6, $7) 
         RETURNING *`,
        [jobId, amount, transactionId, paymentType, status || 'pending', paidBy, paidTo]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating payment:', error);
      throw error;
    }
  }
  
  // Update a payment
  static async update(id, paymentData) {
    try {
      const { status, transactionId, processedBy } = paymentData;
      
      // Start building the query
      let query = 'UPDATE payments SET ';
      const values = [];
      const queryParts = [];
      
      if (status) {
        queryParts.push(`status = $${values.length + 1}`);
        values.push(status);
      }
      
      if (transactionId) {
        queryParts.push(`transaction_id = $${values.length + 1}`);
        values.push(transactionId);
      }
      
      if (processedBy) {
        queryParts.push(`processed_by = $${values.length + 1}`);
        values.push(processedBy);
      }
      
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating payment:', error);
      throw error;
    }
  }
  
  // Get payment with related details
  static async getWithDetails(id) {
    try {
      const result = await db.query(`
        SELECT p.*, j.title AS job_title, 
               u_from.email AS paid_by_email,
               u_to.email AS paid_to_email,
               u_admin.email AS processed_by_email
        FROM payments p
        LEFT JOIN jobs j ON p.job_id = j.id
        LEFT JOIN users u_from ON p.paid_by = u_from.id
        LEFT JOIN users u_to ON p.paid_to = u_to.id
        LEFT JOIN users u_admin ON p.processed_by = u_admin.id
        WHERE p.id = $1
      `, [id]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting payment with details:', error);
      throw error;
    }
  }
  
  // Get all payments with optional filters
  static async getAll(options = {}) {
    try {
      let query = `
        SELECT p.*, j.title AS job_title, 
               u_from.email AS paid_by_email,
               u_to.email AS paid_to_email,
               u_admin.email AS processed_by_email
        FROM payments p
        LEFT JOIN jobs j ON p.job_id = j.id
        LEFT JOIN users u_from ON p.paid_by = u_from.id
        LEFT JOIN users u_to ON p.paid_to = u_to.id
        LEFT JOIN users u_admin ON p.processed_by = u_admin.id
      `;
      
      const values = [];
      const conditions = [];
      
      // Add filters
      if (options.jobId) {
        conditions.push(`p.job_id = $${values.length + 1}`);
        values.push(options.jobId);
      }
      
      if (options.paymentType) {
        conditions.push(`p.payment_type = $${values.length + 1}`);
        values.push(options.paymentType);
      }
      
      if (options.status) {
        conditions.push(`p.status = $${values.length + 1}`);
        values.push(options.status);
      }
      
      if (options.paidBy) {
        conditions.push(`p.paid_by = $${values.length + 1}`);
        values.push(options.paidBy);
      }
      
      if (options.paidTo) {
        conditions.push(`p.paid_to = $${values.length + 1}`);
        values.push(options.paidTo);
      }
      
      // Add WHERE clause if there are conditions
      if (conditions.length > 0) {
        query += ' WHERE ' + conditions.join(' AND ');
      }
      
      // Add ordering
      query += ' ORDER BY p.created_at DESC';
      
      const result = await db.query(query, values);
      return result.rows;
    } catch (error) {
      console.error('Error getting payments:', error);
      throw error;
    }
  }
  
  // Get pending freelancer payments
  static async getPendingFreelancerPayments() {
    return this.getAll({ 
      paymentType: 'freelancer_payment',
      status: 'pending'
    });
  }
  
  // Get user's payment history
  static async getUserPaymentHistory(userId) {
    try {
      const result = await db.query(`
        SELECT p.*, j.title AS job_title, 
               u_from.email AS paid_by_email,
               u_to.email AS paid_to_email
        FROM payments p
        LEFT JOIN jobs j ON p.job_id = j.id
        LEFT JOIN users u_from ON p.paid_by = u_from.id
        LEFT JOIN users u_to ON p.paid_to = u_to.id
        WHERE p.paid_by = $1 OR p.paid_to = $1
        ORDER BY p.created_at DESC
      `, [userId]);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting user payment history:', error);
      throw error;
    }
  }
  
  // Get payment statistics
  static async getStatistics() {
    try {
      const totalQuery = await db.query(`
        SELECT SUM(amount) AS total FROM payments WHERE status = $1
      `, ['completed']);
      
      const clientPaymentsQuery = await db.query(`
        SELECT SUM(amount) AS total FROM payments 
        WHERE payment_type = $1 AND status = $2
      `, ['job_posting', 'completed']);
      
      const freelancerPaymentsQuery = await db.query(`
        SELECT SUM(amount) AS total FROM payments 
        WHERE payment_type = $1 AND status = $2
      `, ['freelancer_payment', 'completed']);
      
      const pendingPaymentsQuery = await db.query(`
        SELECT SUM(amount) AS total FROM payments WHERE status = $1
      `, ['pending']);
      
      return {
        totalPayments: totalQuery.rows[0].total || 0,
        clientPayments: clientPaymentsQuery.rows[0].total || 0,
        freelancerPayments: freelancerPaymentsQuery.rows[0].total || 0,
        pendingPayments: pendingPaymentsQuery.rows[0].total || 0,
        platformFees: (clientPaymentsQuery.rows[0].total || 0) - (freelancerPaymentsQuery.rows[0].total || 0)
      };
    } catch (error) {
      console.error('Error getting payment statistics:', error);
      throw error;
    }
  }
}

module.exports = Payment;

=== END OF FILE: models/Payment.js ===



=== FILE: models/Report.js ===

/**
 * Report model for issue reporting
 */
const db = require('../config/database');

class Report {
  // Find a report by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM reports WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding report by ID:', error);
      throw error;
    }
  }
  
  // Create a new report
  static async create(reportData) {
    try {
      const { 
        reportedBy, reportedUser, jobId, issue 
      } = reportData;
      
      const result = await db.query(
        `INSERT INTO reports 
         (reported_by, reported_user, job_id, issue, status) 
         VALUES ($1, $2, $3, $4, $5) 
         RETURNING *`,
        [reportedBy, reportedUser, jobId, issue, 'pending']
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating report:', error);
      throw error;
    }
  }
  
  // Update a report
  static async update(id, reportData) {
    try {
      const { status, adminNotes } = reportData;
      
      // Start building the query
      let query = 'UPDATE reports SET ';
      const values = [];
      const queryParts = [];
      
      if (status) {
        queryParts.push(`status = $${values.length + 1}`);
        values.push(status);
      }
      
      if (adminNotes !== undefined) {
        queryParts.push(`admin_notes = $${values.length + 1}`);
        values.push(adminNotes);
      }
      
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating report:', error);
      throw error;
    }
  }
  
  // Get report with user and job details
  static async getWithDetails(id) {
    try {
      const result = await db.query(`
        SELECT r.*, 
               u_reporter.email AS reporter_email,
               u_reported.email AS reported_email,
               j.title AS job_title, j.id AS job_id
        FROM reports r
        LEFT JOIN users u_reporter ON r.reported_by = u_reporter.id
        LEFT JOIN users u_reported ON r.reported_user = u_reported.id
        LEFT JOIN jobs j ON r.job_id = j.id
        WHERE r.id = $1
      `, [id]);
      
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error getting report with details:', error);
      throw error;
    }
  }
  
  // Get all reports with optional filters
  static async getAll(options = {}) {
    try {
      let query = `
        SELECT r.*, 
               u_reporter.email AS reporter_email,
               u_reported.email AS reported_email,
               j.title AS job_title
        FROM reports r
        LEFT JOIN users u_reporter ON r.reported_by = u_reporter.id
        LEFT JOIN users u_reported ON r.reported_user = u_reported.id
        LEFT JOIN jobs j ON r.job_id = j.id
      `;
      
      const values = [];
      const conditions = [];
      
      // Add filters
      if (options.status) {
        conditions.push(`r.status = $${values.length + 1}`);
        values.push(options.status);
      }
      
      if (options.reportedBy) {
        conditions.push(`r.reported_by = $${values.length + 1}`);
        values.push(options.reportedBy);
      }
      
      if (options.reportedUser) {
        conditions.push(`r.reported_user = $${values.length + 1}`);
        values.push(options.reportedUser);
      }
      
      if (options.jobId) {
        conditions.push(`r.job_id = $${values.length + 1}`);
        values.push(options.jobId);
      }
      
      // Add WHERE clause if there are conditions
      if (conditions.length > 0) {
        query += ' WHERE ' + conditions.join(' AND ');
      }
      
      // Add ordering
      if (options.orderByStatus) {
        query += ` ORDER BY 
          CASE WHEN r.status = 'pending' THEN 0 ELSE 1 END,
          r.created_at DESC`;
      } else {
        query += ' ORDER BY r.created_at DESC';
      }
      
      const result = await db.query(query, values);
      return result.rows;
    } catch (error) {
      console.error('Error getting reports:', error);
      throw error;
    }
  }
  
  // Get pending reports
  static async getPendingReports() {
    return this.getAll({ 
      status: 'pending',
      orderByStatus: true
    });
  }
  
  // Count reports by status
  static async countByStatus(status) {
    try {
      const result = await db.query(
        'SELECT COUNT(*) FROM reports WHERE status = $1',
        [status]
      );
      
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error(`Error counting ${status} reports:`, error);
      throw error;
    }
  }
}

module.exports = Report;

=== END OF FILE: models/Report.js ===



=== FILE: models/User.js ===

/**
 * User model for authentication and role management
 */
const db = require('../config/database');
const bcrypt = require('bcryptjs');

class User {
  // Find a user by ID
  static async findById(id) {
    try {
      const result = await db.query('SELECT * FROM users WHERE id = $1', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding user by ID:', error);
      throw error;
    }
  }
  
  // Find a user by email
  static async findByEmail(email) {
    try {
      const result = await db.query('SELECT * FROM users WHERE email = $1', [email]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding user by email:', error);
      throw error;
    }
  }
  
  // Find a user by Google ID
  static async findByGoogleId(googleId) {
    try {
      const result = await db.query('SELECT * FROM users WHERE google_id = $1', [googleId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error finding user by Google ID:', error);
      throw error;
    }
  }
  
  // Create a new user
  static async create(userData) {
    try {
      const { email, password, role, googleId } = userData;
      
      // Check if email already exists
      const emailCheck = await this.findByEmail(email);
      if (emailCheck) {
        throw new Error('Email already registered');
      }
      
      // Hash password if provided
      let hashedPassword = null;
      if (password) {
        hashedPassword = await bcrypt.hash(password, 10);
      }
      
      // Insert user
      const result = await db.query(
        'INSERT INTO users (email, password, role, google_id) VALUES ($1, $2, $3, $4) RETURNING *',
        [email, hashedPassword, role, googleId || null]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error creating user:', error);
      throw error;
    }
  }
  
  // Update a user
  static async update(id, userData) {
    try {
      const { email, password, googleId } = userData;
      
      // Start building the query
      let query = 'UPDATE users SET ';
      const values = [];
      const queryParts = [];
      
      // Add email if provided
      if (email) {
        queryParts.push(`email = $${values.length + 1}`);
        values.push(email);
      }
      
      // Add password if provided (and hash it)
      if (password) {
        const hashedPassword = await bcrypt.hash(password, 10);
        queryParts.push(`password = $${values.length + 1}`);
        values.push(hashedPassword);
      }
      
      // Add Google ID if provided
      if (googleId) {
        queryParts.push(`google_id = $${values.length + 1}`);
        values.push(googleId);
      };
      // Add updated_at timestamp
      queryParts.push(`updated_at = $${values.length + 1}`);
      values.push(new Date());
      
      // Complete the query
      if (queryParts.length === 0) {
        return await this.findById(id); // Nothing to update
      }
      
      query += queryParts.join(', ');
      query += ` WHERE id = $${values.length + 1} RETURNING *`;
      values.push(id);
      
      // Execute the query
      const result = await db.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('Error updating user:', error);
      throw error;
    }
  }
  
  // Delete a user
  static async delete(id) {
    try {
      const result = await db.query('DELETE FROM users WHERE id = $1 RETURNING *', [id]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('Error deleting user:', error);
      throw error;
    }
  }
  
  // Compare password for login
  static async comparePassword(providedPassword, storedPassword) {
    try {
      return await bcrypt.compare(providedPassword, storedPassword);
    } catch (error) {
      console.error('Error comparing passwords:', error);
      throw error;
    }
  }
  
  // Update last login time
  static async updateLastLogin(id) {
    try {
      await db.query(
        'UPDATE users SET last_login = $1 WHERE id = $2',
        [new Date(), id]
      );
    } catch (error) {
      console.error('Error updating last login:', error);
      // Don't throw - this is not critical
    }
  }
  
  // Count users by role
  static async countByRole(role) {
    try {
      const result = await db.query('SELECT COUNT(*) FROM users WHERE role = $1', [role]);
      return parseInt(result.rows[0].count);
    } catch (error) {
      console.error(`Error counting ${role} users:`, error);
      throw error;
    }
  }
  
  // Get all users with profile information
  static async getAllWithProfiles() {
    try {
      // Complex query to get users with their role-specific profile data
      const result = await db.query(`
        SELECT u.id, u.email, u.role, u.created_at,
               CASE
                 WHEN u.role = 'client' THEN (SELECT c.first_name || ' ' || c.last_name FROM clients c WHERE c.user_id = u.id)
                 WHEN u.role = 'freelancer' THEN (SELECT f.first_name || ' ' || f.last_name FROM freelancers f WHERE f.user_id = u.id)
                 WHEN u.role = 'admin' THEN (SELECT a.first_name || ' ' || a.last_name FROM admins a WHERE a.user_id = u.id)
               END as full_name,
               CASE
                 WHEN u.role = 'freelancer' THEN (SELECT f.is_approved FROM freelancers f WHERE f.user_id = u.id)
                 ELSE true
               END as is_approved
        FROM users u
        ORDER BY u.created_at DESC
      `);
      
      return result.rows;
    } catch (error) {
      console.error('Error getting all users with profiles:', error);
      throw error;
    }
  }
  
  // Get user with profile data
  static async getWithProfile(id) {
    try {
      // First get the user
      const user = await this.findById(id);
      if (!user) return null;
      
      let profile = null;
      
      // Get role-specific profile data
      if (user.role === 'client') {
        const clientResult = await db.query('SELECT * FROM clients WHERE user_id = $1', [id]);
        if (clientResult.rows.length > 0) {
          profile = clientResult.rows[0];
        }
      } else if (user.role === 'freelancer') {
        const freelancerResult = await db.query('SELECT * FROM freelancers WHERE user_id = $1', [id]);
        if (freelancerResult.rows.length > 0) {
          profile = freelancerResult.rows[0];
        }
      } else if (user.role === 'admin') {
        const adminResult = await db.query('SELECT * FROM admins WHERE user_id = $1', [id]);
        if (adminResult.rows.length > 0) {
          profile = adminResult.rows[0];
        }
      }
      
      return { ...user, profile };
    } catch (error) {
      console.error('Error getting user with profile:', error);
      throw error;
    }
  }
}

module.exports = User;

=== END OF FILE: models/User.js ===



=== FILE: public/js/admin.js ===

/**
 * Admin dashboard functionality
 */
document.addEventListener('DOMContentLoaded', function() {
  // Check if we're on the admin dashboard
  const adminDashboard = document.getElementById('admin-dashboard');
  if (!adminDashboard) return;
  
  // Initialize charts if Chart.js is available
  if (typeof Chart !== 'undefined') {
    // User registration chart
    const userChartCanvas = document.getElementById('userRegistrationChart');
    if (userChartCanvas) {
      const userChartData = JSON.parse(userChartCanvas.dataset.chartData || '[]');
      
      new Chart(userChartCanvas, {
        type: 'line',
        data: {
          labels: userChartData.map(item => item.month),
          datasets: [
            {
              label: 'New Users',
              data: userChartData.map(item => item.count),
              borderColor: '#3498db',
              backgroundColor: 'rgba(52, 152, 219, 0.1)',
              borderWidth: 2,
              tension: 0.1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          }
        }
      });
    }
    
    // Job statistics chart
    const jobChartCanvas = document.getElementById('jobStatisticsChart');
    if (jobChartCanvas) {
      const jobChartData = JSON.parse(jobChartCanvas.dataset.chartData || '[]');
      
      new Chart(jobChartCanvas, {
        type: 'bar',
        data: {
          labels: jobChartData.map(item => item.month),
          datasets: [
            {
              label: 'Jobs Posted',
              data: jobChartData.map(item => item.count),
              backgroundColor: '#2ecc71',
              borderColor: '#27ae60',
              borderWidth: 1
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                precision: 0
              }
            }
          }
        }
      });
    }
    
    // Payment statistics chart
    const paymentChartCanvas = document.getElementById('paymentStatisticsChart');
    if (paymentChartCanvas) {
      const paymentChartData = JSON.parse(paymentChartCanvas.dataset.chartData || '[]');
      
      new Chart(paymentChartCanvas, {
        type: 'doughnut',
        data: {
          labels: ['Client Payments', 'Freelancer Payouts', 'Platform Fees'],
          datasets: [
            {
              data: [
                paymentChartData.clientPayments || 0,
                paymentChartData.freelancerPayments || 0,
                paymentChartData.platformFees || 0
              ],
              backgroundColor: [
                '#3498db',
                '#2ecc71',
                '#f39c12'
              ],
              borderColor: '#ffffff',
              borderWidth: 2
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom'
            }
          }
        }
      });
    }
  }
  
  // User search functionality
  const userSearchInput = document.getElementById('userSearch');
  if (userSearchInput) {
    userSearchInput.addEventListener('keyup', function() {
      const searchValue = this.value.toLowerCase();
      const userRows = document.querySelectorAll('#usersTable tbody tr');
      
      userRows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchValue) ? '' : 'none';
      });
    });
  }
  
  // Admin quick filters
  const quickFilterButtons = document.querySelectorAll('.quick-filter');
  if (quickFilterButtons.length > 0) {
    quickFilterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const filterValue = this.dataset.filter;
        const tableId = this.dataset.tableTarget;
        const table = document.getElementById(tableId);
        
        if (!table) return;
        
        const rows = table.querySelectorAll('tbody tr');
        
        if (filterValue === 'all') {
          rows.forEach(row => row.style.display = '');
        } else {
          rows.forEach(row => {
            const status = row.dataset.status;
            row.style.display = status === filterValue ? '' : 'none';
          });
        }
        
        // Update active filter
        quickFilterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
      });
    });
  }
  
  // Confirmation dialogs for critical actions
  const confirmActionForms = document.querySelectorAll('form[data-confirm]');
  if (confirmActionForms.length > 0) {
    confirmActionForms.forEach(form => {
      form.addEventListener('submit', function(e) {
        const confirmMessage = this.dataset.confirm;
        if (!confirm(confirmMessage)) {
          e.preventDefault();
          return false;
        }
      });
    });
  }
  
  // Date range filters
  const dateRangeForm = document.getElementById('dateRangeForm');
  if (dateRangeForm) {
    dateRangeForm.addEventListener('submit', function(e) {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      if (startDate && endDate) {
        // Form will submit normally with date parameters
      } else {
        e.preventDefault();
        alert('Please select both start and end dates');
      }
    });
  }
});

=== END OF FILE: public/js/admin.js ===



=== FILE: public/js/client.js ===



=== END OF FILE: public/js/client.js ===



=== FILE: public/js/freelancer.js ===



=== END OF FILE: public/js/freelancer.js ===



=== FILE: public/js/payment.js ===

/**
 * Client-side payment processing
 */
document.addEventListener('DOMContentLoaded', function() {
  // Check if we're on a payment page
  const paymentForm = document.getElementById('payment-form');
  if (!paymentForm) return;
  
  const jobId = window.location.pathname.split('/').pop();
  const payButton = document.getElementById('pay-button');
  const paymentProcessing = document.getElementById('payment-processing');
  const paymentSuccess = document.getElementById('payment-success');
  const paymentError = document.getElementById('payment-error');
  
  // Initialize Yoco SDK
  const yoco = new window.YocoSDK({
    publicKey: document.getElementById('yoco-public-key').value
  });
  
  // Create the card frame
  const cardFrame = yoco.inline({
    element: '#card-frame',
    layout: 'standard'
  });
  
  // Handle payment submission
  payButton.addEventListener('click', function(event) {
    event.preventDefault();
    
    // Validate form fields if applicable
    
    // Disable button and show processing state
    payButton.disabled = true;
    paymentProcessing.classList.remove('d-none');
    paymentError.textContent = '';
    
    // Process payment with Yoco
    yoco.tokenize({
      name: document.getElementById('cardholder-name').value || 'Cardholder',
      callback: async function(result) {
        if (result.error) {
          payButton.disabled = false;
          paymentProcessing.classList.add('d-none');
          paymentError.textContent = result.error.message;
          return;
        }
        
        // Send token to server
        try {
          const response = await fetch(`/payments/job/${jobId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.getElementById('csrf-token').value
            },
            body: JSON.stringify({
              token: result.id
            })
          });
          
          const data = await response.json();
          
          if (data.success) {
            paymentForm.classList.add('d-none');
            paymentSuccess.classList.remove('d-none');
            
            // Redirect after 3 seconds
            setTimeout(() => {
              window.location.href = '/client/jobs';
            }, 3000);
          } else {
            payButton.disabled = false;
            paymentProcessing.classList.add('d-none');
            paymentError.textContent = data.message || 'Payment failed. Please try again.';
          }
        } catch (error) {
          payButton.disabled = false;
          paymentProcessing.classList.add('d-none');
          paymentError.textContent = 'An error occurred. Please try again.';
        }
      }
    });
  });
});

=== END OF FILE: public/js/payment.js ===



=== FILE: public/js/profile.js ===

/**
 * Client-side profile management
 */
document.addEventListener('DOMContentLoaded', function() {
  // Handle skills input formatting for tags-like UI
  const skillsInput = document.getElementById('skills');
  if (skillsInput) {
    const skillsContainer = document.createElement('div');
    skillsContainer.className = 'skills-container';
    skillsInput.parentNode.insertBefore(skillsContainer, skillsInput.nextSibling);
    
    const renderSkills = () => {
      // Clear container
      skillsContainer.innerHTML = '';
      
      // Get skills array
      const skills = skillsInput.value.split(',')
        .map(skill => skill.trim())
        .filter(skill => skill !== '');
      
      // Create skill tags
      skills.forEach(skill => {
        const skillTag = document.createElement('span');
        skillTag.className = 'skill-tag badge badge-primary mr-2 mb-2';
        skillTag.innerHTML = `${skill} <button type="button" class="close-btn">&times;</button>`;
        
        skillTag.querySelector('.close-btn').addEventListener('click', function() {
          const updatedSkills = skillsInput.value.split(',')
            .map(s => s.trim())
            .filter(s => s !== '' && s !== skill)
            .join(', ');
            
          skillsInput.value = updatedSkills;
          renderSkills();
        });
        
        skillsContainer.appendChild(skillTag);
      });
      
      // Add input for new skill
      const newSkillInput = document.createElement('input');
      newSkillInput.type = 'text';
      newSkillInput.className = 'new-skill-input';
      newSkillInput.placeholder = 'Add skill...';
      
      newSkillInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ',') {
          e.preventDefault();
          
          const newSkill = this.value.trim();
          if (newSkill) {
            const currentSkills = skillsInput.value ? skillsInput.value.split(',').map(s => s.trim()) : [];
            
            // Avoid duplicates
            if (!currentSkills.includes(newSkill)) {
              currentSkills.push(newSkill);
              skillsInput.value = currentSkills.join(', ');
              renderSkills();
            }
          }
          
          this.value = '';
        }
      });
      
      skillsContainer.appendChild(newSkillInput);
    };
    
    // Initial render
    renderSkills();
    
    // Hide the original input but keep it for form submission
    skillsInput.style.display = 'none';
  }
  
  // Preview uploaded images
  const fileInputs = document.querySelectorAll('input[type="file"]');
  fileInputs.forEach(input => {
    input.addEventListener('change', function() {
      const fileId = this.id;
      const previewId = `${fileId}-preview`;
      let previewContainer = document.getElementById(previewId);
      
      // Create preview container if it doesn't exist
      if (!previewContainer) {
        previewContainer = document.createElement('div');
        previewContainer.id = previewId;
        previewContainer.className = 'file-preview mt-2';
        this.parentNode.appendChild(previewContainer);
      }
      
      // Clear previous preview
      previewContainer.innerHTML = '';
      
      if (this.files && this.files[0]) {
        const file = this.files[0];
        
        // For images
        if (file.type.startsWith('image/')) {
          const img = document.createElement('img');
          img.className = 'preview-image';
          img.style.maxWidth = '200px';
          img.style.maxHeight = '200px';
          
          const reader = new FileReader();
          reader.onload = function(e) {
            img.src = e.target.result;
          };
          reader.readAsDataURL(file);
          
          previewContainer.appendChild(img);
        } else {
          // For documents
          const docPreview = document.createElement('div');
          docPreview.className = 'document-preview p-2 border rounded';
          docPreview.innerHTML = `<i class="document-icon"></i> ${file.name}`;
          
          previewContainer.appendChild(docPreview);
        }
      }
    });
  });
  
  // Password strength meter
  const passwordInput = document.getElementById('newPassword');
  if (passwordInput) {
    const strengthMeter = document.createElement('div');
    strengthMeter.className = 'password-strength mt-2';
    passwordInput.parentNode.appendChild(strengthMeter);
    
    passwordInput.addEventListener('input', function() {
      const password = this.value;
      let strength = 0;
      let feedback = '';
      
      // Length check
      if (password.length >= 8) {
        strength += 1;
      }
      
      // Uppercase check
      if (/[A-Z]/.test(password)) {
        strength += 1;
      }
      
      // Lowercase check
      if (/[a-z]/.test(password)) {
        strength += 1;
      }
      
      // Number check
      if (/\d/.test(password)) {
        strength += 1;
      }
      
      // Special character check
      if (/[^A-Za-z0-9]/.test(password)) {
        strength += 1;
      }
      
      // Update strength meter
      strengthMeter.className = 'password-strength mt-2';
      
      if (password.length === 0) {
        strengthMeter.innerHTML = '';
      } else if (strength < 2) {
        strengthMeter.innerHTML = '<div class="progress"><div class="progress-bar bg-danger" style="width: 20%"></div></div><small class="text-danger">Weak password</small>';
      } else if (strength < 4) {
        strengthMeter.innerHTML = '<div class="progress"><div class="progress-bar bg-warning" style="width: 60%"></div></div><small class="text-warning">Moderate password</small>';
      } else {
        strengthMeter.innerHTML = '<div class="progress"><div class="progress-bar bg-success" style="width: 100%"></div></div><small class="text-success">Strong password</small>';
      }
    });
  }
});

=== END OF FILE: public/js/profile.js ===



=== FILE: routes/adminRoutes.js ===

const express = require('express');
const router = express.Router();
const adminController = require('../controllers/adminController');
const jobController = require('../controllers/jobController');
const paymentController = require('../controllers/paymentController');
const { isAuthenticated, isAdmin } = require('../middleware/auth');

// Apply middleware to all routes
router.use(isAuthenticated, isAdmin);

// Dashboard
router.get('/dashboard', adminController.getDashboard);

// User management
router.get('/users', adminController.getUsers);
router.get('/users/:id', adminController.getUserDetails);
router.delete('/users/:id', adminController.deleteUser);
router.post('/users/add-admin', adminController.addAdminUser);

// Freelancer approvals
router.get('/approvals', adminController.getPendingApprovals);
router.post('/freelancers/:id/approve', adminController.approveFreelancer);
router.post('/freelancers/:id/reject', adminController.rejectFreelancer);

// Reports
router.get('/reports', adminController.getReports);
router.get('/reports/:id', adminController.getReportDetails);
router.post('/reports/:id/process', adminController.processReport);

// Jobs
router.get('/jobs', jobController.adminGetAllJobs);
router.get('/jobs/:id', jobController.adminGetJobDetails);
router.delete('/jobs/:id', jobController.adminDeleteJob);

// Payments
router.get('/payments', paymentController.adminGetAllPayments);
router.post('/payments/:paymentId/process', paymentController.adminProcessFreelancerPayment);

// System stats
router.get('/stats', adminController.getSystemStats);

module.exports = router;

=== END OF FILE: routes/adminRoutes.js ===



=== FILE: routes/authRoutes.js ===

const express = require('express');
const router = express.Router();
const passport = require('passport');
const authController = require('../controllers/authController');
const { upload } = require('../middleware/fileUpload');

// Login page
router.get('/login', authController.getLogin);
router.post('/login', authController.postLogin);

// Register pages
router.get('/register', authController.getRegister);
router.get('/register/client', authController.getRegisterClient);
router.get('/register/freelancer', authController.getRegisterFreelancer);

// Process registrations
router.post('/register/client', upload.single('cv'), authController.postRegisterClient);
router.post('/register/freelancer', upload.fields([
  { name: 'cv', maxCount: 1 },
  { name: 'clearance', maxCount: 1 }
]), authController.postRegisterFreelancer);

// Google OAuth routes
router.get('/google', passport.authenticate('google', { scope: ['profile', 'email'] }));
router.get('/google/callback', 
  passport.authenticate('google', { failureRedirect: '/auth/login' }),
  authController.googleCallback
);

// Role selection for Google auth users
router.get('/select-role', authController.getSelectRole);
router.post('/select-role', authController.postSelectRole);

// Complete profile routes for OAuth users
router.get('/complete-profile/client', authController.getCompleteClientProfile);
router.post('/complete-profile/client', upload.single('cv'), authController.postCompleteClientProfile);

router.get('/complete-profile/freelancer', authController.getCompleteFreelancerProfile);
router.post('/complete-profile/freelancer', upload.fields([
  { name: 'cv', maxCount: 1 },
  { name: 'clearance', maxCount: 1 }
]), authController.postCompleteFreelancerProfile);

// Logout
router.get('/logout', authController.logout);

module.exports = router;

=== END OF FILE: routes/authRoutes.js ===



=== FILE: routes/clientRoutes.js ===

const express = require('express');
const router = express.Router();
const clientController = require('../controllers/clientController');
const jobController = require('../controllers/jobController');
const { isAuthenticated, isClient } = require('../middleware/auth');
const { upload } = require('../middleware/fileUpload');

// Apply middleware to all routes
router.use(isAuthenticated, isClient);

// Dashboard
router.get('/dashboard', clientController.getDashboard);

// Jobs management
router.get('/jobs', clientController.getJobs);
router.get('/jobs/:id', clientController.getJobDetails);
router.get('/jobs/:id/applications', jobController.getJobApplications);
router.post('/jobs/:jobId/applications/:applicationId/hire', jobController.postHireFreelancer);
router.post('/jobs/:id/complete', jobController.postCompleteJob);

// Report issue
router.post('/jobs/:id/report', clientController.reportJobIssue);

// Job creation/editing routes are in jobRoutes.js

module.exports = router;

=== END OF FILE: routes/clientRoutes.js ===



=== FILE: routes/freelancerRoutes.js ===

const express = require('express');
const router = express.Router();
const freelancerController = require('../controllers/freelancerController');
const jobController = require('../controllers/jobController');
const { isAuthenticated, isFreelancer, isApprovedFreelancer } = require('../middleware/auth');
const { upload } = require('../middleware/fileUpload');

// Apply authentication middleware to all routes
router.use(isAuthenticated, isFreelancer);

// Pending approval page (accessible even without approval)
router.get('/pending', freelancerController.getPendingPage);

// Apply approved freelancer middleware to all other routes
router.use(isApprovedFreelancer);

// Dashboard
router.get('/dashboard', freelancerController.getDashboard);

// Applications
router.get('/applications', freelancerController.getApplications);

// Active jobs
router.get('/jobs', freelancerController.getActiveJobs);
router.get('/jobs/:id', freelancerController.getJobDetails);
router.post('/jobs/:id/complete', jobController.postFreelancerCompleteJob);

// Report issue
router.post('/jobs/:id/report', freelancerController.reportJobIssue);

module.exports = router;

=== END OF FILE: routes/freelancerRoutes.js ===



=== FILE: routes/index.js ===

/**
 * Main router that combines all route modules
 */
const express = require('express');
const router = express.Router();

// Import route modules
const authRoutes = require('./authRoutes');
const clientRoutes = require('./clientRoutes');
const freelancerRoutes = require('./freelancerRoutes');
const adminRoutes = require('./adminRoutes');
const jobRoutes = require('./jobRoutes');
const paymentRoutes = require('./paymentRoutes');
const profileRoutes = require('./profileRoutes');
const { notFound } = require('../utils/errorHandler');

// Set up routes
router.use('/auth', authRoutes);
router.use('/client', clientRoutes);
router.use('/freelancer', freelancerRoutes);
router.use('/admin', adminRoutes);
router.use('/jobs', jobRoutes);
router.use('/payments', paymentRoutes);
router.use('/profile', profileRoutes);

// Home route
router.get('/', (req, res) => {
  res.render('index', { 
    title: 'lance - Connect with Clients and Freelancers',
    user: req.user
  });
});

// Handle 404 routes
router.use(notFound);

module.exports = router;

=== END OF FILE: routes/index.js ===



=== FILE: routes/jobRoutes.js ===

const express = require('express');
const router = express.Router();
const jobController = require('../controllers/jobController');
const { isAuthenticated, isClient, isFreelancer, isApprovedFreelancer } = require('../middleware/auth');

// Public job routes (no auth needed)
router.get('/', (req, res) => {
  res.redirect('/jobs/browse');
});

router.get('/browse', jobController.getAllJobs);
router.get('/:id', jobController.getJobDetails);

// Client routes
router.get('/jobs/create', isAuthenticated, isClient, jobController.getCreateJob);
router.post('/jobs/create', isAuthenticated, isClient, jobController.postCreateJob);
router.get('/:id/edit', isAuthenticated, isClient, jobController.getEditJob);
router.put('/:id', isAuthenticated, isClient, jobController.putEditJob);
router.delete('/:id', isAuthenticated, isClient, jobController.deleteJob);

// Freelancer routes
router.get('/:id/apply', isAuthenticated, isFreelancer, isApprovedFreelancer, jobController.getApplyJob);
router.post('/:id/apply', isAuthenticated, isFreelancer, isApprovedFreelancer, jobController.postApplyJob);

// Invoice generation
router.get('/:id/invoice', isAuthenticated, jobController.getJobInvoice);

module.exports = router;

=== END OF FILE: routes/jobRoutes.js ===



=== FILE: routes/paymentRoutes.js ===

const express = require('express');
const router = express.Router();
const paymentController = require('../controllers/paymentController');
const { isAuthenticated, isClient, isAdmin } = require('../middleware/auth');

// Client payment for job
router.get('/job/:id', isAuthenticated, isClient, paymentController.getJobPaymentPage);
router.post('/job/:id', isAuthenticated, isClient, paymentController.postJobPayment);

module.exports = router;

=== END OF FILE: routes/paymentRoutes.js ===



=== FILE: routes/profileRoutes.js ===

const express = require('express');
const router = express.Router();
const profileController = require('../controllers/profileController');
const { isAuthenticated } = require('../middleware/auth');
const { upload } = require('../middleware/fileUpload');

// Apply middleware to all routes
router.use(isAuthenticated);

// View profile
router.get('/', profileController.getProfile);

// Update profiles based on role
router.put('/client', upload.single('cv'), profileController.updateClientProfile);
router.put('/freelancer', upload.fields([
  { name: 'cv', maxCount: 1 },
  { name: 'clearance', maxCount: 1 }
]), profileController.updateFreelancerProfile);
router.put('/admin', profileController.updateAdminProfile);

// Change password
router.post('/change-password', profileController.changePassword);

module.exports = router;

=== END OF FILE: routes/profileRoutes.js ===



=== FILE: services/emailService.js ===

/**
 * Email Service
 * Note: This uses a simplified approach for email sending
 * In production, you would integrate with a proper email service like SendGrid, Mailgun, etc.
 */
const nodemailer = require('nodemailer');
require('dotenv').config();

// Create test account for development if no SMTP settings provided
let transporter;

const initTransporter = async () => {
  // If there are no SMTP settings, create a test account
  if (!process.env.SMTP_HOST || !process.env.SMTP_USER) {
    // Generate test SMTP service account from ethereal.email
    const testAccount = await nodemailer.createTestAccount();
    
    // Create reusable transporter object using ethereal.email test account
    transporter = nodemailer.createTransport({
      host: 'smtp.ethereal.email',
      port: 587,
      secure: false, // true for 465, false for other ports
      auth: {
        user: testAccount.user,
        pass: testAccount.pass
      }
    });
    
    console.log('Using test email account:', testAccount.user);
  } else {
    // Create transporter with provided SMTP settings
    transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT || 587,
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    });
  }
};

// Initialize transporter when server starts
initTransporter().catch(console.error);

// Common email sending function
const sendEmail = async (options) => {
  try {
    // Make sure transporter is initialized
    if (!transporter) {
      await initTransporter();
    }
    
    // Email options
    const mailOptions = {
      from: `"lance" <${process.env.EMAIL_FROM || 'noreply@lance.com'}>`,
      to: options.email,
      subject: options.subject,
      text: options.message,
      html: options.html
    };
    
    // Send email
    const info = await transporter.sendMail(mailOptions);
    
    // Log URL for test accounts
    if (process.env.NODE_ENV === 'development' && !process.env.SMTP_HOST) {
      console.log('Email preview URL:', nodemailer.getTestMessageUrl(info));
    }
    
    return info;
  } catch (error) {
    console.error('Email sending error:', error);
    throw error;
  }
};

// Welcome email for new users
exports.sendWelcomeEmail = async (user) => {
  const subject = 'Welcome to lance!';
  const message = `
    Hi ${user.firstName},
    
    Welcome to lance! We're excited to have you on board.
    
    ${user.role === 'freelancer' 
      ? 'Your account is currently under review. We\'ll notify you once it\'s approved.' 
      : 'You can now start using our platform to post jobs and find talented freelancers.'}
    
    If you have any questions, feel free to contact our support team.
    
    Best regards,
    The lance Team
  `;
  
  // HTML version of the email
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #3498db; padding: 20px; text-align: center; color: white;">
        <h1>Welcome to lance!</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hi ${user.firstName},</p>
        <p>Welcome to lance! We're excited to have you on board.</p>
        <p>${user.role === 'freelancer' 
            ? 'Your account is currently under review. We\'ll notify you once it\'s approved.' 
            : 'You can now start using our platform to post jobs and find talented freelancers.'}</p>
        <p>If you have any questions, feel free to contact our support team.</p>
        <p>Best regards,<br>The lance Team</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: user.email,
    subject,
    message,
    html
  });
};

// Freelancer approval notification
exports.sendFreelancerApprovalEmail = async (user) => {
  const subject = 'Your lance Account has been Approved!';
  const message = `
    Hi ${user.firstName},
    
    Great news! Your lance account has been approved.
    
    You can now log in to your account and start applying for jobs.
    
    Best regards,
    The lance Team
  `;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #3498db; padding: 20px; text-align: center; color: white;">
        <h1>Account Approved!</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hi ${user.firstName},</p>
        <p>Great news! Your lance account has been approved.</p>
        <p>You can now <a href="${process.env.APP_URL || 'http://localhost:3000'}/auth/login" style="color: #3498db;">log in to your account</a> and start applying for jobs.</p>
        <p>Best regards,<br>The lance Team</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: user.email,
    subject,
    message,
    html
  });
};

// Job application notification to client
exports.sendJobApplicationNotificationToClient = async (application, job, client, freelancer) => {
  const subject = `New Application for ${job.title}`;
  const message = `
    Hi ${client.firstName},
    
    You have received a new application for your job "${job.title}".
    
    Freelancer: ${freelancer.firstName} ${freelancer.lastName}
    
    Log in to view the application and the freelancer's details.
    
    Best regards,
    The lance Team
  `;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #3498db; padding: 20px; text-align: center; color: white;">
        <h1>New Job Application</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hi ${client.firstName},</p>
        <p>You have received a new application for your job "<strong>${job.title}</strong>".</p>
        <p><strong>Freelancer:</strong> ${freelancer.firstName} ${freelancer.lastName}</p>
        <p><a href="${process.env.APP_URL || 'http://localhost:3000'}/client/jobs/${job.id}/applications" style="display: inline-block; background-color: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">View Application</a></p>
        <p>Best regards,<br>The lance Team</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: client.email,
    subject,
    message,
    html
  });
};

// Hiring notification to freelancer
exports.sendHiringNotificationToFreelancer = async (job, freelancer, client) => {
  const subject = `Congratulations! You've been hired for "${job.title}"`;
  const message = `
    Hi ${freelancer.firstName},
    
    Congratulations! You have been hired for the job "${job.title}" by ${client.firstName} ${client.lastName}.
    
    Please log in to view the job details and get started.
    
    Best regards,
    The lance Team
  `;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #2ecc71; padding: 20px; text-align: center; color: white;">
        <h1>You've Been Hired!</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hi ${freelancer.firstName},</p>
        <p>Congratulations! You have been hired for the job "<strong>${job.title}</strong>" by ${client.firstName} ${client.lastName}.</p>
        <p><a href="${process.env.APP_URL || 'http://localhost:3000'}/freelancer/jobs/${job.id}" style="display: inline-block; background-color: #2ecc71; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">View Job Details</a></p>
        <p>Best regards,<br>The lance Team</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: freelancer.email,
    subject,
    message,
    html
  });
};

// Job completion notification
exports.sendJobCompletionNotification = async (job, recipient, recipientRole) => {
  const isClient = recipientRole === 'client';
  
  const subject = `Job "${job.title}" has been completed`;
  const message = `
    Hi ${recipient.firstName},
    
    The job "${job.title}" has been marked as complete by ${isClient ? 'the freelancer' : 'the client'}.
    
    Please log in to confirm completion and ${isClient ? 'finalize payment.' : 'receive your payment.'}
    
    Best regards,
    The lance Team
  `;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #3498db; padding: 20px; text-align: center; color: white;">
        <h1>Job Completion Notice</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hi ${recipient.firstName},</p>
        <p>The job "<strong>${job.title}</strong>" has been marked as complete by ${isClient ? 'the freelancer' : 'the client'}.</p>
        <p>Please log in to confirm completion and ${isClient ? 'finalize payment.' : 'receive your payment.'}</p>
        <p><a href="${process.env.APP_URL || 'http://localhost:3000'}/${recipientRole}/jobs/${job.id}" style="display: inline-block; background-color: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">View Job</a></p>
        <p>Best regards,<br>The lance Team</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: recipient.email,
    subject,
    message,
    html
  });
};

// Payment notification to freelancer
exports.sendPaymentNotificationToFreelancer = async (payment, job, freelancer) => {
  const subject = `Payment Received for Job "${job.title}"`;
  const message = `
    Hi ${freelancer.firstName},
    
    Good news! You have received a payment of $${parseFloat(payment.amount).toFixed(2)} for the job "${job.title}".
    
    Thank you for your work on the lance platform.
    
    Best regards,
    The lance Team
  `;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #2ecc71; padding: 20px; text-align: center; color: white;">
        <h1>Payment Received</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hi ${freelancer.firstName},</p>
        <p>Good news! You have received a payment of <strong>$${parseFloat(payment.amount).toFixed(2)}</strong> for the job "${job.title}".</p>
        <p>Thank you for your work on the lance platform.</p>
        <p><a href="${process.env.APP_URL || 'http://localhost:3000'}/freelancer/dashboard" style="display: inline-block; background-color: #2ecc71; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">View Dashboard</a></p>
        <p>Best regards,<br>The lance Team</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: freelancer.email,
    subject,
    message,
    html
  });
};

// Report notification to admin
exports.sendReportNotificationToAdmin = async (report, adminEmail) => {
  const subject = `New Issue Report on lance`;
  const message = `
    Hello Admin,
    
    A new issue has been reported on the lance platform.
    
    Report ID: ${report.id}
    Reported by: ${report.reporter_email || 'Anonymous'}
    Issue: ${report.issue.substring(0, 100)}${report.issue.length > 100 ? '...' : ''}
    
    Please log in to the admin panel to review this report.
    
    Regards,
    lance System
  `;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #e74c3c; padding: 20px; text-align: center; color: white;">
        <h1>New Issue Report</h1>
      </div>
      <div style="padding: 20px; border: 1px solid #eee;">
        <p>Hello Admin,</p>
        <p>A new issue has been reported on the lance platform.</p>
        <div style="background-color: #f8f9fa; padding: 15px; margin: 15px 0; border-left: 4px solid #e74c3c;">
          <p><strong>Report ID:</strong> ${report.id}</p>
          <p><strong>Reported by:</strong> ${report.reporter_email || 'Anonymous'}</p>
          <p><strong>Issue:</strong> ${report.issue.substring(0, 100)}${report.issue.length > 100 ? '...' : ''}</p>
        </div>
        <p><a href="${process.env.APP_URL || 'http://localhost:3000'}/admin/reports/${report.id}" style="display: inline-block; background-color: #e74c3c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">Review Report</a></p>
        <p>Regards,<br>lance System</p>
      </div>
      <div style="background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666;">
        <p>&copy; ${new Date().getFullYear()} lance. All rights reserved.</p>
      </div>
    </div>
  `;
  
  return sendEmail({
    email: adminEmail,
    subject,
    message,
    html
  });
};

module.exports = {
  sendEmail,
  ...exports
};

=== END OF FILE: services/emailService.js ===



=== FILE: services/invoiceService.js ===

/**
 * Invoice Service for generating and managing invoices
 */
const { generateCsv, saveCsvToFile } = require('../utils/csvGenerator');
const db = require('../config/database');

// Generate invoice for a job
exports.generateJobInvoice = async (jobId, userId, userRole) => {
  try {
    // Get job details with client information
    let jobResult;
    
    if (userRole === 'admin') {
      jobResult = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.phone AS client_phone, c.address AS client_address,
               u.email AS client_email
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN users u ON c.user_id = u.id
        WHERE j.id = $1
      `, [jobId]);
    } else if (userRole === 'client') {
      jobResult = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.phone AS client_phone, c.address AS client_address,
               u.email AS client_email
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN users u ON c.user_id = u.id
        WHERE j.id = $1 AND c.user_id = $2
      `, [jobId, userId]);
    } else { // freelancer
      jobResult = await db.query(`
        SELECT j.*, c.first_name AS client_first_name, c.last_name AS client_last_name, 
               c.company_name, c.phone AS client_phone, c.address AS client_address,
               u.email AS client_email
        FROM jobs j
        INNER JOIN clients c ON j.client_id = c.id
        INNER JOIN users u ON c.user_id = u.id
        INNER JOIN job_applications ja ON j.id = ja.job_id
        INNER JOIN freelancers f ON ja.freelancer_id = f.id
        WHERE j.id = $1 AND f.user_id = $2 AND ja.status = 'hired'
      `, [jobId, userId]);
    }
    
    if (jobResult.rows.length === 0) {
      throw new Error('Job not found or you are not authorized to access this invoice');
    }
    
    const job = jobResult.rows[0];
    
    // Get hired freelancer info
    const freelancerResult = await db.query(`
      SELECT f.first_name, f.last_name, f.phone, f.address, u.email
      FROM freelancers f
      INNER JOIN users u ON f.user_id = u.id
      INNER JOIN job_applications ja ON f.id = ja.freelancer_id
      WHERE ja.job_id = $1 AND ja.status = 'hired'
    `, [jobId]);
    
    let freelancer = null;
    if (freelancerResult.rows.length > 0) {
      freelancer = freelancerResult.rows[0];
    }
    
    // Record invoice in database
    const invoiceNumber = `INV-${job.id}-${Date.now().toString().slice(-6)}`;
    
    await db.query(`
      INSERT INTO invoices (invoice_number, job_id, amount, client_id, freelancer_id, generated_by, status)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
    `, [
      invoiceNumber,
      job.id,
      job.budget,
      job.client_id,
      freelancer ? freelancerResult.rows[0].id : null,
      userId,
      'generated'
    ]);
    
    // Generate CSV content
    const csvData = generateCsv(job, freelancer);
    
    return {
      invoiceNumber,
      csvData,
      job,
      freelancer
    };
  } catch (error) {
    console.error('Error generating invoice:', error);
    throw error;
  }
};

// Get invoice by number
exports.getInvoiceByNumber = async (invoiceNumber) => {
  try {
    const result = await db.query(`
      SELECT i.*, j.title AS job_title, j.budget,
             c.first_name AS client_first_name, c.last_name AS client_last_name,
             f.first_name AS freelancer_first_name, f.last_name AS freelancer_last_name
      FROM invoices i
      INNER JOIN jobs j ON i.job_id = j.id
      INNER JOIN clients c ON i.client_id = c.id
      LEFT JOIN freelancers f ON i.freelancer_id = f.id
      WHERE i.invoice_number = $1
    `, [invoiceNumber]);
    
    if (result.rows.length === 0) {
      throw new Error('Invoice not found');
    }
    
    return result.rows[0];
  } catch (error) {
    console.error('Error fetching invoice:', error);
    throw error;
  }
};

// Get all invoices for a user
exports.getUserInvoices = async (userId, userRole) => {
  try {
    let query;
    
    if (userRole === 'admin') {
      query = `
        SELECT i.*, j.title AS job_title, j.budget,
               c.first_name AS client_first_name, c.last_name AS client_last_name,
               f.first_name AS freelancer_first_name, f.last_name AS freelancer_last_name
        FROM invoices i
        INNER JOIN jobs j ON i.job_id = j.id
        INNER JOIN clients c ON i.client_id = c.id
        LEFT JOIN freelancers f ON i.freelancer_id = f.id
        ORDER BY i.created_at DESC
      `;
      
      const result = await db.query(query);
      return result.rows;
    } else if (userRole === 'client') {
      query = `
        SELECT i.*, j.title AS job_title, j.budget,
               c.first_name AS client_first_name, c.last_name AS client_last_name,
               f.first_name AS freelancer_first_name, f.last_name AS freelancer_last_name
        FROM invoices i
        INNER JOIN jobs j ON i.job_id = j.id
        INNER JOIN clients c ON i.client_id = c.id
        LEFT JOIN freelancers f ON i.freelancer_id = f.id
        WHERE c.user_id = $1
        ORDER BY i.created_at DESC
      `;
      
      const result = await db.query(query, [userId]);
      return result.rows;
    } else { // freelancer
      query = `
        SELECT i.*, j.title AS job_title, j.budget,
               c.first_name AS client_first_name, c.last_name AS client_last_name,
               f.first_name AS freelancer_first_name, f.last_name AS freelancer_last_name
        FROM invoices i
        INNER JOIN jobs j ON i.job_id = j.id
        INNER JOIN clients c ON i.client_id = c.id
        INNER JOIN freelancers f ON i.freelancer_id = f.id
        WHERE f.user_id = $1
        ORDER BY i.created_at DESC
      `;
      
      const result = await db.query(query, [userId]);
      return result.rows;
    }
  } catch (error) {
    console.error('Error fetching user invoices:', error);
    throw error;
  }
};

=== END OF FILE: services/invoiceService.js ===



=== FILE: services/paymentService.js ===

/**
 * Payment Service for processing payments
 */
const yoco = require('../config/yoco');
const db = require('../config/database');
const emailService = require('./emailService');
const { AppError } = require('../utils/errorHandler');

// Process job posting payment
exports.processJobPostingPayment = async (jobId, token, userId) => {
  try {
    // Get job details
    const jobResult = await db.query(`
      SELECT j.*, c.user_id AS client_user_id
      FROM jobs j
      INNER JOIN clients c ON j.client_id = c.id
      WHERE j.id = $1
    `, [jobId]);
    
    if (jobResult.rows.length === 0) {
      throw new AppError('Job not found', 404);
    }
    
    const job = jobResult.rows[0];
    
    // Verify client ownership
    if (job.client_user_id !== userId) {
      throw new AppError('You are not authorized to pay for this job', 403);
    }
    
    // Check if already paid
    if (job.payment_status === 'paid') {
      throw new AppError('This job has already been paid for', 400);
    }
    
    // Process payment with Yoco
    try {
      const charge = await yoco.payments.create({
        token: token,
        amountInCents: Math.round(job.budget * 100), // Convert to cents
        currency: 'ZAR',
        metadata: {
          jobId: jobId,
          userId: userId,
          paymentType: 'job_posting'
        }
      });
      
      // Update job and create payment record
      const client = await db.getClient();
      
      try {
        await client.query('BEGIN');
        
        // Update job payment status
        await client.query(
          'UPDATE jobs SET payment_status = $1, status = $2, updated_at = NOW() WHERE id = $3',
          ['paid', 'open', jobId]
        );
        
        // Create payment record
        const paymentInsert = await client.query(
          'INSERT INTO payments (job_id, amount, transaction_id, payment_type, status, paid_by) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id',
          [jobId, job.budget, charge.id, 'job_posting', 'completed', userId]
        );
        
        await client.query('COMMIT');
        
        return {
          success: true,
          paymentId: paymentInsert.rows[0].id,
          transactionId: charge.id,
          amount: job.budget
        };
      } catch (error) {
        await client.query('ROLLBACK');
        throw error;
      } finally {
        client.release();
      }
    } catch (error) {
      console.error('Payment processing error:', error);
      throw new AppError(error.message || 'Payment processing failed', 400);
    }
  } catch (error) {
    if (error instanceof AppError) {
      throw error;
    }
    console.error('Payment service error:', error);
    throw new AppError('An error occurred during payment processing', 500);
  }
};

// Process freelancer payment
exports.processFreelancerPayment = async (paymentId, adminId) => {
  try {
    const client = await db.getClient();
    
    try {
      await client.query('BEGIN');
      
      // Get payment details
      const paymentResult = await client.query(
        'SELECT * FROM payments WHERE id = $1 AND payment_type = $2 AND status = $3',
        [paymentId, 'freelancer_payment', 'pending']
      );
      
      if (paymentResult.rows.length === 0) {
        throw new AppError('Payment not found or not eligible for processing', 404);
      }
      
      const payment = paymentResult.rows[0];
      
      // Get job and freelancer details
      const jobResult = await client.query(`
        SELECT j.*, f.first_name, f.last_name, f.user_id AS freelancer_user_id, u.email AS freelancer_email
        FROM jobs j
        INNER JOIN job_applications ja ON j.id = ja.job_id
        INNER JOIN freelancers f ON ja.freelancer_id = f.id
        INNER JOIN users u ON f.user_id = u.id
        WHERE j.id = $1 AND ja.status = 'hired'
      `, [payment.job_id]);
      
      if (jobResult.rows.length === 0) {
        throw new AppError('Related job or hired freelancer not found', 404);
      }
      
      const jobWithFreelancer = jobResult.rows[0];
      
      // Update payment status
      await client.query(
        'UPDATE payments SET status = $1, processed_by = $2, updated_at = NOW() WHERE id = $3',
        ['completed', adminId, paymentId]
      );
      
      await client.query('COMMIT');
      
      // Send email notification to freelancer
      try {
        await emailService.sendPaymentNotificationToFreelancer(
          payment,
          {
            title: jobWithFreelancer.title,
            id: jobWithFreelancer.id
          },
          {
            firstName: jobWithFreelancer.first_name,
            email: jobWithFreelancer.freelancer_email
          }
        );
      } catch (emailError) {
        console.error('Error sending payment notification email:', emailError);
        // Continue even if email fails
      }
      
      return {
        success: true,
        paymentId: payment.id,
        amount: payment.amount,
        freelancerName: `${jobWithFreelancer.first_name} ${jobWithFreelancer.last_name}`,
        freelancerEmail: jobWithFreelancer.freelancer_email
      };
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    if (error instanceof AppError) {
      throw error;
    }
    console.error('Payment service error:', error);
    throw new AppError('Error processing freelancer payment', 500);
  }
};

// Get payment details
exports.getPaymentDetails = async (paymentId) => {
  try {
    const result = await db.query(`
      SELECT p.*, j.title AS job_title, 
             u_from.email AS paid_by_email,
             u_to.email AS paid_to_email,
             u_admin.email AS processed_by_email
      FROM payments p
      LEFT JOIN jobs j ON p.job_id = j.id
      LEFT JOIN users u_from ON p.paid_by = u_from.id
      LEFT JOIN users u_to ON p.paid_to = u_to.id
      LEFT JOIN users u_admin ON p.processed_by = u_admin.id
      WHERE p.id = $1
    `, [paymentId]);
    
    if (result.rows.length === 0) {
      throw new AppError('Payment not found', 404);
    }
    
    return result.rows[0];
  } catch (error) {
    if (error instanceof AppError) {
      throw error;
    }
    console.error('Payment service error:', error);
    throw new AppError('Error retrieving payment details', 500);
  }
};

// Get all payments for a job
exports.getJobPayments = async (jobId) => {
  try {
    const result = await db.query(`
      SELECT p.*, 
             u_from.email AS paid_by_email,
             u_to.email AS paid_to_email,
             u_admin.email AS processed_by_email
      FROM payments p
      LEFT JOIN users u_from ON p.paid_by = u_from.id
      LEFT JOIN users u_to ON p.paid_to = u_to.id
      LEFT JOIN users u_admin ON p.processed_by = u_admin.id
      WHERE p.job_id = $1
      ORDER BY p.created_at DESC
    `, [jobId]);
    
    return result.rows;
  } catch (error) {
    console.error('Payment service error:', error);
    throw new AppError('Error retrieving job payments', 500);
  }
};

// Get user's payment history
exports.getUserPaymentHistory = async (userId) => {
  try {
    const result = await db.query(`
      SELECT p.*, j.title AS job_title, 
             u_from.email AS paid_by_email,
             u_to.email AS paid_to_email
      FROM payments p
      LEFT JOIN jobs j ON p.job_id = j.id
      LEFT JOIN users u_from ON p.paid_by = u_from.id
      LEFT JOIN users u_to ON p.paid_to = u_to.id
      WHERE p.paid_by = $1 OR p.paid_to = $1
      ORDER BY p.created_at DESC
    `, [userId]);
    
    return result.rows;
  } catch (error) {
    console.error('Payment service error:', error);
    throw new AppError('Error retrieving payment history', 500);
  }
};

=== END OF FILE: services/paymentService.js ===



=== FILE: tests/configTests/create-default-users.test.js ===

require('dotenv').config({ path: '.env.test' }); 

const { TextEncoder, TextDecoder } = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;

// Mock pg module
const mockClient = {
  query: jest.fn(),
  release: jest.fn(),
};
const mockPool = {
  connect: jest.fn().mockResolvedValue(mockClient),
  query: jest.fn(),
  end: jest.fn(),
};

jest.mock('pg', () => ({
  Pool: jest.fn(() => mockPool),
}));

// Mock bcrypt
jest.mock('bcryptjs', () => ({
  hash: jest.fn().mockResolvedValue('hashed_password'),
}));

const bcrypt = require('bcryptjs');
const { createDefaultUsers } = require('../../config/scripts/create-default-users');
const { Pool } = require('pg');

describe('createDefaultUsers', () => {
  beforeEach(() => {
    jest.clearAllMocks();

    mockClient.query.mockImplementation((query, params) => {
      if (query === 'SELECT * FROM users WHERE email = $1') {
        return Promise.resolve({ rows: [] });
      }
      if (query.includes('INSERT INTO users')) {
        return Promise.resolve({ rows: [{ id: 1 }] });
      }
      return Promise.resolve({ rows: [] });
    });
  });

  it('should create admin user if it does not exist', async () => {
    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith(
      'SELECT * FROM users WHERE email = $1',
      ['admin@example.com']
    );

    expect(bcrypt.hash).toHaveBeenCalledWith('admin123', 10);

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      ['admin@example.com', 'hashed_password', 'admin']
    );

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO admins (user_id, first_name, last_name) VALUES ($1, $2, $3)',
      [1, 'System', 'Administrator']
    );
  });

  it('should create client user if it does not exist', async () => {
    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith(
      'SELECT * FROM users WHERE email = $1',
      ['client@example.com']
    );

    expect(bcrypt.hash).toHaveBeenCalledWith('client123', 10);

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      ['client@example.com', 'hashed_password', 'client']
    );

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO clients (user_id, first_name, last_name, company_name, skills, experience) VALUES ($1, $2, $3, $4, $5, $6)',
      [
        1,
        'Test',
        'Client',
        'Test Company',
        ['Web Development', 'Design', 'Marketing'],
        'We are a small company looking for skilled freelancers for various projects.',
      ]
    );
  });

  it('should create freelancer user if it does not exist', async () => {
    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith(
      'SELECT * FROM users WHERE email = $1',
      ['freelancer@example.com']
    );

    expect(bcrypt.hash).toHaveBeenCalledWith('freelancer123', 10);

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      ['freelancer@example.com', 'hashed_password', 'freelancer']
    );

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO freelancers (user_id, first_name, last_name, skills, experience, is_approved) VALUES ($1, $2, $3, $4, $5, $6)',
      [
        1,
        'Test',
        'Freelancer',
        ['Web Development', 'JavaScript', 'React', 'Node.js'],
        'Experienced web developer with 5 years of experience in full-stack development.',
        true,
      ]
    );
  });

  it('should create sample job if it does not exist', async () => {
    mockClient.query.mockImplementation((query, params) => {
      if (query.includes('SELECT c.id FROM clients c')) {
        return Promise.resolve({ rows: [{ id: 1 }] });
      }
      if (query === 'SELECT * FROM jobs WHERE title = $1') {
        return Promise.resolve({ rows: [] });
      }
      return Promise.resolve({ rows: [] });
    });

    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith(
      'SELECT * FROM jobs WHERE title = $1',
      ['Sample Web Development Project']
    );

    expect(mockClient.query).toHaveBeenCalledWith(
      'INSERT INTO jobs (client_id, title, description, requirements, budget, status, payment_status) VALUES ($1, $2, $3, $4, $5, $6, $7)',
      [
        1,
        'Sample Web Development Project',
        'We need a skilled developer to build a responsive website for our company.',
        'HTML, CSS, JavaScript, Responsive Design',
        1000.0,
        'open',
        'paid',
      ]
    );
  });

  it('should not create users that already exist', async () => {
    mockClient.query.mockImplementation((query, params) => {
      if (query === 'SELECT * FROM users WHERE email = $1' && params[0] === 'admin@example.com') {
        return Promise.resolve({ rows: [{ id: 1 }] });
      }
      return Promise.resolve({ rows: [] });
    });

    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith(
      'SELECT * FROM users WHERE email = $1',
      ['admin@example.com']
    );

    expect(mockClient.query).not.toHaveBeenCalledWith(
      'INSERT INTO users (email, password, role) VALUES ($1, $2, $3) RETURNING id',
      expect.arrayContaining(['admin@example.com'])
    );
  });

  it('should handle errors and rollback transaction', async () => {
    mockClient.query.mockRejectedValue(new Error('Database error'));

    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith('BEGIN');
    expect(mockClient.query).toHaveBeenCalledWith('ROLLBACK');
    expect(mockClient.release).toHaveBeenCalled();
  });

  it('should commit transaction if everything succeeds', async () => {
    await createDefaultUsers();

    expect(mockClient.query).toHaveBeenCalledWith('COMMIT');
    expect(mockClient.release).toHaveBeenCalled();
    expect(mockPool.end).toHaveBeenCalled();
  });
});


=== END OF FILE: tests/configTests/create-default-users.test.js ===



=== FILE: tests/configTests/yoco.test.js ===

const axios = require('axios');
const yoco = require('../../config/yoco'); // adjust path accordingly

jest.mock('axios');

describe('yoco.payments.create', () => {
  const samplePaymentData = {
    amountInCents: 1000,
    currency: 'ZAR',
    metadata: { orderId: '12345' },
  };

  afterEach(() => {
    jest.clearAllMocks();
    delete process.env.NODE_ENV;
  });

  it('returns simulated successful payment in development', async () => {
    process.env.NODE_ENV = 'development';

    const result = await yoco.payments.create(samplePaymentData);

    expect(result).toHaveProperty('id');
    expect(result.status).toBe('successful');
    expect(result.amount).toBe(samplePaymentData.amountInCents);
    expect(result.currency).toBe(samplePaymentData.currency);
    expect(result.metadata).toEqual(samplePaymentData.metadata);
  });

  it('sends payment to Yoco API in production and returns response', async () => {
    process.env.NODE_ENV = 'production';
    process.env.YOCO_SECRET_KEY = 'test_secret_key';

    const apiResponse = {
      data: {
        id: 'ch_987654321',
        status: 'successful',
        amount: 1000,
        currency: 'ZAR',
        metadata: { orderId: '12345' }
      }
    };

    axios.post.mockResolvedValue(apiResponse);

    const result = await yoco.payments.create(samplePaymentData);

    expect(axios.post).toHaveBeenCalledWith(
      'https://api.yoco.com/v1/charges',
      samplePaymentData,
      {
        headers: {
          'X-Auth-Secret-Key': 'test_secret_key',
          'Content-Type': 'application/json'
        }
      }
    );

    expect(result).toEqual(apiResponse.data);
  });

  it('throws error with Yoco message on failure in production', async () => {
    process.env.NODE_ENV = 'production';
    process.env.YOCO_SECRET_KEY = 'test_secret_key';

    axios.post.mockRejectedValue({
      response: {
        data: {
          message: 'Card declined'
        }
      }
    });

    await expect(yoco.payments.create(samplePaymentData)).rejects.toThrow('Card declined');
  });

  it('throws generic error if no specific message is available', async () => {
    process.env.NODE_ENV = 'production';
    axios.post.mockRejectedValue({});

    await expect(yoco.payments.create(samplePaymentData)).rejects.toThrow('Payment processing failed');
  });
});


=== END OF FILE: tests/configTests/yoco.test.js ===



=== FILE: tests/midTests/fileUpload.test.js ===

const { TextEncoder, TextDecoder } = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;

const request = require('supertest');
const express = require('express');
const fs = require('fs');
const path = require('path');
const { upload } = require('../../middleware/fileUpload'); // Adjust the path as needed

const app = express();

app.post('/upload', upload.fields([
  { name: 'cv', maxCount: 1 },
  { name: 'clearance', maxCount: 1 }
]), (req, res) => {
  res.status(200).json({ message: 'Files uploaded successfully', files: req.files });
});

describe('Upload Middleware', () => {
  const testFilesDir = path.join(__dirname, 'test-files');

  beforeAll(() => {
    if (!fs.existsSync(testFilesDir)) fs.mkdirSync(testFilesDir);
    fs.writeFileSync(path.join(testFilesDir, 'test.pdf'), 'Dummy content');
    fs.writeFileSync(path.join(testFilesDir, 'test.exe'), 'Executable content');
  });

  afterAll(() => {
    fs.rmSync(testFilesDir, { recursive: true, force: true });
  });

  it('should upload a valid CV file', async () => {
    const res = await request(app)
      .post('/upload')
      .attach('cv', path.join(testFilesDir, 'test.pdf'));

    expect(res.status).toBe(200);
    expect(res.body.files.cv).toBeDefined();
    expect(res.body.files.cv[0].originalname).toBe('test.pdf');
  });

  it('should reject unsupported file types', async () => {
    const res = await request(app)
      .post('/upload')
      .attach('cv', path.join(testFilesDir, 'test.exe'));

    expect(res.status).toBe(500); // multer throws error, resulting in Express error handling
    expect(res.text).toMatch(/Only PDF, DOC, DOCX, JPG, JPEG, and PNG files are allowed/);
  });

  it('should reject upload with an invalid field name', async () => {
    const res = await request(app)
      .post('/upload')
      .attach('invalidField', path.join(testFilesDir, 'test.pdf'));

    expect(res.status).toBe(500);
    expect(res.text).toMatch(/Invalid file field/);
  });

  it('should reject files larger than 5MB', async () => {
    const bigFilePath = path.join(testFilesDir, 'bigfile.pdf');
    fs.writeFileSync(bigFilePath, Buffer.alloc(6 * 1024 * 1024)); // 6MB

    const res = await request(app)
      .post('/upload')
      .attach('cv', bigFilePath);

    expect(res.status).toBe(500);
    expect(res.text).toMatch(/File too large/);
  });
});


=== END OF FILE: tests/midTests/fileUpload.test.js ===



=== FILE: tests/modTests/Admin.test.js ===

const { TextEncoder, TextDecoder } = require('util');
global.TextEncoder = TextEncoder;
global.TextDecoder = TextDecoder;

const Admin = require('../../models/Admin');
const db = require('../../config/database');

jest.mock('../../config/database');

describe('Admin Model', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('findByUserId', () => {
    it('should return admin when found', async () => {
      const mockAdmin = { id: 1, user_id: 10, first_name: 'Jane', last_name: 'Doe' };
      db.query.mockResolvedValue({ rows: [mockAdmin] });

      const result = await Admin.findByUserId(10);
      expect(result).toEqual(mockAdmin);
      expect(db.query).toHaveBeenCalledWith('SELECT * FROM admins WHERE user_id = $1', [10]);
    });

    it('should return null when no admin is found', async () => {
      db.query.mockResolvedValue({ rows: [] });

      const result = await Admin.findByUserId(99);
      expect(result).toBeNull();
    });
  });

  describe('findById', () => {
    it('should return admin by ID', async () => {
      const mockAdmin = { id: 2, user_id: 11, first_name: 'John', last_name: 'Smith' };
      db.query.mockResolvedValue({ rows: [mockAdmin] });

      const result = await Admin.findById(2);
      expect(result).toEqual(mockAdmin);
      expect(db.query).toHaveBeenCalledWith('SELECT * FROM admins WHERE id = $1', [2]);
    });
  });

  describe('create', () => {
    it('should create a new admin', async () => {
      const newAdminData = {
        userId: 20,
        firstName: 'Alice',
        lastName: 'Wonderland'
      };
      const mockResult = { id: 3, user_id: 20, first_name: 'Alice', last_name: 'Wonderland' };

      db.query.mockResolvedValue({ rows: [mockResult] });

      const result = await Admin.create(newAdminData);
      expect(result).toEqual(mockResult);
      expect(db.query).toHaveBeenCalledWith(
        'INSERT INTO admins (user_id, first_name, last_name) VALUES ($1, $2, $3) RETURNING *',
        [20, 'Alice', 'Wonderland']
      );
    });
  });

  describe('update', () => {
    it('should update an admin profile', async () => {
      const updatedAdmin = {
        id: 4,
        user_id: 21,
        first_name: 'Updated',
        last_name: 'Admin',
        updated_at: expect.any(Date)
      };

      const mockReturn = {
        ...updatedAdmin,
        updated_at: new Date()
      };

      db.query.mockResolvedValue({ rows: [mockReturn] });

      const result = await Admin.update(4, {
        firstName: 'Updated',
        lastName: 'Admin'
      });

      expect(result).toMatchObject({
        id: 4,
        first_name: 'Updated',
        last_name: 'Admin'
      });

      expect(db.query).toHaveBeenCalledWith(
        expect.stringContaining('UPDATE admins'),
        expect.arrayContaining(['Updated', 'Admin', expect.any(Date), 4])
      );
    });
  });

  describe('getAll', () => {
    it('should return all admins', async () => {
      const mockAdmins = [
        { id: 1, user_id: 10, first_name: 'Admin1', email: 'admin1@example.com' },
        { id: 2, user_id: 11, first_name: 'Admin2', email: 'admin2@example.com' }
      ];

      db.query.mockResolvedValue({ rows: mockAdmins });

      const result = await Admin.getAll();
      expect(result).toEqual(mockAdmins);
      expect(db.query).toHaveBeenCalledWith(expect.stringContaining('SELECT a.*, u.email'), undefined);
    });
  });

  describe('count', () => {
    it('should return the total number of admins', async () => {
      db.query.mockResolvedValue({ rows: [{ count: '5' }] });

      const result = await Admin.count();
      expect(result).toBe(5);
      expect(db.query).toHaveBeenCalledWith('SELECT COUNT(*) FROM admins');
    });
  });
});


=== END OF FILE: tests/modTests/Admin.test.js ===



=== FILE: utils/csvGenerator.js ===

/**
 * CSV Generator utility for creating invoice CSV files
 */
const fs = require('fs');
const path = require('path');

// Format currency
const formatCurrency = (amount) => {
  return parseFloat(amount).toFixed(2);
};

// Format date
const formatDate = (dateString) => {
  return new Date(dateString).toISOString().slice(0, 10);
};

// Generate invoice CSV content
exports.generateCsv = (job, freelancer) => {
  const today = formatDate(new Date());
  const invoiceNumber = `INV-${job.id}-${Date.now().toString().slice(-6)}`;
  
  // Build CSV content
  let csvContent = 'INVOICE\n';
  csvContent += `Date,${today}\n`;
  csvContent += `Invoice #,${invoiceNumber}\n\n`;
  
  csvContent += 'CLIENT DETAILS\n';
  csvContent += `Name,${job.client_first_name} ${job.client_last_name}\n`;
  if (job.company_name) csvContent += `Company,${job.company_name}\n`;
  csvContent += `Email,${job.client_email}\n`;
  if (job.client_phone) csvContent += `Phone,${job.client_phone}\n`;
  if (job.client_address) csvContent += `Address,${job.client_address.replace(/,/g, ' ')}\n\n`;
  
  if (freelancer) {
    csvContent += 'FREELANCER DETAILS\n';
    csvContent += `Name,${freelancer.first_name} ${freelancer.last_name}\n`;
    csvContent += `Email,${freelancer.email}\n`;
    if (freelancer.phone) csvContent += `Phone,${freelancer.phone}\n`;
    if (freelancer.address) csvContent += `Address,${freelancer.address.replace(/,/g, ' ')}\n\n`;
  }
  
  csvContent += 'JOB DETAILS\n';
  csvContent += `Job ID,${job.id}\n`;
  csvContent += `Title,${job.title.replace(/,/g, ' ')}\n`;
  csvContent += `Description,${job.description.replace(/\n/g, ' ').replace(/,/g, ' ')}\n`;
  csvContent += `Status,${job.status}\n`;
  if (job.deadline) csvContent += `Deadline,${formatDate(job.deadline)}\n`;
  csvContent += `Created,${formatDate(job.created_at)}\n\n`;
  
  csvContent += 'PAYMENT DETAILS\n';
  csvContent += `Amount,${formatCurrency(job.budget)}\n`;
  csvContent += `Payment Status,${job.payment_status}\n\n`;
  
  csvContent += 'SUMMARY\n';
  csvContent += 'Item,Description,Amount\n';
  csvContent += `Job: ${job.id},${job.title.replace(/,/g, ' ')},${formatCurrency(job.budget)}\n\n`;
  
  csvContent += `Total,${formatCurrency(job.budget)}\n\n`;
  
  csvContent += 'Thank you for using our platform!\n';
  csvContent += 'lance - Connecting clients with professional freelancers\n';
  
  return csvContent;
};

// Save CSV to file (for storing invoices if needed)
exports.saveCsvToFile = (job, freelancer, directory = 'invoices') => {
  return new Promise((resolve, reject) => {
    try {
      const invoiceDir = path.join(__dirname, '..', 'public', directory);
      
      // Create directory if it doesn't exist
      if (!fs.existsSync(invoiceDir)) {
        fs.mkdirSync(invoiceDir, { recursive: true });
      }
      
      const invoiceNumber = `INV-${job.id}-${Date.now().toString().slice(-6)}`;
      const filePath = path.join(invoiceDir, `${invoiceNumber}.csv`);
      
      // Generate CSV content
      const csvContent = this.generateCsv(job, freelancer);
      
      // Write to file
      fs.writeFileSync(filePath, csvContent);
      
      resolve({
        success: true,
        filePath,
        invoiceNumber
      });
    } catch (error) {
      reject(error);
    }
  });
};

=== END OF FILE: utils/csvGenerator.js ===



=== FILE: utils/errorHandler.js ===

/**
 * Custom error handling utilities
 */

// Custom error class with HTTP status code
class AppError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

// Global error handler middleware
const globalErrorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  // Log error details
  console.error('ERROR 💥', {
    name: err.name,
    statusCode: err.statusCode,
    message: err.message,
    stack: err.stack
  });

  // For API requests
  if (req.originalUrl.startsWith('/api')) {
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
      error: process.env.NODE_ENV === 'development' ? err : {}
    });
  }

  // For rendered website
  if (err.isOperational) {
    return res.status(err.statusCode).render('error', {
      title: 'Error',
      message: err.message,
      status: err.statusCode
    });
  }

  // For unknown errors in production
  console.error('UNKNOWN ERROR 💥', err);
  res.status(500).render('error', {
    title: 'Error',
    message: 'Something went wrong!',
    status: 500
  });
};

// 404 Not Found error handler
const notFound = (req, res, next) => {
  const err = new AppError(`Cannot find ${req.originalUrl} on this server!`, 404);
  next(err);
};

// Database error handler
const handleDatabaseError = (err) => {
  // Duplicate key error
  if (err.code === '23505') {
    return new AppError('A record with this information already exists.', 400);
  }
  
  // Foreign key constraint error
  if (err.code === '23503') {
    return new AppError('This operation would violate database constraints.', 400);
  }
  
  // Default database error
  return new AppError('Database error. Please try again later.', 500);
};

// Async function error wrapper
const catchAsync = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch(next);
  };
};

module.exports = {
  AppError,
  globalErrorHandler,
  notFound,
  handleDatabaseError,
  catchAsync
};

=== END OF FILE: utils/errorHandler.js ===



=== FILE: utils/validators.js ===

/**
 * Validation utilities for input validation
 */
const { check, validationResult } = require('express-validator');

// Validation rules for client registration
exports.clientRegisterValidation = [
  check('email')
    .isEmail()
    .withMessage('Please provide a valid email address')
    .normalizeEmail(),
  check('password')
    .isLength({ min: 6 })
    .withMessage('Password must be at least 6 characters long'),
  check('confirmPassword')
    .custom((value, { req }) => {
      if (value !== req.body.password) {
        throw new Error('Passwords do not match');
      }
      return true;
    }),
  check('firstName')
    .notEmpty()
    .withMessage('First name is required')
    .trim(),
  check('lastName')
    .notEmpty()
    .withMessage('Last name is required')
    .trim()
];

// Validation rules for freelancer registration
exports.freelancerRegisterValidation = [
  check('email')
    .isEmail()
    .withMessage('Please provide a valid email address')
    .normalizeEmail(),
  check('password')
    .isLength({ min: 6 })
    .withMessage('Password must be at least 6 characters long'),
  check('confirmPassword')
    .custom((value, { req }) => {
      if (value !== req.body.password) {
        throw new Error('Passwords do not match');
      }
      return true;
    }),
  check('firstName')
    .notEmpty()
    .withMessage('First name is required')
    .trim(),
  check('lastName')
    .notEmpty()
    .withMessage('Last name is required')
    .trim(),
  check('skills')
    .notEmpty()
    .withMessage('Please provide at least one skill')
    .trim(),
  check('experience')
    .notEmpty()
    .withMessage('Experience information is required')
    .trim()
];

// Validation rules for job creation
exports.jobValidation = [
  check('title')
    .notEmpty()
    .withMessage('Job title is required')
    .trim(),
  check('description')
    .notEmpty()
    .withMessage('Job description is required')
    .trim(),
  check('budget')
    .isNumeric()
    .withMessage('Budget must be a number')
    .custom(value => {
      if (parseFloat(value) <= 0) {
        throw new Error('Budget must be greater than 0');
      }
      return true;
    }),
  check('deadline')
    .optional({ checkFalsy: true })
    .isDate()
    .withMessage('Deadline must be a valid date')
    .custom(value => {
      const deadlineDate = new Date(value);
      const today = new Date();
      if (deadlineDate < today) {
        throw new Error('Deadline cannot be in the past');
      }
      return true;
    })
];

// Validation rules for job application
exports.applicationValidation = [
  check('motivation')
    .notEmpty()
    .withMessage('Motivation is required')
    .isLength({ min: 10 })
    .withMessage('Motivation must be at least 10 characters long')
    .trim()
];

// Validation rules for profile update
exports.profileUpdateValidation = [
  check('firstName')
    .notEmpty()
    .withMessage('First name is required')
    .trim(),
  check('lastName')
    .notEmpty()
    .withMessage('Last name is required')
    .trim(),
  check('phone')
    .optional({ checkFalsy: true })
    .isMobilePhone()
    .withMessage('Please provide a valid phone number')
    .trim()
];

// Validation rules for password change
exports.passwordChangeValidation = [
  check('currentPassword')
    .notEmpty()
    .withMessage('Current password is required'),
  check('newPassword')
    .isLength({ min: 6 })
    .withMessage('New password must be at least 6 characters long'),
  check('confirmPassword')
    .custom((value, { req }) => {
      if (value !== req.body.newPassword) {
        throw new Error('New passwords do not match');
      }
      return true;
    })
];

// Validation rules for report submission
exports.reportValidation = [
  check('issue')
    .notEmpty()
    .withMessage('Issue description is required')
    .isLength({ min: 10 })
    .withMessage('Issue description must be at least 10 characters long')
    .trim()
];

// Process validation results
exports.validate = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};

// Flash validation errors
exports.flashValidationErrors = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    errors.array().forEach(error => {
      req.flash('error_msg', error.msg);
    });
    return res.redirect('back');
  }
  next();
};

=== END OF FILE: utils/validators.js ===



=== FILE: views/admin/dashboard.ejs ===


<%- contentFor('body') %>

<h1 class="mb-4">Admin Dashboard</h1>

<div class="dashboard-stats">
  <div class="stat-card">
    <div class="stat-card-value"><%= counts.clients %></div>
    <div class="stat-card-label">Clients</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= counts.freelancers %></div>
    <div class="stat-card-label">Freelancers</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= counts.jobs %></div>
    <div class="stat-card-label">Total Jobs</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value">$<%= parseFloat(counts.payments).toFixed(2) %></div>
    <div class="stat-card-label">Total Payments</div>
  </div>
</div>

<div class="quick-actions mb-4">
  <a href="/admin/approvals" class="btn btn-primary quick-action-btn">
    Pending Approvals <span class="badge badge-light"><%= counts.pendingApprovals %></span>
  </a>
  <a href="/admin/reports" class="btn btn-danger quick-action-btn">
    Reports <span class="badge badge-light"><%= counts.reports %></span>
  </a>
  <a href="/admin/users" class="btn btn-secondary quick-action-btn">Manage Users</a>
  <a href="/admin/jobs" class="btn btn-light quick-action-btn">Manage Jobs</a>
</div>

<div class="dashboard-container">
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">Recent Jobs</h2>
      <a href="/admin/jobs" class="btn btn-sm btn-primary">View All</a>
    </div>
    <div class="dashboard-card-body">
      <% if (recentJobs.length === 0) { %>
        <p class="text-center text-muted">No jobs found in the system.</p>
      <% } else { %>
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Title</th>
                <th>Client</th>
                <th>Budget</th>
                <th>Status</th>
                <th>Created</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% recentJobs.forEach(function(job) { %>
                <tr>
                  <td><%= job.title %></td>
                  <td><%= job.first_name %> <%= job.last_name %></td>
                  <td>$<%= parseFloat(job.budget).toFixed(2) %></td>
                  <td>
                    <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
                      <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
                    </span>
                  </td>
                  <td><%= new Date(job.created_at).toLocaleDateString() %></td>
                  <td>
                    <a href="/admin/jobs/<%= job.id %>" class="btn btn-sm btn-light">View</a>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>
    </div>
  </div>
  
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">System Status</h2>
    </div>
    <div class="dashboard-card-body">
      <div class="mb-3">
        <h4 class="mb-2">Pending Tasks</h4>
        <ul class="list-group">
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Freelancer Approvals
            <span class="badge badge-primary badge-pill"><%= counts.pendingApprovals %></span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Reports to Review
            <span class="badge badge-danger badge-pill"><%= counts.reports %></span>
          </li>
        </ul>
      </div>
      
      <div>
        <h4 class="mb-2">Quick Stats</h4>
        <ul class="list-group">
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Active Jobs
            <span class="badge badge-warning badge-pill"><%= counts.jobs - recentJobs.filter(j => j.status === 'completed').length %></span>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            Total Users
            <span class="badge badge-info badge-pill"><%= parseInt(counts.clients) + parseInt(counts.freelancers) %></span>
          </li>
        </ul>
      </div>
    </div>
  </div>
</div>
<style>
  /* Dashboard Styles */
.dashboard-stats {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 1.5rem;
}

.stat-card {
  flex: 1 0 calc(25% - 20px);
  padding: 1.5rem;
  background: var(--glass-bg);
  backdrop-filter: blur(5px);
  border-radius: 12px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: var(--shadow);
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
}

.stat-card-value {
  font-size: 2.2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.stat-card-label {
  color: #6c757d;
  font-size: 0.95rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.quick-actions {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 1.5rem;
}

.quick-action-btn {
  flex: 1 0 calc(25% - 10px);
  padding: 0.75rem;
  background: linear-gradient(135deg, var(--primary-color) 0%, #5a52cc 100%);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.quick-action-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 12px rgba(108, 99, 255, 0.3);
  background: linear-gradient(135deg, #5a52cc 0%, var(--primary-color) 100%);
}

.quick-action-btn .badge {
  background-color: rgba(255, 255, 255, 0.2);
  color: white;
  padding: 0.2em 0.5em;
  font-size: 0.8em;
}

.dashboard-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 10px 0;
}

.dashboard-card {
  flex: 1 0 calc(50% - 20px);
  background: var(--glass-bg);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: var(--shadow);
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.dashboard-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

.dashboard-card-header {
  padding: 1.2rem;
  background: linear-gradient(135deg, var(--primary-light) 0%, #f0f3ff 100%);
  border-bottom: none;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dashboard-card-title {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--dark-color);
}

.dashboard-card-body {
  padding: 1.5rem;
}

.status-badge {
  display: inline-block;
  padding: 0.35em 0.6em;
  font-size: 0.8rem;
  font-weight: 600;
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: 20px;
  transition: transform 0.2s ease;
}

.status-badge:hover {
  transform: scale(1.05);
}

.status-open {
  background-color: var(--primary-color);
  color: white;
}

.status-in-progress {
  background-color: var(--warning-color);
  color: white;
}

.status-completed {
  background-color: var(--secondary-color);
  color: white;
}

.status-pending {
  background-color: #6c757d;
  color: white;
}

.status-hired {
  background-color: #17a2b8;
  color: white;
}

.status-rejected {
  background-color: var(--danger-color);
  color: white;
}

.list-group {
  list-style: none;
  padding: 0;
}

.list-group-item {
  padding: 0.75rem 1.25rem;
  background: rgba(255, 255, 255, 0.5);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  margin-bottom: 0.5rem;
  transition: background-color 0.2s ease;
}

.list-group-item:hover {
  background: rgba(108, 99, 255, 0.1);
}

.table-responsive {
  overflow-x: auto;
}

.table-hover tbody tr:hover {
  background-color: rgba(108, 99, 255, 0.05);
}

/* Responsive design */
@media (max-width: 992px) {
  .stat-card {
    flex: 1 0 calc(50% - 20px);
  }
  
  .quick-action-btn {
    flex: 1 0 calc(50% - 10px);
  }
}

@media (max-width: 768px) {
  .dashboard-card {
    flex: 1 0 calc(100% - 20px);
  }
}

@media (max-width: 576px) {
  .stat-card {
    flex: 1 0 calc(100% - 20px);
  }
  
  .quick-action-btn {
    flex: 1 0 calc(100% - 10px);
  }
}
</style>

=== END OF FILE: views/admin/dashboard.ejs ===



=== FILE: views/admin/freelancer-approvals.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">Pending Freelancer Approvals</h1>
  
  <% if (freelancers.length === 0) { %>
    <div class="alert alert-info">
      <p>No pending approvals at this time.</p>
    </div>
  <% } else { %>
    <div class="row">
      <% freelancers.forEach(function(freelancer) { %>
        <div class="col-md-6 mb-4">
          <div class="card">
            <div class="card-header">
              <h3 class="card-title"><%= freelancer.first_name %> <%= freelancer.last_name %></h3>
            </div>
            <div class="card-body">
              <p><strong>Email:</strong> <%= freelancer.email %></p>
              <p><strong>Phone:</strong> <%= freelancer.phone || 'Not provided' %></p>
              <p><strong>Address:</strong> <%= freelancer.address || 'Not provided' %></p>
              
              <div class="mb-3">
                <h4>Skills:</h4>
                <div>
                  <% if (freelancer.skills && freelancer.skills.length > 0) { %>
                    <% freelancer.skills.forEach(function(skill) { %>
                      <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                    <% }); %>
                  <% } else { %>
                    <p class="text-muted">No skills listed</p>
                  <% } %>
                </div>
              </div>
              
              <div class="mb-3">
                <h4>Experience:</h4>
                <p><%= freelancer.experience || 'No experience listed' %></p>
              </div>
              
              <div class="row mb-3">
                <div class="col-6">
                  <% if (freelancer.cv_path) { %>
                    <a href="<%= freelancer.cv_path %>" target="_blank" class="btn btn-sm btn-light">
                      View CV
                    </a>
                  <% } else { %>
                    <p class="text-muted">No CV uploaded</p>
                  <% } %>
                </div>
                <div class="col-6">
                  <% if (freelancer.clearance_path) { %>
                    <a href="<%= freelancer.clearance_path %>" target="_blank" class="btn btn-sm btn-light">
                      View Police Clearance
                    </a>
                  <% } else { %>
                    <p class="text-muted">No clearance uploaded</p>
                  <% } %>
                </div>
              </div>
              
              <p class="text-muted">Registered on <%= new Date(freelancer.created_at).toLocaleString() %></p>
            </div>
            <div class="card-footer d-flex justify-content-between">
              <form action="/admin/freelancers/<%= freelancer.id %>/approve" method="POST">
                <button type="submit" class="btn btn-success">Approve</button>
              </form>
              
              <form action="/admin/freelancers/<%= freelancer.id %>/reject" method="POST" onsubmit="return confirm('Are you sure you want to reject and delete this freelancer account?');">
                <button type="submit" class="btn btn-danger">Reject</button>
              </form>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>
  
  <div class="mt-4">
    <a href="/admin/dashboard" class="btn btn-light">Back to Dashboard</a>
  </div>
</div>

=== END OF FILE: views/admin/freelancer-approvals.ejs ===



=== FILE: views/admin/job-details.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="mb-4">
    <a href="/admin/jobs" class="btn btn-light">← Back to Jobs</a>
  </div>

  <div class="row">
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h1 class="card-title mb-0"><%= job.title %></h1>
          <div>
            <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
              <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
            </span>
            <span class="badge badge-<%= job.payment_status === 'paid' ? 'success' : 'warning' %> ml-2">
              <%= job.payment_status.charAt(0).toUpperCase() + job.payment_status.slice(1) %>
            </span>
          </div>
        </div>
        
        <div class="card-body">
          <div class="mb-4">
            <h3>Client Information</h3>
            <p><strong>Name:</strong> <%= job.client_first_name %> <%= job.client_last_name %></p>
            <% if (job.company_name) { %>
              <p><strong>Company:</strong> <%= job.company_name %></p>
            <% } %>
          </div>
          
          <div class="job-details mb-4">
            <div class="job-budget">
              <strong>Budget:</strong> $<%= parseFloat(job.budget).toFixed(2) %>
            </div>
            
            <% if (job.deadline) { %>
              <div class="job-deadline">
                <strong>Deadline:</strong> <%= new Date(job.deadline).toLocaleDateString() %>
              </div>
            <% } %>
            
            <div>
              <strong>Posted:</strong> <%= new Date(job.created_at).toLocaleDateString() %>
            </div>
            
            <div>
              <strong>Last Updated:</strong> <%= new Date(job.updated_at).toLocaleDateString() %>
            </div>
          </div>
          
          <div class="mb-4">
            <h3>Description</h3>
            <p><%= job.description %></p>
          </div>
          
          <% if (job.requirements) { %>
            <div class="mb-4">
              <h3>Requirements</h3>
              <p><%= job.requirements %></p>
            </div>
          <% } %>
        </div>
      </div>
      
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Applications</h3>
        </div>
        <div class="card-body">
          <% if (applications.length === 0) { %>
            <p class="text-muted">No applications for this job yet.</p>
          <% } else { %>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Freelancer</th>
                    <th>Status</th>
                    <th>Applied</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% applications.forEach(function(application) { %>
                    <tr>
                      <td><%= application.first_name %> <%= application.last_name %></td>
                      <td>
                        <span class="status-badge status-<%= application.status %>">
                          <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
                        </span>
                      </td>
                      <td><%= new Date(application.created_at).toLocaleDateString() %></td>
                      <td>
                        <button type="button" class="btn btn-sm btn-light" 
                                data-toggle="modal" 
                                data-target="#applicationModal<%= application.id %>">
                          View Details
                        </button>
                        
                        <!-- Modal for Application Details -->
                        <div class="modal fade" id="applicationModal<%= application.id %>" tabindex="-1" role="dialog" aria-labelledby="applicationModalLabel<%= application.id %>" aria-hidden="true">
                          <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content">
                              <div class="modal-header">
                                <h5 class="modal-title" id="applicationModalLabel<%= application.id %>">
                                  Application from <%= application.first_name %> <%= application.last_name %>
                                </h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                  <span aria-hidden="true">&times;</span>
                                </button>
                              </div>
                              <div class="modal-body">
                                <div class="mb-3">
                                  <h6>Skills:</h6>
                                  <div>
                                    <% if (application.skills && application.skills.length > 0) { %>
                                      <% application.skills.forEach(function(skill) { %>
                                        <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                                      <% }); %>
                                    <% } else { %>
                                      <p class="text-muted">No skills listed</p>
                                    <% } %>
                                  </div>
                                </div>
                                
                                <div class="mb-3">
                                  <h6>Motivation:</h6>
                                  <p><%= application.motivation %></p>
                                </div>
                                
                                <div class="mb-3">
                                  <h6>Experience:</h6>
                                  <p><%= application.experience || 'No experience listed' %></p>
                                </div>
                                
                                <% if (application.cv_path) { %>
                                  <div class="mb-3">
                                    <a href="<%= application.cv_path %>" target="_blank" class="btn btn-sm btn-light">
                                      View CV/Resume
                                    </a>
                                  </div>
                                <% } %>
                                <p class="text-muted mb-0">
                                  Applied on <%= new Date(application.created_at).toLocaleString() %>
                                </p>
                              </div>
                              <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          <% } %>
        </div>
      </div>
      
      <% if (job.status === 'in-progress' || job.status === 'completed') { %>
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Job Completion Status</h3>
          </div>
          <div class="card-body">
            <% 
              // Find the completion status in the database
              const completionStatus = job.status === 'in-progress' || job.status === 'completed' ? 
                await db.query('SELECT * FROM job_completions WHERE job_id = $1', [job.id]).then(res => res.rows[0]) : null;
            %>
            
            <% if (completionStatus) { %>
              <div class="row">
                <div class="col-6">
                  <p><strong>Client confirmed:</strong> 
                    <% if (completionStatus.client_confirmed) { %>
                      <span class="text-success">Yes</span>
                    <% } else { %>
                      <span class="text-warning">Waiting</span>
                    <% } %>
                  </p>
                </div>
                <div class="col-6">
                  <p><strong>Freelancer confirmed:</strong> 
                    <% if (completionStatus.freelancer_confirmed) { %>
                      <span class="text-success">Yes</span>
                    <% } else { %>
                      <span class="text-warning">Waiting</span>
                    <% } %>
                  </p>
                </div>
              </div>
              
              <% if (job.status === 'completed' && completionStatus.completed_at) { %>
                <p><strong>Completed on:</strong> <%= new Date(completionStatus.completed_at).toLocaleString() %></p>
              <% } %>
            <% } else { %>
              <p class="text-muted">No completion record found.</p>
            <% } %>
          </div>
        </div>
      <% } %>
      
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Payment History</h3>
        </div>
        <div class="card-body">
          <% if (payments.length === 0) { %>
            <p class="text-muted">No payment records for this job.</p>
          <% } else { %>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% payments.forEach(function(payment) { %>
                    <tr>
                      <td>
                        <%= payment.payment_type === 'job_posting' ? 'Job Posting' : 'Freelancer Payment' %>
                      </td>
                      <td>$<%= parseFloat(payment.amount).toFixed(2) %></td>
                      <td>
                        <span class="badge badge-<%= payment.status === 'completed' ? 'success' : payment.status === 'pending' ? 'warning' : 'danger' %>">
                          <%= payment.status.charAt(0).toUpperCase() + payment.status.slice(1) %>
                        </span>
                      </td>
                      <td><%= new Date(payment.created_at).toLocaleDateString() %></td>
                      <td>
                        <% if (payment.payment_type === 'freelancer_payment' && payment.status === 'pending') { %>
                          <form action="/admin/payments/<%= payment.id %>/process" method="POST">
                            <button type="submit" class="btn btn-sm btn-success">Process Payment</button>
                          </form>
                        <% } else { %>
                          <span class="text-muted">No actions</span>
                        <% } %>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          <% } %>
        </div>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Admin Actions</h3>
        </div>
        <div class="card-body">
          <a href="/admin/users/<%= job.client_user_id %>" class="btn btn-primary btn-block mb-2">View Client Profile</a>
          
          <% if (job.status === 'in-progress') { %>
            <% 
              // Find the hired freelancer
              const hiredApplication = applications.find(app => app.status === 'hired');
              if (hiredApplication) {
                const freelancerUserId = await db.query('SELECT user_id FROM freelancers WHERE id = $1', [hiredApplication.freelancer_id])
                  .then(res => res.rows[0]?.user_id);
                if (freelancerUserId) {
            %>
              <a href="/admin/users/<%= freelancerUserId %>" class="btn btn-info btn-block mb-2">View Hired Freelancer</a>
            <% 
                }
              } 
            %>
          <% } %>
          
          <a href="/jobs/<%= job.id %>/invoice" class="btn btn-secondary btn-block mb-2">Generate Invoice</a>
          
          <form action="/admin/jobs/<%= job.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this job? This cannot be undone.');" class="mb-2">
            <button type="submit" class="btn btn-danger btn-block">Delete Job</button>
          </form>
          
          <% if (job.status === 'open' && job.payment_status === 'paid') { %>
            <form action="/admin/jobs/<%= job.id %>/close" method="POST" class="mb-2">
              <button type="submit" class="btn btn-warning btn-block">Close Job</button>
            </form>
          <% } else if (job.status === 'pending') { %>
            <form action="/admin/jobs/<%= job.id %>/approve-payment" method="POST" class="mb-2">
              <button type="submit" class="btn btn-success btn-block">Approve Payment Manually</button>
            </form>
          <% } %>
        </div>
      </div>
      
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Job Statistics</h3>
        </div>
        <div class="card-body">
          <p><strong>Applications:</strong> <%= applications.length %></p>
          <p><strong>Status:</strong> <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %></p>
          <p><strong>Payment:</strong> <%= job.payment_status.charAt(0).toUpperCase() + job.payment_status.slice(1) %></p>
          <p><strong>Days Active:</strong> <%= Math.ceil((new Date() - new Date(job.created_at)) / (1000 * 60 * 60 * 24)) %></p>
          
          <% if (job.status === 'open') { %>
            <div class="progress mb-2">
              <div class="progress-bar bg-primary" style="width: 100%">Open</div>
            </div>
          <% } else if (job.status === 'in-progress') { %>
            <div class="progress mb-2">
              <div class="progress-bar bg-warning" style="width: 50%">In Progress</div>
            </div>
          <% } else if (job.status === 'completed') { %>
            <div class="progress mb-2">
              <div class="progress-bar bg-success" style="width: 100%">Completed</div>
            </div>
          <% } else if (job.status === 'pending') { %>
            <div class="progress mb-2">
              <div class="progress-bar bg-secondary" style="width: 25%">Pending</div>
            </div>
          <% } %>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h3 class="card-title">Related Reports</h3>
        </div>
        <div class="card-body">
          <% 
            // Get any reports for this job
            const reports = await db.query(`
              SELECT r.*, u.email as reporter_email 
              FROM reports r 
              JOIN users u ON r.reported_by = u.id 
              WHERE r.job_id = $1
            `, [job.id]).then(res => res.rows);
          %>
          
          <% if (reports && reports.length > 0) { %>
            <div class="list-group">
              <% reports.forEach(function(report) { %>
                <a href="/admin/reports/<%= report.id %>" class="list-group-item list-group-item-action">
                  <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">Report from <%= report.reporter_email %></h5>
                    <small>
                      <span class="badge badge-<%= 
                        report.status === 'pending' ? 'warning' :
                        report.status === 'resolved' ? 'success' :
                        'danger' 
                      %>">
                        <%= report.status.charAt(0).toUpperCase() + report.status.slice(1) %>
                      </span>
                    </small>
                  </div>
                  <p class="mb-1"><%= report.issue.substring(0, 100) %><%= report.issue.length > 100 ? '...' : '' %></p>
                  <small><%= new Date(report.created_at).toLocaleString() %></small>
                </a>
              <% }); %>
            </div>
          <% } else { %>
            <p class="text-muted">No reports found for this job.</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Add modal functionality if not using Bootstrap's JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const modalButtons = document.querySelectorAll('[data-toggle="modal"]');
    
    modalButtons.forEach(button => {
      button.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target').substring(1);
        const modal = document.getElementById(targetId);
        
        if (modal) {
          modal.style.display = 'block';
          modal.classList.add('show');
          
          // Close button functionality
          const closeButtons = modal.querySelectorAll('[data-dismiss="modal"], .close');
          closeButtons.forEach(closeBtn => {
            closeBtn.addEventListener('click', function() {
              modal.style.display = 'none';
              modal.classList.remove('show');
            });
          });
          
          // Close when clicking outside the modal content
          modal.addEventListener('click', function(event) {
            if (event.target === modal) {
              modal.style.display = 'none';
              modal.classList.remove('show');
            }
          });
        }
      });
    });
  });
</script>

<style>
  /* Basic modal styles if not using Bootstrap */
  .modal {
    display: none;
    position: fixed;
    z-index: 1050;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
  }
  
  .modal.show {
    display: block;
  }
  
  .modal-dialog {
    position: relative;
    width: auto;
    margin: 1.75rem auto;
    max-width: 500px;
  }
  
  .modal-dialog.modal-lg {
    max-width: 800px;
  }
  
  .modal-content {
    position: relative;
    background-color: #fff;
    border-radius: 0.3rem;
    outline: 0;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
  }
  
  .modal-header {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid #e9ecef;
  }
  
  .modal-body {
    position: relative;
    padding: 1rem;
  }
  
  .modal-footer {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding: 1rem;
    border-top: 1px solid #e9ecef;
  }
  
  .close {
    float: right;
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1;
    color: #000;
    text-shadow: 0 1px 0 #fff;
    opacity: .5;
    background: none;
    border: none;
    cursor: pointer;
  }
</style>
                                

=== END OF FILE: views/admin/job-details.ejs ===



=== FILE: views/admin/jobs.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">Available Jobs</h1>
  
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="form-group">
        <input type="text" id="jobSearch" class="form-control" placeholder="Search jobs...">
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="form-group">
        <select id="jobSort" class="form-control">
          <option value="latest">Latest First</option>
          <option value="budget-high">Highest Budget</option>
          <option value="budget-low">Lowest Budget</option>
          <option value="deadline">Closest Deadline</option>
        </select>
      </div>
    </div>
  </div>
  
  <% if (jobs.length === 0) { %>
    <div class="alert alert-info">
      <p>No jobs available at the moment.</p>
    </div>
  <% } else { %>
    <div class="job-list" id="jobContainer">
      <% jobs.forEach(function(job) { %>
        <div class="job-item" data-budget="<%= job.budget %>" data-date="<%= job.created_at %>" data-deadline="<%= job.deadline || '9999-12-31' %>">
          <h3 class="job-title"><a href="/jobs/<%= job.id %>"><%= job.title %></a></h3>
          <div class="job-company">
            <%= job.company_name || `${job.first_name} ${job.last_name}` %>
          </div>
          <div class="job-details">
            <div class="job-budget">Budget: $<%= parseFloat(job.budget).toFixed(2) %></div>
            <% if (job.deadline) { %>
              <div class="job-deadline">Deadline: <%= new Date(job.deadline).toLocaleDateString() %></div>
            <% } %>
          </div>
          <div class="job-description">
            <%= job.description.length > 200 ? job.description.substring(0, 200) + '...' : job.description %>
          </div>
          <div class="job-actions">
            <a href="/jobs/<%= job.id %>" class="btn btn-primary">View Details</a>
            <a href="/jobs/<%= job.id %>/apply" class="btn btn-secondary">Apply Now</a>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('jobSearch');
    const sortSelect = document.getElementById('jobSort');
    const jobContainer = document.getElementById('jobContainer');
    const jobItems = document.querySelectorAll('.job-item');
    
    // Search functionality
    searchInput.addEventListener('keyup', function() {
      const searchText = searchInput.value.toLowerCase();
      
      jobItems.forEach(function(item) {
        const jobText = item.textContent.toLowerCase();
        
        if (jobText.includes(searchText)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
    
    // Sort functionality
    sortSelect.addEventListener('change', function() {
      const sortValue = sortSelect.value;
      const jobsArray = Array.from(jobItems);
      
      jobsArray.sort(function(a, b) {
        if (sortValue === 'latest') {
          return new Date(b.dataset.date) - new Date(a.dataset.date);
        } else if (sortValue === 'budget-high') {
          return parseFloat(b.dataset.budget) - parseFloat(a.dataset.budget);
        } else if (sortValue === 'budget-low') {
          return parseFloat(a.dataset.budget) - parseFloat(b.dataset.budget);
        } else if (sortValue === 'deadline') {
          return new Date(a.dataset.deadline) - new Date(b.dataset.deadline);
        }
      });
      
      // Remove all existing items
      jobItems.forEach(function(item) {
        item.remove();
      });
      
      // Append sorted items
      jobsArray.forEach(function(item) {
        jobContainer.appendChild(item);
      });
    });
  });
</script>

=== END OF FILE: views/admin/jobs.ejs ===



=== FILE: views/admin/report-details.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="mb-4">
    <a href="/admin/reports" class="btn btn-light">← Back to Reports</a>
  </div>

  <div class="card mb-4">
    <div class="card-header">
      <h1 class="card-title">Report Details</h1>
    </div>
    <div class="card-body">
      <div class="row mb-4">
        <div class="col-md-6">
          <h3>Reported By</h3>
          <p><strong>Email:</strong> <%= report.reporter_email || 'N/A' %></p>
        </div>
        <div class="col-md-6">
          <h3>Reported User</h3>
          <p><strong>Email:</strong> <%= report.reported_email || 'N/A' %></p>
        </div>
      </div>
      
      <div class="mb-4">
        <h3>Status</h3>
        <span class="badge badge-<%= 
          report.status === 'pending' ? 'warning' :
          report.status === 'resolved' ? 'success' :
          report.status === 'rejected' ? 'danger' :
          'secondary'
        %>">
          <%= report.status.charAt(0).toUpperCase() + report.status.slice(1) %>
        </span>
      </div>
      
      <div class="mb-4">
        <h3>Job Information</h3>
        <% if (report.job_id && report.job_title) { %>
          <p><strong>Job:</strong> <%= report.job_title %></p>
          <p><a href="/admin/jobs/<%= report.job_id %>" class="btn btn-sm btn-light">View Job</a></p>
        <% } else { %>
          <p>No job associated with this report.</p>
        <% } %>
      </div>
      
      <div class="mb-4">
        <h3>Issue Description</h3>
        <div class="p-3 bg-light rounded">
          <p><%= report.issue %></p>
        </div>
      </div>
      
      <% if (report.admin_notes) { %>
        <div class="mb-4">
          <h3>Admin Notes</h3>
          <div class="p-3 bg-light rounded">
            <p><%= report.admin_notes %></p>
          </div>
        </div>
      <% } %>
      
      <div class="mb-4">
        <h3>Report Date</h3>
        <p><%= new Date(report.created_at).toLocaleString() %></p>
      </div>
      
      <% if (report.status === 'pending') { %>
        <div class="card bg-light">
          <div class="card-body">
            <h3>Process Report</h3>
            <form action="/admin/reports/<%= report.id %>/process" method="POST">
              <div class="form-group">
                <label for="action" class="form-label">Action</label>
                <select id="action" name="action" class="form-control" required>
                  <option value="">Select action...</option>
                  <option value="resolved">Mark as Resolved</option>
                  <option value="rejected">Reject Report</option>
                </select>
              </div>
              
              <div class="form-group">
                <label for="notes" class="form-label">Admin Notes</label>
                <textarea id="notes" name="notes" class="form-control" rows="4" required></textarea>
              </div>
              
              <button type="submit" class="btn btn-primary">Submit</button>
            </form>
          </div>
        </div>
      <% } %>
    </div>
  </div>
</div>

=== END OF FILE: views/admin/report-details.ejs ===



=== FILE: views/admin/reports.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">Reports</h1>
  
  <div class="card">
    <div class="card-header">
      <h2 class="card-title">Reported Issues</h2>
    </div>
    <div class="card-body">
      <% if (reports.length === 0) { %>
        <div class="alert alert-info">
          <p>No reports found in the system.</p>
        </div>
      <% } else { %>
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>Reported By</th>
                <th>Reported User</th>
                <th>Job</th>
                <th>Issue</th>
                <th>Status</th>
                <th>Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% reports.forEach(function(report) { %>
                <tr>
                  <td><%= report.reporter_email || 'N/A' %></td>
                  <td><%= report.reported_email || 'N/A' %></td>
                  <td><%= report.job_title || 'N/A' %></td>
                  <td>
                    <%= report.issue.length > 30 ? report.issue.substring(0, 30) + '...' : report.issue %>
                  </td>
                  <td>
                    <span class="badge badge-<%= 
                      report.status === 'pending' ? 'warning' :
                      report.status === 'resolved' ? 'success' :
                      report.status === 'rejected' ? 'danger' :
                      'secondary'
                    %>">
                      <%= report.status.charAt(0).toUpperCase() + report.status.slice(1) %>
                    </span>
                  </td>
                  <td><%= new Date(report.created_at).toLocaleDateString() %></td>
                  <td>
                    <a href="/admin/reports/<%= report.id %>" class="btn btn-sm btn-primary">Review</a>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>
    </div>
  </div>
</div>

=== END OF FILE: views/admin/reports.ejs ===



=== FILE: views/admin/stats.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">System Statistics</h1>
  
  <div class="row mb-4">
    <div class="col-md-3 mb-3">
      <div class="card">
        <div class="card-body text-center">
          <h4 class="card-title">Total Users</h4>
          <p class="display-4"><%= counts.users %></p>
          <p class="text-muted">
            <span class="badge badge-primary"><%= counts.clients %> Clients</span>
            <span class="badge badge-secondary"><%= counts.freelancers %> Freelancers</span>
            <span class="badge badge-danger"><%= counts.admins %> Admins</span>
          </p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3 mb-3">
      <div class="card">
        <div class="card-body text-center">
          <h4 class="card-title">Total Jobs</h4>
          <p class="display-4"><%= counts.jobs %></p>
          <p class="text-muted">
            <span class="badge badge-primary"><%= counts.openJobs %> Open</span>
            <span class="badge badge-warning"><%= counts.inProgressJobs %> In Progress</span>
            <span class="badge badge-success"><%= counts.completedJobs %> Completed</span>
          </p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3 mb-3">
      <div class="card">
        <div class="card-body text-center">
          <h4 class="card-title">Applications</h4>
          <p class="display-4"><%= counts.applications %></p>
          <p class="text-muted">
            Avg <%= (counts.applications / counts.jobs).toFixed(1) %> per job
          </p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3 mb-3">
      <div class="card">
        <div class="card-body text-center">
          <h4 class="card-title">Reports</h4>
          <p class="display-4"><%= counts.reports %></p>
          <p class="text-muted">
            <span class="badge badge-warning"><%= counts.pendingReports %> Pending</span>
          </p>
        </div>
      </div>
    </div>
  </div>
  
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Financial Overview</h2>
        </div>
        <div class="card-body">
          <div class="row mb-4">
            <div class="col-6">
              <h5>Total Payments</h5>
              <p class="h3">$<%= parseFloat(financialStats.totalPayments).toFixed(2) %></p>
            </div>
            <div class="col-6">
              <h5>Pending Payments</h5>
              <p class="h3">$<%= parseFloat(financialStats.pendingPayments).toFixed(2) %></p>
            </div>
          </div>
          
          <div class="row">
            <div class="col-6">
              <h5>Client Payments</h5>
              <p class="h4">$<%= parseFloat(financialStats.clientPayments).toFixed(2) %></p>
            </div>
            <div class="col-6">
              <h5>Freelancer Payments</h5>
              <p class="h4">$<%= parseFloat(financialStats.freelancerPayments).toFixed(2) %></p>
            </div>
          </div>
          
          <div class="mt-4">
            <canvas id="paymentStatisticsChart" 
                   data-chart-data="<%= JSON.stringify(financialStats) %>"
                   style="height: 250px;"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Monthly Jobs</h2>
        </div>
        <div class="card-body">
          <canvas id="jobStatisticsChart" 
                 data-chart-data="<%= JSON.stringify(monthlyJobs) %>"
                 style="height: 300px;"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <div class="row">
    <div class="col-md-12">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h2 class="card-title">System Performance</h2>
          <div>
            <form id="dateRangeForm" class="form-inline">
              <input type="date" id="startDate" name="startDate" class="form-control form-control-sm mr-2">
              <input type="date" id="endDate" name="endDate" class="form-control form-control-sm mr-2">
              <button type="submit" class="btn btn-sm btn-primary">Filter</button>
            </form>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <div class="col-md-4">
              <h5>System Health</h5>
              <div class="progress mb-2">
                <div class="progress-bar bg-success" style="width: 98%">98%</div>
              </div>
              <p class="text-muted small">System uptime in the last 30 days</p>
              
              <h5 class="mt-4">Database Status</h5>
              <div class="progress mb-2">
                <div class="progress-bar bg-info" style="width: 45%">45%</div>
              </div>
              <p class="text-muted small">Database usage</p>
              
              <h5 class="mt-4">API Performance</h5>
              <div class="progress mb-2">
                <div class="progress-bar bg-success" style="width: 92%">92%</div>
              </div>
              <p class="text-muted small">Average response time: 120ms</p>
            </div>
            
            <div class="col-md-8">
              <h5>User Growth</h5>
              <canvas id="userRegistrationChart" 
                     data-chart-data="<%= JSON.stringify(monthlyJobs) %>"
                     style="height: 250px;"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/js/admin.js"></script>

=== END OF FILE: views/admin/stats.ejs ===



=== FILE: views/admin/user-details.ejs ===

<div class="container">
  <div class="mb-4">
    <a href="/admin/users" class="btn btn-light">← Back to Users</a>
  </div>

  <div class="row">
    <div class="col-md-4">
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h2 class="card-title mb-0">User Information</h2>
          <span class="badge badge-<%= 
            userData.role === 'admin' ? 'danger' : 
            userData.role === 'client' ? 'primary' : 'secondary' 
          %>">
            <%= userData.role.charAt(0).toUpperCase() + userData.role.slice(1) %>
          </span>
        </div>
        <div class="card-body">
          <div class="text-center mb-4">
            <div class="profile-image mb-3" style="background-color: <%= 
              userData.role === 'admin' ? '#e74c3c' : 
              userData.role === 'client' ? '#3498db' : '#2ecc71' 
            %>;">
              <span class="profile-initial">
                <%= profile ? (profile.first_name.charAt(0) + profile.last_name.charAt(0)) : userData.email.charAt(0).toUpperCase() %>
              </span>
            </div>
            
            <h3><%= profile ? `${profile.first_name} ${profile.last_name}` : 'No profile data' %></h3>
            <p class="text-muted"><%= userData.email %></p>
            
            <% if (userData.role === 'freelancer') { %>
              <p class="badge badge-<%= profile && profile.is_approved ? 'success' : 'warning' %>">
                <%= profile && profile.is_approved ? 'Approved' : 'Pending Approval' %>
              </p>
            <% } %>
          </div>
          
          <div class="mb-3">
            <h4>Account Details</h4>
            <p><strong>User ID:</strong> <%= userData.id %></p>
            <p><strong>Email:</strong> <%= userData.email %></p>
            <p><strong>Role:</strong> <%= userData.role.charAt(0).toUpperCase() + userData.role.slice(1) %></p>
            <p><strong>Registered:</strong> <%= new Date(userData.created_at).toLocaleString() %></p>
            <% if (userData.last_login) { %>
              <p><strong>Last Login:</strong> <%= new Date(userData.last_login).toLocaleString() %></p>
            <% } %>
            <p><strong>Google Account:</strong> <%= userData.google_id ? 'Yes' : 'No' %></p>
          </div>
          
          <% if (userData.id !== user.id) { %>
            <div class="mt-4">
              <form action="/admin/users/<%= userData.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this user? This action cannot be undone.');">
                <button type="submit" class="btn btn-danger btn-block">Delete User</button>
              </form>
            </div>
          <% } else { %>
            <div class="alert alert-info">
              <p class="mb-0">You cannot delete your own account.</p>
            </div>
          <% } %>
        </div>
      </div>
      
      <% if (userData.role === 'freelancer' && profile && !profile.is_approved) { %>
        <div class="card mb-4">
          <div class="card-header">
            <h2 class="card-title">Approve Freelancer</h2>
          </div>
          <div class="card-body">
            <div class="alert alert-warning">
              <p>This freelancer is waiting for approval to access the platform.</p>
            </div>
            
            <div class="d-flex justify-content-between">
              <form action="/admin/freelancers/<%= profile.id %>/approve" method="POST">
                <button type="submit" class="btn btn-success">Approve</button>
              </form>
              
              <form action="/admin/freelancers/<%= profile.id %>/reject" method="POST" onsubmit="return confirm('Are you sure you want to reject this freelancer? Their account will be deleted.');">
                <button type="submit" class="btn btn-danger">Reject</button>
              </form>
            </div>
          </div>
        </div>
      <% } %>
    </div>
    
    <div class="col-md-8">
      <% if (profile) { %>
        <div class="card mb-4">
          <div class="card-header">
            <h2 class="card-title">Profile Details</h2>
          </div>
          <div class="card-body">
            <div class="row mb-3">
              <div class="col-md-6">
                <p><strong>First Name:</strong> <%= profile.first_name %></p>
              </div>
              <div class="col-md-6">
                <p><strong>Last Name:</strong> <%= profile.last_name %></p>
              </div>
            </div>
            
            <% if (userData.role === 'client' && profile.company_name) { %>
              <div class="mb-3">
                <p><strong>Company:</strong> <%= profile.company_name %></p>
              </div>
            <% } %>
            
            <% if (profile.phone) { %>
              <div class="mb-3">
                <p><strong>Phone:</strong> <%= profile.phone %></p>
              </div>
            <% } %>
            
            <% if (profile.address) { %>
              <div class="mb-3">
                <p><strong>Address:</strong> <%= profile.address %></p>
              </div>
            <% } %>
            
            <% if (profile.skills && profile.skills.length > 0) { %>
              <div class="mb-3">
                <h4>Skills</h4>
                <div>
                  <% profile.skills.forEach(function(skill) { %>
                    <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                  <% }); %>
                </div>
              </div>
            <% } %>
            
            <% if (profile.experience) { %>
              <div class="mb-3">
                <h4>Experience</h4>
                <p><%= profile.experience %></p>
              </div>
            <% } %>
            
            <div class="mb-3">
              <h4>Documents</h4>
              <div class="row">
                <% if (profile.cv_path) { %>
                  <div class="col-md-6 mb-2">
                    <a href="<%= profile.cv_path %>" target="_blank" class="btn btn-sm btn-light">
                      View CV/Resume
                    </a>
                  </div>
                <% } %>
                
                <% if (userData.role === 'freelancer' && profile.clearance_path) { %>
                  <div class="col-md-6 mb-2">
                    <a href="<%= profile.clearance_path %>" target="_blank" class="btn btn-sm btn-light">
                      View Police Clearance
                    </a>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
        
        <% if (userData.role === 'client' || userData.role === 'freelancer') { %>
          <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h2 class="card-title">Activity Summary</h2>
              <% if (userData.role === 'client') { %>
                <a href="/admin/users/<%= userData.id %>/jobs" class="btn btn-sm btn-primary">View All Jobs</a>
              <% } else if (userData.role === 'freelancer') { %>
                <a href="/admin/users/<%= userData.id %>/applications" class="btn btn-sm btn-primary">View All Applications</a>
              <% } %>
            </div>
            <div class="card-body">
              <% if (userData.role === 'client') { %>
                <% 
                  // Get client jobs
                //   const jobs = await db.query(`
                //     SELECT * FROM jobs WHERE client_id = $1 ORDER BY created_at DESC LIMIT 5
                //   `, [profile.id]).then(res => res.rows);
                %>
                
                <h4>Recent Jobs</h4>
                <% if (jobs && jobs.length > 0) { %>
                  <div class="table-responsive">
                    <table class="table table-hover">
                      <thead>
                        <tr>
                          <th>Title</th>
                          <th>Budget</th>
                          <th>Status</th>
                          <th>Created</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% jobs.forEach(function(job) { %>
                          <tr>
                            <td><%= job.title %></td>
                            <td>$<%= parseFloat(job.budget).toFixed(2) %></td>
                            <td>
                              <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
                                <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
                              </span>
                            </td>
                            <td><%= new Date(job.created_at).toLocaleDateString() %></td>
                            <td>
                              <a href="/admin/jobs/<%= job.id %>" class="btn btn-sm btn-light">View</a>
                            </td>
                          </tr>
                        <% }); %>
                      </tbody>
                    </table>
                  </div>
                <% } else { %>
                  <p class="text-muted">No jobs posted yet.</p>
                <% } %>
                
                <hr class="my-4">
                
                <!-- <% 
                  // Get client job stats
                //   const jobStats = await db.query(`
                //     SELECT 
                //       COUNT(*) AS total,
                //       COUNT(CASE WHEN status = 'open' THEN 1 END) AS open,
                //       COUNT(CASE WHEN status = 'in-progress' THEN 1 END) AS in_progress,
                //       COUNT(CASE WHEN status = 'completed' THEN 1 END) AS completed
                //     FROM jobs 
                //     WHERE client_id = $1
                //   `, [profile.id]).then(res => res.rows[0]);
                %> -->
                
                <div class="row">
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Total Jobs</h5>
                      <p class="h3"><%= jobStats.total || 0 %></p>
                    </div>
                  </div>
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Open</h5>
                      <p class="h3 text-primary"><%= jobStats.open || 0 %></p>
                    </div>
                  </div>
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>In Progress</h5>
                      <p class="h3 text-warning"><%= jobStats.in_progress || 0 %></p>
                    </div>
                  </div>
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Completed</h5>
                      <p class="h3 text-success"><%= jobStats.completed || 0 %></p>
                    </div>
                  </div>
                </div>
              <% } else if (userData.role === 'freelancer') { %>
                <!-- <% 
                  // Get freelancer applications
                //   const applications = await db.query(`
                //     SELECT ja.*, j.title, j.status AS job_status
                //     FROM job_applications ja
                //     INNER JOIN jobs j ON ja.job_id = j.id
                //     WHERE ja.freelancer_id = $1
                //     ORDER BY ja.created_at DESC LIMIT 5
                //   `, [profile.id]).then(res => res.rows);
                %> -->
                
                <h4>Recent Applications</h4>
                <% if (applications && applications.length > 0) { %>
                  <div class="table-responsive">
                    <table class="table table-hover">
                      <thead>
                        <tr>
                          <th>Job</th>
                          <th>Status</th>
                          <th>Job Status</th>
                          <th>Applied</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        <% applications.forEach(function(application) { %>
                          <tr>
                            <td><%= application.title %></td>
                            <td>
                              <span class="status-badge status-<%= application.status %>">
                                <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
                              </span>
                            </td>
                            <td>
                              <span class="status-badge status-<%= application.job_status.replace(' ', '-') %>">
                                <%= application.job_status.charAt(0).toUpperCase() + application.job_status.slice(1) %>
                              </span>
                            </td>
                            <td><%= new Date(application.created_at).toLocaleDateString() %></td>
                            <td>
                              <a href="/admin/jobs/<%= application.job_id %>" class="btn btn-sm btn-light">View Job</a>
                            </td>
                          </tr>
                        <% }); %>
                      </tbody>
                    </table>
                  </div>
                <% } else { %>
                  <p class="text-muted">No applications submitted yet.</p>
                <% } %>
                
                <hr class="my-4">
                
                <!-- <% 
                  // Get freelancer application stats
                //   const appStats = await db.query(`
                //     SELECT 
                //       COUNT(*) AS total,
                //       COUNT(CASE WHEN status = 'pending' THEN 1 END) AS pending,
                //       COUNT(CASE WHEN status = 'hired' THEN 1 END) AS hired,
                //       COUNT(CASE WHEN status = 'rejected' THEN 1 END) AS rejected
                //     FROM job_applications 
                //     WHERE freelancer_id = $1
                //   `, [profile.id]).then(res => res.rows[0]);
                %> -->
                
                <div class="row">
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Total Apps</h5>
                      <p class="h3"><%= appStats.total || 0 %></p>
                    </div>
                  </div>
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Pending</h5>
                      <p class="h3 text-warning"><%= appStats.pending || 0 %></p>
                    </div>
                  </div>
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Hired</h5>
                      <p class="h3 text-success"><%= appStats.hired || 0 %></p>
                    </div>
                  </div>
                  <div class="col-md-3 col-6">
                    <div class="text-center mb-3">
                      <h5>Rejected</h5>
                      <p class="h3 text-danger"><%= appStats.rejected || 0 %></p>
                    </div>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
        <% } %>
        
        <div class="card">
          <div class="card-header">
            <h2 class="card-title">Payment History</h2>
          </div>
          <div class="card-body">
            <!-- <% 
              // Get user payment history
            //   const payments = await db.query(`
            //     SELECT p.*, j.title AS job_title
            //     FROM payments p
            //     LEFT JOIN jobs j ON p.job_id = j.id
            //     WHERE p.paid_by = $1 OR p.paid_to = $1
            //     ORDER BY p.created_at DESC
            //     LIMIT 10
            //   `, [userData.id]).then(res => res.rows);
            %> -->
            
            <% if (payments && payments.length > 0) { %>
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead>
                    <tr>
                      <th>Job</th>
                      <th>Type</th>
                      <th>Amount</th>
                      <th>Status</th>
                      <th>Date</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% payments.forEach(function(payment) { %>
                      <tr>
                        <td><%= payment.job_title || 'N/A' %></td>
                        <td>
                          <% if (payment.paid_by === userData.id) { %>
                            <span class="text-danger">Payment Out</span>
                          <% } else if (payment.paid_to === userData.id) { %>
                            <span class="text-success">Payment In</span>
                          <% } else { %>
                            <%= payment.payment_type %>
                          <% } %>
                        </td>
                        <td>$<%= parseFloat(payment.amount).toFixed(2) %></td>
                        <td>
                          <span class="badge badge-<%= payment.status === 'completed' ? 'success' : payment.status === 'pending' ? 'warning' : 'danger' %>">
                            <%= payment.status.charAt(0).toUpperCase() + payment.status.slice(1) %>
                          </span>
                        </td>
                        <td><%= new Date(payment.created_at).toLocaleDateString() %></td>
                      </tr>
                    <% }); %>
                  </tbody>
                </table>
              </div>
            <% } else { %>
              <p class="text-muted">No payment history found.</p>
            <% } %>
          </div>
        </div>
      <% } else { %>
        <div class="card">
          <div class="card-body">
            <div class="alert alert-warning">
              <p>No profile information found for this user.</p>
            </div>
          </div>
        </div>
      <% } %>
    </div>
  </div>
</div>
<style>
  .profile-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0 auto;
  }
</style>


=== END OF FILE: views/admin/user-details.ejs ===



=== FILE: views/admin/users.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">User Management</h1>
  
  <div class="card mb-4">
    <div class="card-header">
      <h2 class="card-title">Add Admin User</h2>
    </div>
    <div class="card-body">
      <form action="/admin/users/add-admin" method="POST">
        <div class="row">
          <div class="col-md-6">
            <div class="form-group">
              <label for="email" class="form-label">Email*</label>
              <input type="email" id="email" name="email" class="form-control" required>
            </div>
          </div>
          <div class="col-md-6">
            <div class="form-group">
              <label for="password" class="form-label">Password*</label>
              <input type="password" id="password" name="password" class="form-control" required>
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-6">
            <div class="form-group">
              <label for="firstName" class="form-label">First Name*</label>
              <input type="text" id="firstName" name="firstName" class="form-control" required>
            </div>
          </div>
          <div class="col-md-6">
            <div class="form-group">
              <label for="lastName" class="form-label">Last Name*</label>
              <input type="text" id="lastName" name="lastName" class="form-control" required>
            </div>
          </div>
        </div>
        
        <button type="submit" class="btn btn-primary">Add Admin</button>
      </form>
    </div>
  </div>
  
  <div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h2 class="card-title mb-0">Users</h2>
      <div>
        <input type="text" id="userSearch" class="form-control" placeholder="Search users...">
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-striped table-hover" id="usersTable">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Role</th>
              <th>Status</th>
              <th>Registered</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% users.forEach(function(user) { %>
              <tr>
                <td><%= user.full_name || 'N/A' %></td>
                <td><%= user.email %></td>
                <td>
                  <span class="badge badge-<%= 
                    user.role === 'admin' ? 'danger' : 
                    user.role === 'client' ? 'primary' : 'secondary' 
                  %>">
                    <%= user.role.charAt(0).toUpperCase() + user.role.slice(1) %>
                  </span>
                </td>
                <td>
                  <% if (user.role === 'freelancer') { %>
                    <span class="badge badge-<%= user.is_approved ? 'success' : 'warning' %>">
                      <%= user.is_approved ? 'Approved' : 'Pending' %>
                    </span>
                  <% } else { %>
                    <span class="badge badge-success">Active</span>
                  <% } %>
                </td>
                <td><%= new Date(user.created_at).toLocaleDateString() %></td>
                <td>
                  <a href="/admin/users/<%= user.id %>" class="btn btn-sm btn-light">View</a>
                  <% if (user.id !== currentUser.id) { %>
                    <form action="/admin/users/<%= user.id %>?_method=DELETE" method="POST" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this user?');">
                      <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                    </form>
                  <% } %>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('userSearch');
    const table = document.getElementById('usersTable');
    const rows = table.getElementsByTagName('tr');
    
    searchInput.addEventListener('keyup', function() {
      const searchText = searchInput.value.toLowerCase();
      
      for (let i = 1; i < rows.length; i++) {
        const row = rows[i];
        const rowText = row.textContent.toLowerCase();
        
        if (rowText.includes(searchText)) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      }
    });
  });
</script>

=== END OF FILE: views/admin/users.ejs ===



=== FILE: views/auth/login.ejs ===

<%- contentFor('body') %>

<div class="auth-container">
  <div class="auth-header">
    <h1>Login</h1>
    <p>Access your lance account</p>
  </div>
  
  <form action="/auth/login" method="POST" class="auth-form">
    <div class="form-group">
      <label for="email" class="form-label">Email</label>
      <input type="email" id="email" name="email" class="form-control" required>
    </div>
    
    <div class="form-group">
      <label for="password" class="form-label">Password</label>
      <input type="password" id="password" name="password" class="form-control" required>
    </div>
    
    <button type="submit" class="btn btn-primary btn-block">Login</button>
  </form>
  
  <div class="auth-divider">
    <span>OR</span>
  </div>
  
  <a href="/auth/google" class="gsi-material-button" role="button">
  <div class="gsi-material-button-state"></div>
  <div class="gsi-material-button-content-wrapper">
    <div class="gsi-material-button-icon">
       <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" xmlns:xlink="http://www.w3.org/1999/xlink" style="display: block;" width="20" height = 20>
        <path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path>
        <path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path>
        <path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path>
        <path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path>
        <path fill="none" d="M0 0h48v48H0z"></path>
      </svg>
    </div>
    <span class="gsi-material-button-contents">Sign in with Google</span>
    <span style="display: none;">Sign in with Google</span>
  </div>
</a>

  
  <div class="auth-links">
    <p>Don't have an account? <a href="/auth/register">Register</a></p>
  </div>
</div>

=== END OF FILE: views/auth/login.ejs ===



=== FILE: views/auth/register-client.ejs ===

<%- contentFor('body') %>

<div class="auth-container">
  <div class="auth-header">
    <h1>Register as Client</h1>
    <p>Create your client account to post jobs</p>
  </div>
  
  <form action="/auth/register/client" method="POST" class="auth-form" enctype="multipart/form-data">
    <div class="row">
      <div class="col-6">
        <div class="form-group">
          <label for="firstName" class="form-label">First Name*</label>
          <input type="text" id="firstName" name="firstName" class="form-control" required>
        </div>
      </div>
      
      <div class="col-6">
        <div class="form-group">
          <label for="lastName" class="form-label">Last Name*</label>
          <input type="text" id="lastName" name="lastName" class="form-control" required>
        </div>
      </div>
    </div>
    
    <div class="form-group">
      <label for="email" class="form-label">Email*</label>
      <input type="email" id="email" name="email" class="form-control" required>
    </div>
    
    <div class="row">
      <div class="col-6">
        <div class="form-group">
          <label for="password" class="form-label">Password*</label>
          <input type="password" id="password" name="password" class="form-control" required>
          <small class="form-text">Minimum 6 characters</small>
        </div>
      </div>
      
      <div class="col-6">
        <div class="form-group">
          <label for="confirmPassword" class="form-label">Confirm Password*</label>
          <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
        </div>
      </div>
    </div>
    
    <div class="form-group">
      <label for="companyName" class="form-label">Company Name</label>
      <input type="text" id="companyName" name="companyName" class="form-control">
    </div>
    
    <div class="form-group">
      <label for="phone" class="form-label">Phone Number</label>
      <input type="tel" id="phone" name="phone" class="form-control">
    </div>
    
    <div class="form-group">
      <label for="address" class="form-label">Address</label>
      <textarea id="address" name="address" class="form-control" rows="2"></textarea>
    </div>
    
    <div class="form-group">
      <label for="skills" class="form-label">Skills/Expertise</label>
      <input type="text" id="skills" name="skills" class="form-control">
      <small class="form-text">Separate skills with commas</small>
    </div>
    
    <div class="form-group">
      <label for="experience" class="form-label">Experience</label>
      <textarea id="experience" name="experience" class="form-control" rows="3"></textarea>
    </div>
    
    <div class="form-group">
      <label for="cv" class="form-label">Resume/CV</label>
      <input type="file" id="cv" name="cv" class="form-control">
      <small class="form-text">Upload PDF, DOC, or DOCX file (max 5MB)</small>
    </div>
    
    <button type="submit" class="btn btn-primary btn-block mt-4">Register</button>
  </form>
  
  <div class="auth-divider">
    <span>OR</span>
  </div>
  
  <a href="/auth/google" class="gsi-material-button" role="button">
  <div class="gsi-material-button-state"></div>
  <div class="gsi-material-button-content-wrapper">
    <div class="gsi-material-button-icon">
       <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" xmlns:xlink="http://www.w3.org/1999/xlink" style="display: block;" width="20" height = 20>
        <path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path>
        <path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path>
        <path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path>
        <path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path>
        <path fill="none" d="M0 0h48v48H0z"></path>
      </svg>
    </div>
    <span class="gsi-material-button-contents">Sign in with Google</span>
    <span style="display: none;">Sign in with Google</span>
  </div>
</a>
  
  <div class="auth-links">
    <p>Already have an account? <a href="/auth/login">Login</a></p>
  </div>
</div>

=== END OF FILE: views/auth/register-client.ejs ===



=== FILE: views/auth/register-freelancer.ejs ===

<%- contentFor('body') %>

<div class="auth-container">
  <div class="auth-header">
    <h1>Register as Freelancer</h1>
    <p>Create your freelancer account to find jobs</p>
  </div>
  
  <form action="/auth/register/freelancer" method="POST" class="auth-form" enctype="multipart/form-data">
    <div class="row">
      <div class="col-6">
        <div class="form-group">
          <label for="firstName" class="form-label">First Name*</label>
          <input type="text" id="firstName" name="firstName" class="form-control" required>
        </div>
      </div>
      
      <div class="col-6">
        <div class="form-group">
          <label for="lastName" class="form-label">Last Name*</label>
          <input type="text" id="lastName" name="lastName" class="form-control" required>
        </div>
      </div>
    </div>
    
    <div class="form-group">
      <label for="email" class="form-label">Email*</label>
      <input type="email" id="email" name="email" class="form-control" required>
    </div>
    
    <div class="row">
      <div class="col-6">
        <div class="form-group">
          <label for="password" class="form-label">Password*</label>
          <input type="password" id="password" name="password" class="form-control" required>
          <small class="form-text">Minimum 6 characters</small>
        </div>
      </div>
      
      <div class="col-6">
        <div class="form-group">
          <label for="confirmPassword" class="form-label">Confirm Password*</label>
          <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
        </div>
      </div>
    </div>
    
    <div class="form-group">
      <label for="phone" class="form-label">Phone Number</label>
      <input type="tel" id="phone" name="phone" class="form-control">
    </div>
    
    <div class="form-group">
      <label for="address" class="form-label">Address</label>
      <textarea id="address" name="address" class="form-control" rows="2"></textarea>
    </div>
    
    <div class="form-group">
      <label for="skills" class="form-label">Skills*</label>
      <input type="text" id="skills" name="skills" class="form-control" required>
      <small class="form-text">Separate skills with commas</small>
    </div>
    
    <div class="form-group">
      <label for="experience" class="form-label">Experience*</label>
      <textarea id="experience" name="experience" class="form-control" rows="3" required></textarea>
    </div>
    
    <div class="form-group">
      <label for="cv" class="form-label">Resume/CV*</label>
      <input type="file" id="cv" name="cv" class="form-control" required>
      <small class="form-text">Upload PDF, DOC, or DOCX file (max 5MB)</small>
    </div>
    
    <div class="form-group">
      <label for="clearance" class="form-label">Police Clearance Certificate*</label>
      <input type="file" id="clearance" name="clearance" class="form-control" required>
      <small class="form-text">Upload PDF, JPG, or PNG file (max 5MB)</small>
    </div>
    
    <div class="alert alert-info">
      <p><strong>Note:</strong> Your account will need to be approved by an administrator before you can start applying for jobs.</p>
    </div>
    
    <button type="submit" class="btn btn-primary btn-block mt-4">Register</button>
  </form>
  
  <div class="auth-divider">
    <span>OR</span>
  </div>
  
  <a href="/auth/google" class="gsi-material-button" role="button">
  <div class="gsi-material-button-state"></div>
  <div class="gsi-material-button-content-wrapper">
    <div class="gsi-material-button-icon">
       <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" xmlns:xlink="http://www.w3.org/1999/xlink" style="display: block;" width="20" height = 20>
        <path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path>
        <path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path>
        <path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path>
        <path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path>
        <path fill="none" d="M0 0h48v48H0z"></path>
      </svg>
    </div>
    <span class="gsi-material-button-contents">Sign in with Google</span>
    <span style="display: none;">Sign in with Google</span>
  </div>
</a>
  
  <div class="auth-links">
    <p>Already have an account? <a href="/auth/login">Login</a></p>
  </div>
</div>

=== END OF FILE: views/auth/register-freelancer.ejs ===



=== FILE: views/auth/register.ejs ===

<%- contentFor('body') %>

<div class="auth-container">
  <div class="auth-header">
    <h1>Create Account</h1>
    <p>Choose your account type</p>
  </div>
  
  <div class="row mt-4">
    <div class="col-6">
      <a href="/auth/register/client" class="card p-4 text-center h-100" style="display: block; text-decoration: none; color: inherit;">
        <h3 class="mb-3">Client</h3>
        <p>I'm looking to hire freelancers for my projects</p>
        <div class="mt-auto pt-3">
          <span class="btn btn-primary">Register as Client</span>
        </div>
      </a>
    </div>
    
    <div class="col-6">
      <a href="/auth/register/freelancer" class="card p-4 text-center h-100" style="display: block; text-decoration: none; color: inherit;">
        <h3 class="mb-3">Freelancer</h3>
        <p>I'm looking for freelance work opportunities</p>
        <div class="mt-auto pt-3">
          <span class="btn btn-secondary">Register as Freelancer</span>
        </div>
      </a>
    </div>
  </div>
  
  <div class="auth-divider mt-4">
    <span>OR</span>
  </div>
  
  <a href="/auth/google" class="gsi-material-button" role="button">
  <div class="gsi-material-button-state"></div>
  <div class="gsi-material-button-content-wrapper">
    <div class="gsi-material-button-icon">
       <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" xmlns:xlink="http://www.w3.org/1999/xlink" style="display: block;" width="20" height = 20>
        <path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path>
        <path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path>
        <path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path>
        <path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path>
        <path fill="none" d="M0 0h48v48H0z"></path>
      </svg>
    </div>
    <span class="gsi-material-button-contents">Sign in with Google</span>
    <span style="display: none;">Sign in with Google</span>
  </div>
</a>
  
  <div class="auth-links">
    <p>Already have an account? <a href="/auth/login">Login</a></p>
  </div>
</div>

=== END OF FILE: views/auth/register.ejs ===



=== FILE: views/client/dashboard.ejs ===

<%- contentFor('body') %>

<h1 class="mb-4">Client Dashboard</h1>

<div class="dashboard-stats">
  <div class="stat-card">
    <div class="stat-card-value"><%= jobCounts.total %></div>
    <div class="stat-card-label">Total Jobs</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= jobCounts.open %></div>
    <div class="stat-card-label">Open Jobs</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= jobCounts.inProgress %></div>
    <div class="stat-card-label">In Progress</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= jobCounts.completed %></div>
    <div class="stat-card-label">Completed</div>
  </div>
</div>

<div class="quick-actions mb-4">
  <a href="/jobs/create" class="btn btn-primary quick-action-btn">Post a Job</a>
  <a href="/client/jobs" class="btn btn-secondary quick-action-btn">Manage Jobs</a>
  <a href="/profile" class="btn btn-light quick-action-btn">Edit Profile</a>
  <a href="/jobs/browse" class="btn btn-light quick-action-btn">Browse Jobs</a>
</div>

<div class="dashboard-container">
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">Recent Jobs</h2>
      <a href="/client/jobs" class="btn btn-sm btn-primary">View All</a>
    </div>
    <div class="dashboard-card-body">
      <% if (jobs.length === 0) { %>
        <p class="text-center text-muted">You haven't posted any jobs yet.</p>
      <% } else { %>
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Title</th>
                <th>Budget</th>
                <th>Status</th>
                <th>Posted</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% jobs.forEach(function(job) { %>
                <tr>
                  <td><%= job.title %></td>
                  <td>$<%= parseFloat(job.budget).toFixed(2) %></td>
                  <td>
                    <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
                      <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
                    </span>
                  </td>
                  <td><%= new Date(job.created_at).toLocaleDateString() %></td>
                  <td>
                    <a href="/client/jobs/<%= job.id %>" class="btn btn-sm btn-light">View</a>
                    <% if (job.status === 'open') { %>
                      <a href="/client/jobs/<%= job.id %>/applications" class="btn btn-sm btn-primary">Applications</a>
                    <% } %>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>
    </div>
  </div>
  
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">Recent Applications</h2>
    </div>
    <div class="dashboard-card-body">
      <% if (applications.length === 0) { %>
        <p class="text-center text-muted">No recent applications to your jobs.</p>
      <% } else { %>
        <div class="activity-list">
          <% applications.forEach(function(application) { %>
            <div class="activity-item">
              <div class="d-flex justify-content-between">
                <div>
                  <strong><%= application.first_name %> <%= application.last_name %></strong> applied to <strong><%= application.job_title %></strong>
                </div>
                <span class="status-badge status-<%= application.status %>">
                  <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
                </span>
              </div>
              <div class="activity-time">
                <%= new Date(application.created_at).toLocaleString() %>
              </div>
            </div>
          <% }); %>
        </div>
        <div class="text-center mt-3">
          <a href="/client/jobs" class="btn btn-sm btn-light">View All Jobs</a>
        </div>
      <% } %>
    </div>
  </div>
</div>
<style>
  /* Dashboard Styles */
.dashboard-stats {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 1.5rem;
}

.stat-card {
  flex: 1 0 calc(25% - 20px);
  padding: 1.5rem;
  background: var(--glass-bg);
  backdrop-filter: blur(5px);
  border-radius: 12px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: var(--shadow);
  text-align: center;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
}

.stat-card-value {
  font-size: 2.2rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.stat-card-label {
  color: #6c757d;
  font-size: 0.95rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.quick-actions {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 1.5rem;
}

.quick-action-btn {
  flex: 1 0 calc(25% - 10px);
  padding: 0.75rem;
  background: linear-gradient(135deg, var(--primary-color) 0%, #5a52cc 100%);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  cursor: pointer;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.quick-action-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 12px rgba(108, 99, 255, 0.3);
  background: linear-gradient(135deg, #5a52cc 0%, var(--primary-color) 100%);
}

.quick-action-btn .badge {
  background-color: rgba(255, 255, 255, 0.2);
  color: white;
  padding: 0.2em 0.5em;
  font-size: 0.8em;
}

.dashboard-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  padding: 10px 0;
}

.dashboard-card {
  flex: 1 0 calc(50% - 20px);
  background: var(--glass-bg);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: var(--shadow);
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.dashboard-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

.dashboard-card-header {
  padding: 1.2rem;
  background: linear-gradient(135deg, var(--primary-light) 0%, #f0f3ff 100%);
  border-bottom: none;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dashboard-card-title {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--dark-color);
}

.dashboard-card-body {
  padding: 1.5rem;
}

.status-badge {
  display: inline-block;
  padding: 0.35em 0.6em;
  font-size: 0.8rem;
  font-weight: 600;
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: 20px;
  transition: transform 0.2s ease;
}

.status-badge:hover {
  transform: scale(1.05);
}

.status-open {
  background-color: var(--primary-color);
  color: white;
}

.status-in-progress {
  background-color: var(--warning-color);
  color: white;
}

.status-completed {
  background-color: var(--secondary-color);
  color: white;
}

.status-pending {
  background-color: #6c757d;
  color: white;
}

.status-hired {
  background-color: #17a2b8;
  color: white;
}

.status-rejected {
  background-color: var(--danger-color);
  color: white;
}

.list-group {
  list-style: none;
  padding: 0;
}

.list-group-item {
  padding: 0.75rem 1.25rem;
  background: rgba(255, 255, 255, 0.5);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  margin-bottom: 0.5rem;
  transition: background-color 0.2s ease;
}

.list-group-item:hover {
  background: rgba(108, 99, 255, 0.1);
}

.table-responsive {
  overflow-x: auto;
}

.table-hover tbody tr:hover {
  background-color: rgba(108, 99, 255, 0.05);
}

/* Responsive design */
@media (max-width: 992px) {
  .stat-card {
    flex: 1 0 calc(50% - 20px);
  }
  
  .quick-action-btn {
    flex: 1 0 calc(50% - 10px);
  }
}

@media (max-width: 768px) {
  .dashboard-card {
    flex: 1 0 calc(100% - 20px);
  }
}

@media (max-width: 576px) {
  .stat-card {
    flex: 1 0 calc(100% - 20px);
  }
  
  .quick-action-btn {
    flex: 1 0 calc(100% - 10px);
  }
}
</style>

=== END OF FILE: views/client/dashboard.ejs ===



=== FILE: views/client/job-applications.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="mb-4">
    <a href="/client/jobs" class="btn btn-light">← Back to Jobs</a>
  </div>

  <div class="card mb-4">
    <div class="card-header">
      <h1 class="card-title">Applications for: <%= job.title %></h1>
    </div>
    <div class="card-body">
      <div class="mb-4">
        <p><strong>Budget:</strong> $<%= parseFloat(job.budget).toFixed(2) %></p>
        <p><strong>Status:</strong> 
          <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
            <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
          </span>
        </p>
        <% if (job.deadline) { %>
          <p><strong>Deadline:</strong> <%= new Date(job.deadline).toLocaleDateString() %></p>
        <% } %>
      </div>
    </div>
  </div>

  <% if (applications.length === 0) { %>
    <div class="alert alert-info">
      <p>No applications have been received for this job yet.</p>
    </div>
  <% } else { %>
    <div class="row">
      <% applications.forEach(function(application) { %>
        <div class="col-md-6 mb-4">
          <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h3 class="card-title mb-0"><%= application.first_name %> <%= application.last_name %></h3>
              <span class="status-badge status-<%= application.status %>">
                <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
              </span>
            </div>
            <div class="card-body">
              <div class="mb-3">
                <h4>Skills:</h4>
                <div>
                  <% if (application.skills && application.skills.length > 0) { %>
                    <% application.skills.forEach(function(skill) { %>
                      <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                    <% }); %>
                  <% } else { %>
                    <p class="text-muted">No skills listed</p>
                  <% } %>
                </div>
              </div>
              
              <div class="mb-3">
                <h4>Motivation:</h4>
                <p><%= application.motivation %></p>
              </div>
              
              <div class="mb-3">
                <h4>Experience:</h4>
                <p><%= application.experience || 'No experience listed' %></p>
              </div>
              
              <% if (application.cv_path) { %>
                <div class="mb-3">
                  <a href="<%= application.cv_path %>" target="_blank" class="btn btn-sm btn-light">
                    View CV
                  </a>
                </div>
              <% } %>
              
              <p class="text-muted mb-0">
                Applied on <%= new Date(application.created_at).toLocaleString() %>
              </p>
            </div>
            
            <% if (job.status === 'open' && job.payment_status === 'paid' && application.status === 'pending') { %>
              <div class="card-footer">
                <form action="/client/jobs/<%= job.id %>/applications/<%= application.id %>/hire" method="POST">
                  <button type="submit" class="btn btn-success btn-block">Hire This Freelancer</button>
                </form>
              </div>
            <% } %>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>

  <% if (job.status !== 'open') { %>
    <div class="alert alert-warning mt-3">
      <p>This job is no longer accepting applications.</p>
    </div>
  <% } %>
</div>

=== END OF FILE: views/client/job-applications.ejs ===



=== FILE: views/client/job-details.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="mb-4">
    <a href="/client/jobs" class="btn btn-light">← Back to Jobs</a>
  </div>

  <div class="row">
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h1 class="card-title mb-0"><%= job.title %></h1>
          <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
            <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
          </span>
        </div>
        
        <div class="card-body">
          <div class="job-details mb-4">
            <div class="job-budget">
              <strong>Budget:</strong> $<%= parseFloat(job.budget).toFixed(2) %>
            </div>
            
            <% if (job.deadline) { %>
              <div class="job-deadline">
                <strong>Deadline:</strong> <%= new Date(job.deadline).toLocaleDateString() %>
              </div>
            <% } %>
            
            <div>
              <strong>Posted:</strong> <%= new Date(job.created_at).toLocaleDateString() %>
            </div>
            
            <div>
              <strong>Payment Status:</strong> 
              <span class="badge badge-<%= job.payment_status === 'paid' ? 'success' : 'warning' %>">
                <%= job.payment_status.charAt(0).toUpperCase() + job.payment_status.slice(1) %>
              </span>
            </div>
          </div>
          
          <div class="mb-4">
            <h3>Description</h3>
            <p><%= job.description %></p>
          </div>
          
          <% if (job.requirements) { %>
            <div class="mb-4">
              <h3>Requirements</h3>
              <p><%= job.requirements %></p>
            </div>
          <% } %>
          
          <% if (job.status === 'in-progress' && hiredFreelancer) { %>
            <div class="mt-4 p-3 bg-light rounded">
              <h3 class="mb-3">Hired Freelancer</h3>
              <p><strong>Name:</strong> <%= hiredFreelancer.first_name %> <%= hiredFreelancer.last_name %></p>
              
              <% if (hiredFreelancer.skills && hiredFreelancer.skills.length > 0) { %>
                <div class="mb-2">
                  <strong>Skills:</strong>
                  <div>
                    <% hiredFreelancer.skills.forEach(function(skill) { %>
                      <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                    <% }); %>
                  </div>
                </div>
              <% } %>
              
              <% if (hiredFreelancer.cv_path) { %>
                <p>
                  <a href="<%= hiredFreelancer.cv_path %>" target="_blank" class="btn btn-sm btn-light">
                    View CV/Resume
                  </a>
                </p>
              <% } %>
              
              <p class="text-muted mt-2">
                Hired on <%= new Date(hiredFreelancer.hired_at).toLocaleDateString() %>
              </p>
            </div>
          <% } %>
        </div>
      </div>
      
      <% if (job.status === 'in-progress' && completionStatus) { %>
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Job Progress</h3>
          </div>
          <div class="card-body">
            <p><strong>Status:</strong> In Progress</p>
            
            <div class="mb-3">
              <p><strong>Client confirmed:</strong> 
                <% if (completionStatus.client_confirmed) { %>
                  <span class="text-success">Yes</span>
                <% } else { %>
                  <span class="text-warning">Waiting</span>
                <% } %>
              </p>
              
              <p><strong>Freelancer confirmed:</strong> 
                <% if (completionStatus.freelancer_confirmed) { %>
                  <span class="text-success">Yes</span>
                <% } else { %>
                  <span class="text-warning">Waiting</span>
                <% } %>
              </p>
            </div>
            
            <% if (!completionStatus.client_confirmed) { %>
              <form action="/client/jobs/<%= job.id %>/complete" method="POST">
                <div class="alert alert-info mb-3">
                  <p>By marking this job as complete, you confirm that the work has been done satisfactorily and the freelancer should be paid.</p>
                </div>
                <button type="submit" class="btn btn-success">Mark as Complete</button>
              </form>
            <% } else { %>
              <div class="alert alert-info">
                <p>You have marked this job as complete. Waiting for the freelancer to confirm.</p>
              </div>
            <% } %>
          </div>
        </div>
        
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Report an Issue</h3>
          </div>
          <div class="card-body">
            <form action="/client/jobs/<%= job.id %>/report" method="POST">
              <input type="hidden" name="reportedUser" value="<%= hiredFreelancer ? hiredFreelancer.user_id : '' %>">
              
              <div class="form-group">
                <label for="issue" class="form-label">Describe the issue:</label>
                <textarea id="issue" name="issue" class="form-control" rows="3" required></textarea>
              </div>
              
              <button type="submit" class="btn btn-warning">Report Issue</button>
            </form>
          </div>
        </div>
      <% } %>
      
      <% if (job.status === 'completed') { %>
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Job Completion</h3>
          </div>
          <div class="card-body">
            <div class="alert alert-success">
              <p>This job has been completed successfully!</p>
              <% if (completionStatus && completionStatus.completed_at) { %>
                <p>Completed on: <%= new Date(completionStatus.completed_at).toLocaleString() %></p>
              <% } %>
            </div>
            
            <a href="/jobs/<%= job.id %>/invoice" class="btn btn-primary">Download Invoice</a>
          </div>
        </div>
      <% } %>
    </div>
    
    <div class="col-md-4">
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Job Actions</h3>
        </div>
        <div class="card-body">
          <% if (job.status === 'pending' && job.payment_status === 'unpaid') { %>
            <a href="/payments/job/<%= job.id %>" class="btn btn-success btn-block mb-2">Pay for Job Posting</a>
            <p class="text-muted small">Your job will be visible to freelancers after payment.</p>
          <% } %>
          
          <% if (job.status === 'open' && job.payment_status === 'paid') { %>
            <a href="/client/jobs/<%= job.id %>/applications" class="btn btn-primary btn-block mb-2">View Applications</a>
            <a href="/jobs/<%= job.id %>/edit" class="btn btn-secondary btn-block mb-2">Edit Job</a>
            <form action="/jobs/<%= job.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this job?');">
              <button type="submit" class="btn btn-danger btn-block">Delete Job</button>
            </form>
          <% } %>
          
          <% if (job.status === 'in-progress' || job.status === 'completed') { %>
            <a href="/jobs/<%= job.id %>/invoice" class="btn btn-info btn-block mb-2">Generate Invoice</a>
          <% } %>
        </div>
      </div>
      
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Application Status</h3>
        </div>
        <div class="card-body">
          <% if (job.status === 'open' && job.payment_status === 'paid') { %>
            <p>
              <strong>Applications:</strong> 
              <% if (applicationsCount && applicationsCount > 0) { %>
                <span class="badge badge-primary"><%= applicationsCount %></span>
              <% } else { %>
                <span class="badge badge-secondary">0</span>
              <% } %>
            </p>
            
            <% if (applicationsCount && applicationsCount > 0) { %>
              <a href="/client/jobs/<%= job.id %>/applications" class="btn btn-primary btn-block">View Applications</a>
            <% } else { %>
              <p class="text-muted">No applications received yet.</p>
            <% } %>
          <% } else if (job.status === 'in-progress') { %>
            <p class="text-success">
              <i class="fa fa-check-circle"></i> Freelancer hired and working on the job
            </p>
          <% } else if (job.status === 'completed') { %>
            <p class="text-success">
              <i class="fa fa-check-circle"></i> Job has been completed
            </p>
          <% } else if (job.status === 'pending') { %>
            <p class="text-warning">
              <i class="fa fa-clock-o"></i> Payment required to post job
            </p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

=== END OF FILE: views/client/job-details.ejs ===



=== FILE: views/client/job-form.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row justify-content-center">
    <div class="col-12 col-md-8">
      <div class="card">
        <div class="card-header">
          <h1 class="card-title text-center">
            <%= edit ? 'Edit Job' : 'Create New Job' %>
          </h1>
        </div>
        <div class="card-body">
          <form action="<%= edit ? `/jobs/${job.id}?_method=PUT` : '/jobs/create' %>" method="POST">
            <div class="form-group">
              <label for="title" class="form-label">Job Title*</label>
              <input 
                type="text" 
                id="title" 
                name="title" 
                class="form-control" 
                value="<%= edit ? job.title : '' %>" 
                required
              >
            </div>
            
            <div class="form-group">
              <label for="description" class="form-label">Job Description*</label>
              <textarea 
                id="description" 
                name="description" 
                class="form-control" 
                rows="5" 
                required
              ><%= edit ? job.description : '' %></textarea>
            </div>
            
            <div class="form-group">
              <label for="requirements" class="form-label">Requirements</label>
              <textarea 
                id="requirements" 
                name="requirements" 
                class="form-control" 
                rows="3"
              ><%= edit ? job.requirements : '' %></textarea>
            </div>
            
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="budget" class="form-label">Budget ($)*</label>
                  <input 
                    type="number" 
                    id="budget" 
                    name="budget" 
                    class="form-control" 
                    step="0.01" 
                    min="5" 
                    value="<%= edit ? job.budget : '' %>" 
                    required
                  >
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="form-group">
                  <label for="deadline" class="form-label">Deadline</label>
                  <input 
                    type="date" 
                    id="deadline" 
                    name="deadline" 
                    class="form-control" 
                    value="<%= edit && job.deadline ? new Date(job.deadline).toISOString().split('T')[0] : '' %>"
                  >
                </div>
              </div>
            </div>
            
            <div class="alert alert-info mt-3 mb-4">
              <p class="mb-0">
                <strong>Note:</strong> 
                <%= edit ? 'Changes to your job posting will be applied immediately.' : 'You will be redirected to payment after creating the job.' %>
              </p>
            </div>
            
            <div class="d-flex justify-content-between">
              <a href="/client/jobs" class="btn btn-light">Cancel</a>
              <button type="submit" class="btn btn-primary">
                <%= edit ? 'Update Job' : 'Create Job' %>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

=== END OF FILE: views/client/job-form.ejs ===



=== FILE: views/client/job-management.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="mb-4 d-flex justify-content-between align-items-center">
    <h1>My Jobs</h1>
    <a href="/jobs/create" class="btn btn-primary">Post New Job</a>
  </div>
  
  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h2 class="card-title mb-0">Job Management</h2>
      <div class="d-flex">
        <input type="text" id="jobSearch" class="form-control form-control-sm mr-2" placeholder="Search jobs...">
        <select id="statusFilter" class="form-control form-control-sm">
          <option value="all">All Statuses</option>
          <option value="open">Open</option>
          <option value="in-progress">In Progress</option>
          <option value="completed">Completed</option>
          <option value="pending">Pending</option>
        </select>
      </div>
    </div>
    <div class="card-body">
      <% if (jobs.length === 0) { %>
        <div class="alert alert-info">
          <p>You haven't posted any jobs yet.</p>
          <a href="/jobs/create" class="btn btn-primary mt-2">Post Your First Job</a>
        </div>
      <% } else { %>
        <div class="table-responsive">
          <table class="table table-hover" id="jobsTable">
            <thead>
              <tr>
                <th>Title</th>
                <th>Budget</th>
                <th>Status</th>
                <th>Payment</th>
                <th>Posted</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% jobs.forEach(function(job) { %>
                <tr data-status="<%= job.status %>">
                  <td><%= job.title %></td>
                  <td>$<%= parseFloat(job.budget).toFixed(2) %></td>
                  <td>
                    <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
                      <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
                    </span>
                  </td>
                  <td>
                    <span class="badge badge-<%= job.payment_status === 'paid' ? 'success' : 'warning' %>">
                      <%= job.payment_status.charAt(0).toUpperCase() + job.payment_status.slice(1) %>
                    </span>
                  </td>
                  <td><%= new Date(job.created_at).toLocaleDateString() %></td>
                  <td>
                    <div class="btn-group">
                      <a href="/client/jobs/<%= job.id %>" class="btn btn-sm btn-light">View</a>
                      
                      <% if (job.status === 'open' && job.payment_status === 'paid') { %>
                        <a href="/client/jobs/<%= job.id %>/applications" class="btn btn-sm btn-primary">Applications</a>
                      <% } %>
                      
                      <% if (job.status === 'open' && job.payment_status === 'unpaid') { %>
                        <a href="/payments/job/<%= job.id %>" class="btn btn-sm btn-success">Pay</a>
                      <% } %>
                      
                      <% if (job.status === 'open' && job.payment_status === 'paid') { %>
                        <a href="/jobs/<%= job.id %>/edit" class="btn btn-sm btn-secondary">Edit</a>
                        
                        <form action="/jobs/<%= job.id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this job?');" class="d-inline">
                          <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                        </form>
                      <% } %>
                      
                      <% if (job.status === 'completed') { %>
                        <a href="/jobs/<%= job.id %>/invoice" class="btn btn-sm btn-info">Invoice</a>
                      <% } %>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('jobSearch');
    const statusFilter = document.getElementById('statusFilter');
    const table = document.getElementById('jobsTable');
    const rows = table.getElementsByTagName('tr');
    
    // Combined filter function
    function filterTable() {
      const searchText = searchInput.value.toLowerCase();
      const statusValue = statusFilter.value;
      
      for (let i = 1; i < rows.length; i++) {
        const row = rows[i];
        const rowText = row.textContent.toLowerCase();
        const rowStatus = row.dataset.status;
        
        // Check both search text and status filter
        const matchesSearch = rowText.includes(searchText);
        const matchesStatus = statusValue === 'all' || rowStatus === statusValue;
        
        if (matchesSearch && matchesStatus) {
          row.style.display = '';
        } else {
          row.style.display = 'none';
        }
      }
    }
    
    // Add event listeners
    searchInput.addEventListener('keyup', filterTable);
    statusFilter.addEventListener('change', filterTable);
  });
</script>

=== END OF FILE: views/client/job-management.ejs ===



=== FILE: views/client/payment.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h1 class="card-title">Payment for Job</h1>
        </div>
        <div class="card-body">
          <div class="mb-4">
            <h3><%= job.title %></h3>
            <p class="text-muted">Budget: $<%= parseFloat(job.budget).toFixed(2) %></p>
          </div>

          <div class="alert alert-info mb-4">
            <p>Your job will be posted and visible to freelancers after payment is completed.</p>
          </div>

          <div id="payment-form" class="mb-4">
            <div class="form-group">
              <label for="card-frame" class="form-label">Payment Details</label>
              <div id="card-frame" class="p-3 border rounded"></div>
              <div id="payment-error" class="text-danger mt-2"></div>
            </div>
            
            <div class="mb-3">
              <p><strong>Total Amount: $<%= parseFloat(job.budget).toFixed(2) %></strong></p>
            </div>

            <button id="pay-button" class="btn btn-primary btn-lg">Pay Now</button>
            <div id="payment-processing" class="d-none mt-3">
              <p>Processing payment...</p>
              <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
              </div>
            </div>
          </div>

          <div id="payment-success" class="d-none">
            <div class="alert alert-success">
              <h4>Payment Successful!</h4>
              <p>Your job has been posted successfully.</p>
            </div>
            <a href="/client/jobs" class="btn btn-primary">View My Jobs</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://js.yoco.com/sdk/v1/yoco-sdk-web.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const yoco = new window.YocoSDK({
      publicKey: '<%= yocoPublicKey %>'
    });
    
    const payButton = document.getElementById('pay-button');
    const paymentForm = document.getElementById('payment-form');
    const paymentSuccess = document.getElementById('payment-success');
    const paymentProcessing = document.getElementById('payment-processing');
    const paymentError = document.getElementById('payment-error');
    
    // Create the card frame
    const cardFrame = yoco.inline({
      element: '#card-frame',
      layout: 'standard'
    });
    
    payButton.addEventListener('click', function(event) {
      event.preventDefault();
      payButton.disabled = true;
      paymentProcessing.classList.remove('d-none');
      paymentError.textContent = '';
      
      yoco.tokenize({
        name: '<%= user.profile.first_name %> <%= user.profile.last_name %>',
        callback: async function(result) {
          if (result.error) {
            payButton.disabled = false;
            paymentProcessing.classList.add('d-none');
            paymentError.textContent = result.error.message;
            return;
          }
          
          // Send token to the server
          try {
            const response = await fetch('/payments/job/<%= job.id %>', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                token: result.id
              })
            });
            
            const data = await response.json();
            
            if (data.success) {
              paymentForm.classList.add('d-none');
              paymentSuccess.classList.remove('d-none');
            } else {
              payButton.disabled = false;
              paymentProcessing.classList.add('d-none');
              paymentError.textContent = data.message || 'Payment failed. Please try again.';
            }
          } catch (error) {
            payButton.disabled = false;
            paymentProcessing.classList.add('d-none');
            paymentError.textContent = 'An error occurred. Please try again.';
          }
        }
      });
    });
  });
</script>

=== END OF FILE: views/client/payment.ejs ===



=== FILE: views/common/footer.ejs ===

<footer>
  <div class="container">
    <p>&copy; <%= new Date().getFullYear() %> lance. All rights reserved.</p>
    <p>Connecting clients with professional freelancers</p>
  </div>
</footer>

=== END OF FILE: views/common/footer.ejs ===



=== FILE: views/common/header.ejs ===

<header>
  <div class="container">
    <nav class="navbar">
      <a href="/" class="logo">Lance</a>
      
      <ul class="nav-links">
        <li><a href="/jobs/browse">Find Jobs</a></li>
        
        <% if (user) { %>
          <% if (user.role === 'client') { %>
            <li><a href="/client/dashboard">Dashboard</a></li>
            <li><a href="/client/jobs">My Jobs</a></li>
            <li><a href="/jobs/create">Post a Job</a></li>
          <% } else if (user.role === 'freelancer') { %>
            <li><a href="/freelancer/dashboard">Dashboard</a></li>
            <li><a href="/freelancer/applications">My Applications</a></li>
            <li><a href="/freelancer/jobs">Active Jobs</a></li>
          <% } else if (user.role === 'admin') { %>
            <li><a href="/admin/dashboard">Dashboard</a></li>
            <li><a href="/admin/users">Users</a></li>
            <li><a href="/admin/approvals">Approvals</a></li>
            <li><a href="/admin/reports">Reports</a></li>
          <% } %>
          
          <li class="user-dropdown">
            <a href="#"><%= user.profile ? (user.profile.first_name + ' ' + user.profile.last_name) : user.email %> ▼</a>
            <div class="dropdown-content">
              <a href="/profile">My Profile</a>
              <% if (user.role === 'client') { %>
                <a href="/client/jobs">My Jobs</a>
              <% } else if (user.role === 'freelancer') { %>
                <a href="/freelancer/applications">My Applications</a>
              <% } else if (user.role === 'admin') { %>
                <a href="/admin/stats">System Stats</a>
              <% } %>
              <a href="/auth/logout">Logout</a>
            </div>
          </li>
        <% } else { %>
          <li><a href="/auth/login">Login</a></li>
          <li><a href="/auth/register" class="btn btn-primary">Sign Up</a></li>
        <% } %>
      </ul>
    </nav>
  </div>
</header>

=== END OF FILE: views/common/header.ejs ===



=== FILE: views/common/layout.ejs ===

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Freelancer Management Platform</title>
  <link rel="stylesheet" href="/css/common.css">
  <% if (locals.cssFiles) { %>
    <% cssFiles.forEach(function(css) { %>
      <link rel="stylesheet" href="/css/<%= css %>">
    <% }); %>
  <% } %>
</head>
<body>
  <%- include('./header') %>

  <div class="container">
    <% if (success_msg && success_msg.length > 0) { %>
      <div class="alert alert-success">
        <%= success_msg %>
      </div>
    <% } %>

    <% if (error_msg && error_msg.length > 0) { %>
      <div class="alert alert-danger">
        <%= error_msg %>
      </div>
    <% } %>

    <% if (error && error.length > 0) { %>
      <div class="alert alert-danger">
        <%= error %>
      </div>
    <% } %>

    <%- body %>
  </div>

  <%- include('./footer') %>

  <% if (locals.jsFiles) { %>
    <% jsFiles.forEach(function(js) { %>
      <script src="/js/<%= js %>"></script>
    <% }); %>
  <% } %>
</body>
</html>

=== END OF FILE: views/common/layout.ejs ===



=== FILE: views/common/nav.ejs ===

<ul class="nav-links">
  <li><a href="/jobs/browse">Find Jobs</a></li>
  
  <% if (user) { %>
    <% if (user.role === 'client') { %>
      <li><a href="/client/dashboard">Dashboard</a></li>
      <li><a href="/client/jobs">My Jobs</a></li>
      <li><a href="/jobs/create">Post a Job</a></li>
    <% } else if (user.role === 'freelancer') { %>
      <li><a href="/freelancer/dashboard">Dashboard</a></li>
      <li><a href="/freelancer/applications">My Applications</a></li>
      <li><a href="/freelancer/jobs">Active Jobs</a></li>
    <% } else if (user.role === 'admin') { %>
      <li><a href="/admin/dashboard">Dashboard</a></li>
      <li><a href="/admin/users">Users</a></li>
      <li><a href="/admin/approvals">Approvals</a></li>
      <li><a href="/admin/reports">Reports</a></li>
    <% } %>
    
    <li class="user-dropdown">
      <a href="#"><%= user.profile ? (user.profile.first_name + ' ' + user.profile.last_name) : user.email %> ▼</a>
      <div class="dropdown-content">
        <a href="/profile">My Profile</a>
        <% if (user.role === 'client') { %>
          <a href="/client/jobs">My Jobs</a>
        <% } else if (user.role === 'freelancer') { %>
          <a href="/freelancer/applications">My Applications</a>
        <% } else if (user.role === 'admin') { %>
          <a href="/admin/stats">System Stats</a>
        <% } %>
        <a href="/auth/logout">Logout</a>
      </div>
    </li>
  <% } else { %>
    <li><a href="/auth/login">Login</a></li>
    <li><a href="/auth/register" class="btn btn-primary">Sign Up</a></li>
  <% } %>
</ul>

=== END OF FILE: views/common/nav.ejs ===



=== FILE: views/error.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card text-center">
        <div class="card-header">
          <h1 class="card-title">Error <%= status %></h1>
        </div>
        <div class="card-body">
          <div class="mb-4">
            <svg width="100" height="100" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4Z" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M15 9L9 15" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M9 9L15 15" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          
          <h2 class="mb-3">Oops! Something went wrong.</h2>
          <p class="mb-4"><%= message %></p>
          
          <div class="d-flex justify-content-center">
            <a href="/" class="btn btn-primary mr-3">Go to Homepage</a>
            <button onclick="history.back()" class="btn btn-light">Go Back</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

=== END OF FILE: views/error.ejs ===



=== FILE: views/freelancer/active-jobs.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">My Active Jobs</h1>
  
  <% if (jobs.length === 0) { %>
    <div class="alert alert-info">
      <p>You don't have any active jobs yet.</p>
      <a href="/jobs/browse" class="btn btn-primary mt-2">Find Jobs</a>
    </div>
  <% } else { %>
    <div class="row">
      <% jobs.forEach(function(job) { %>
        <div class="col-md-6 mb-4">
          <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h2 class="card-title mb-0"><%= job.title %></h2>
              <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
                <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
              </span>
            </div>
            <div class="card-body">
              <p><strong>Client:</strong> <%= job.client_first_name %> <%= job.client_last_name %></p>
              <p><strong>Budget:</strong> $<%= parseFloat(job.budget).toFixed(2) %></p>
              
              <div class="mb-3">
                <p><strong>Description:</strong></p>
                <p><%= job.description.length > 150 ? job.description.substring(0, 150) + '...' : job.description %></p>
              </div>
              
              <% if (job.status === 'in-progress' && job.completionStatus) { %>
                <div class="mb-3">
                  <p><strong>Completion Status:</strong></p>
                  <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                      Client confirmed
                      <% if (job.completionStatus.client_confirmed) { %>
                        <span class="badge badge-success">Yes</span>
                      <% } else { %>
                        <span class="badge badge-warning">Pending</span>
                      <% } %>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                      Freelancer confirmed
                      <% if (job.completionStatus.freelancer_confirmed) { %>
                        <span class="badge badge-success">Yes</span>
                      <% } else { %>
                        <span class="badge badge-warning">Pending</span>
                      <% } %>
                    </li>
                  </ul>
                </div>
                
                <% if (!job.completionStatus.freelancer_confirmed) { %>
                  <form action="/freelancer/jobs/<%= job.id %>/complete" method="POST" class="mb-3">
                    <button type="submit" class="btn btn-success">Mark as Complete</button>
                  </form>
                <% } %>
              <% } %>
              
              <% if (job.status === 'completed') { %>
                <div class="alert alert-success">
                  <p>This job has been completed successfully!</p>
                </div>
                
                <a href="/jobs/<%= job.id %>/invoice" class="btn btn-primary">Download Invoice</a>
              <% } %>
            </div>
            <div class="card-footer">
              <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">
                  Hired on <%= new Date(job.application_date).toLocaleDateString() %>
                </small>
                <a href="/freelancer/jobs/<%= job.id %>" class="btn btn-light">View Details</a>
              </div>
            </div>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>
</div>

=== END OF FILE: views/freelancer/active-jobs.ejs ===



=== FILE: views/freelancer/applications.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">My Applications</h1>
  
  <div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h2 class="card-title mb-0">Job Applications</h2>
      <div>
        <select id="statusFilter" class="form-control form-control-sm">
          <option value="all">All Statuses</option>
          <option value="pending">Pending</option>
          <option value="hired">Hired</option>
          <option value="rejected">Rejected</option>
        </select>
      </div>
    </div>
    <div class="card-body">
      <% if (applications.length === 0) { %>
        <div class="alert alert-info">
          <p>You haven't applied to any jobs yet.</p>
          <a href="/jobs/browse" class="btn btn-primary mt-2">Browse Jobs</a>
        </div>
      <% } else { %>
        <div class="table-responsive">
          <table class="table table-hover" id="applicationsTable">
            <thead>
              <tr>
                <th>Job Title</th>
                <th>Client</th>
                <th>Budget</th>
                <th>Status</th>
                <th>Applied On</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% applications.forEach(function(application) { %>
                <tr data-status="<%= application.status %>">
                  <td><%= application.title %></td>
                  <td>
                    <%= application.company_name || `${application.client_first_name} ${application.client_last_name}` %>
                  </td>
                  <td>$<%= parseFloat(application.budget).toFixed(2) %></td>
                  <td>
                    <span class="status-badge status-<%= application.status %>">
                      <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
                    </span>
                  </td>
                  <td><%= new Date(application.created_at).toLocaleDateString() %></td>
                  <td>
                    <a href="/freelancer/jobs/<%= application.job_id %>" class="btn btn-sm btn-light">View Details</a>
                    <% if (application.status === 'hired' && application.job_status === 'in-progress') { %>
                      <a href="/freelancer/jobs/<%= application.job_id %>" class="btn btn-sm btn-primary">Work on Job</a>
                    <% } %>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusFilter = document.getElementById('statusFilter');
    const table = document.getElementById('applicationsTable');
    
    if (statusFilter && table) {
      statusFilter.addEventListener('change', function() {
        const selectedStatus = this.value;
        const rows = table.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          if (selectedStatus === 'all' || row.dataset.status === selectedStatus) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }
  });
</script>

=== END OF FILE: views/freelancer/applications.ejs ===



=== FILE: views/freelancer/apply-job.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h1 class="card-title">Apply for Job</h1>
        </div>
        <div class="card-body">
          <div class="mb-4">
            <h3><%= job.title %></h3>
            <div class="text-muted mb-2">
              Budget: $<%= parseFloat(job.budget).toFixed(2) %>
              <% if (job.deadline) { %> 
                | Deadline: <%= new Date(job.deadline).toLocaleDateString() %>
              <% } %>
            </div>
            <p><%= job.description %></p>
          </div>
          
          <form action="/jobs/<%= job.id %>/apply" method="POST">
            <div class="form-group">
              <label for="motivation" class="form-label">Why are you the right person for this job?*</label>
              <textarea id="motivation" name="motivation" class="form-control" rows="6" required></textarea>
              <small class="form-text">Explain why you're interested and qualified for this job. The client will see this along with your profile.</small>
            </div>
            
            <div class="alert alert-info mb-4">
              <p class="mb-0">
                <strong>Note:</strong> The client will be able to see your profile details and CV.
              </p>
            </div>
            
            <div class="d-flex justify-content-between">
              <a href="/jobs/<%= job.id %>" class="btn btn-light">Cancel</a>
              <button type="submit" class="btn btn-primary">Submit Application</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

=== END OF FILE: views/freelancer/apply-job.ejs ===



=== FILE: views/freelancer/dashboard.ejs ===

<%- contentFor('body') %>

<h1 class="mb-4">Freelancer Dashboard</h1>

<div class="dashboard-stats">
  <div class="stat-card">
    <div class="stat-card-value"><%= counts.applications %></div>
    <div class="stat-card-label">Applications</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= counts.activeJobs %></div>
    <div class="stat-card-label">Active Jobs</div>
  </div>
  
  <div class="stat-card">
    <div class="stat-card-value"><%= counts.completedJobs %></div>
    <div class="stat-card-label">Completed</div>
  </div>
</div>

<div class="quick-actions mb-4">
  <a href="/jobs/browse" class="btn btn-primary quick-action-btn">Find Jobs</a>
  <a href="/freelancer/applications" class="btn btn-secondary quick-action-btn">My Applications</a>
  <a href="/freelancer/jobs" class="btn btn-light quick-action-btn">Active Jobs</a>
  <a href="/profile" class="btn btn-light quick-action-btn">Edit Profile</a>
</div>

<div class="dashboard-container">
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">Active Jobs</h2>
      <a href="/freelancer/jobs" class="btn btn-sm btn-primary">View All</a>
    </div>
    <div class="dashboard-card-body">
      <% if (activeJobs.length === 0) { %>
        <p class="text-center text-muted">You don't have any active jobs.</p>
      <% } else { %>
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Title</th>
                <th>Client</th>
                <th>Budget</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% activeJobs.forEach(function(job) { %>
                <tr>
                  <td><%= job.title %></td>
                  <td><%= job.client_first_name %> <%= job.client_last_name %></td>
                  <td>$<%= parseFloat(job.budget).toFixed(2) %></td>
                  <td>
                    <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
                      <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
                    </span>
                  </td>
                  <td>
                    <a href="/freelancer/jobs/<%= job.id %>" class="btn btn-sm btn-light">View</a>
                    <% if (job.status === 'in-progress') { %>
                      <form action="/freelancer/jobs/<%= job.id %>/complete" method="POST" style="display: inline;">
                        <button type="submit" class="btn btn-sm btn-success">Mark Complete</button>
                      </form>
                    <% } %>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>
    </div>
  </div>
  
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">Recent Applications</h2>
      <a href="/freelancer/applications" class="btn btn-sm btn-primary">View All</a>
    </div>
    <div class="dashboard-card-body">
      <% if (applications.length === 0) { %>
        <p class="text-center text-muted">You haven't applied to any jobs yet.</p>
      <% } else { %>
        <div class="activity-list">
          <% applications.forEach(function(application) { %>
            <div class="activity-item">
              <div class="d-flex justify-content-between">
                <div>
                  Applied to <strong><%= application.title %></strong> 
                  by <%= application.client_first_name %> <%= application.client_last_name %>
                </div>
                <span class="status-badge status-<%= application.status %>">
                  <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
                </span>
              </div>
              <div class="activity-time">
                <%= new Date(application.created_at).toLocaleString() %>
              </div>
            </div>
          <% }); %>
        </div>
      <% } %>
    </div>
  </div>
</div>

<div class="dashboard-container mt-4">
  <div class="dashboard-card">
    <div class="dashboard-card-header">
      <h2 class="dashboard-card-title">Available Jobs</h2>
      <a href="/jobs/browse" class="btn btn-sm btn-primary">View All</a>
    </div>
    <div class="dashboard-card-body">
      <% if (availableJobs.length === 0) { %>
        <p class="text-center text-muted">No available jobs matching your skills at the moment.</p>
      <% } else { %>
        <div class="job-list">
          <% availableJobs.forEach(function(job) { %>
            <div class="job-item">
              <h3 class="job-title"><a href="/jobs/<%= job.id %>"><%= job.title %></a></h3>
              <div class="job-company">
                <%= job.company_name || 'Individual Client' %>
              </div>
              <div class="job-details">
                <div class="job-budget">Budget: $<%= parseFloat(job.budget).toFixed(2) %></div>
                <% if (job.deadline) { %>
                  <div class="job-deadline">Deadline: <%= new Date(job.deadline).toLocaleDateString() %></div>
                <% } %>
              </div>
              <div class="job-description">
                <%= job.description.length > 150 ? job.description.substring(0, 150) + '...' : job.description %>
              </div>
              <div class="job-actions">
                <a href="/jobs/<%= job.id %>" class="btn btn-primary">View Job</a>
                <a href="/jobs/<%= job.id %>/apply" class="btn btn-secondary">Apply Now</a>
              </div>
            </div>
          <% }); %>
        </div>
      <% } %>
    </div>
  </div>
</div>
<style>
  /* Dashboard Styles */
  .dashboard-stats {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-bottom: 1.5rem;
  }

  .stat-card {
    flex: 1 0 calc(25% - 20px);
    padding: 1.5rem;
    background: var(--glass-bg);
    backdrop-filter: blur(5px);
    border-radius: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: var(--shadow);
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.12);
  }

  .stat-card-value {
    font-size: 2.2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: var(--primary-color);
  }

  .stat-card-label {
    color: #6c757d;
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .quick-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 1.5rem;
  }

  .quick-action-btn {
    flex: 1 0 calc(25% - 10px);
    padding: 0.75rem;
    background: linear-gradient(135deg, var(--primary-color) 0%, #5a52cc 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 0.95rem;
    font-weight: 500;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .quick-action-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 12px rgba(108, 99, 255, 0.3);
    background: linear-gradient(135deg, #5a52cc 0%, var(--primary-color) 100%);
  }

  .quick-action-btn .badge {
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
    padding: 0.2em 0.5em;
    font-size: 0.8em;
  }

  /* Adjust background for non-primary quick action buttons */
  a.btn-light.quick-action-btn {
    background: linear-gradient(135deg, #f5f7fa 0%, #e0e4e8 100%);
    color: var(--dark-color);
  }

  a.btn-light.quick-action-btn:hover {
    background: linear-gradient(135deg, #e0e4e8 0%, #f5f7fa 100%);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
  }

  a.btn-secondary.quick-action-btn {
    background: linear-gradient(135deg, var(--secondary-color) 0%, #009688 100%);
    color: white;
  }

  a.btn-secondary.quick-action-btn:hover {
    background: linear-gradient(135deg, #009688 0%, var(--secondary-color) 100%);
    box-shadow: 0 6px 12px rgba(0, 176, 155, 0.3);
  }

  .dashboard-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    padding: 10px 0;
  }

  .dashboard-card {
    flex: 1 0 calc(50% - 20px);
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: var(--shadow);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .dashboard-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
  }

  .dashboard-card-header {
    padding: 1.2rem;
    background: linear-gradient(135deg, var(--primary-light) 0%, #f0f3ff 100%);
    border-bottom: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .dashboard-card-title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--dark-color);
  }

  .dashboard-card-body {
    padding: 1.5rem;
  }

  .status-badge {
    display: inline-block;
    padding: 0.35em 0.6em;
    font-size: 0.8rem;
    font-weight: 600;
    line-height: 1;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 20px;
    transition: transform 0.2s ease;
  }

  .status-badge:hover {
    transform: scale(1.05);
  }

  .status-open {
    background-color: var(--primary-color);
    color: white;
  }

  .status-in-progress {
    background-color: var(--warning-color);
    color: white;
  }

  .status-completed {
    background-color: var(--secondary-color);
    color: white;
  }

  .status-pending {
    background-color: #6c757d;
    color: white;
  }

  .status-hired {
    background-color: #17a2b8;
    color: white;
  }

  .status-rejected {
    background-color: var(--danger-color);
    color: white;
  }

  .activity-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .activity-item {
    padding: 1rem 0;
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s ease;
  }

  .activity-item:hover {
    background-color: rgba(108, 99, 255, 0.05);
  }

  .activity-item:last-child {
    border-bottom: none;
  }

  .activity-time {
    font-size: 0.85rem;
    color: #6c757d;
    display: block;
    margin-top: 0.25rem;
  }

  .table-responsive {
    overflow-x: auto;
  }

  .table-hover tbody tr:hover {
    background-color: rgba(108, 99, 255, 0.05);
  }

  .text-center.mt-3 {
    margin-top: 1rem;
  }

  /* Responsive design */
  @media (max-width: 992px) {
    .stat-card {
      flex: 1 0 calc(50% - 20px);
    }
    
    .quick-action-btn {
      flex: 1 0 calc(50% - 10px);
    }
  }

  @media (max-width: 768px) {
    .dashboard-card {
      flex: 1 0 calc(100% - 20px);
    }
  }

  @media (max-width: 576px) {
    .stat-card {
      flex: 1 0 calc(100% - 20px);
    }
    
    .quick-action-btn {
      flex: 1 0 calc(100% - 10px);
    }
  }
</style>

=== END OF FILE: views/freelancer/dashboard.ejs ===



=== FILE: views/freelancer/job-details.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row">
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h1 class="card-title mb-0"><%= job.title %></h1>
          <span class="status-badge status-<%= job.status.replace(' ', '-') %>">
            <%= job.status.charAt(0).toUpperCase() + job.status.slice(1) %>
          </span>
        </div>
        
        <div class="card-body">
          <div class="job-company mb-3">
            <strong>Client:</strong> <%= job.company_name || `${job.client_first_name} ${job.client_last_name}` %>
          </div>
          
          <div class="job-details mb-4">
            <div class="job-budget">
              <strong>Budget:</strong> $<%= parseFloat(job.budget).toFixed(2) %>
            </div>
            
            <% if (job.deadline) { %>
              <div class="job-deadline">
                <strong>Deadline:</strong> <%= new Date(job.deadline).toLocaleDateString() %>
              </div>
            <% } %>
            
            <div>
              <strong>Posted:</strong> <%= new Date(job.created_at).toLocaleDateString() %>
            </div>
          </div>
          
          <div class="mb-4">
            <h3>Description</h3>
            <p><%= job.description %></p>
          </div>
          
          <% if (job.requirements) { %>
            <div class="mb-4">
              <h3>Requirements</h3>
              <p><%= job.requirements %></p>
            </div>
          <% } %>
          
          <% if (job.client_skills && job.client_skills.length > 0) { %>
            <div class="mb-4">
              <h3>Client Skills</h3>
              <div>
                <% job.client_skills.forEach(function(skill) { %>
                  <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                <% }); %>
              </div>
            </div>
          <% } %>
          
          <% if (job.client_experience) { %>
            <div>
              <h3>Client Experience</h3>
              <p><%= job.client_experience %></p>
            </div>
          <% } %>
        </div>
      </div>
      
      <% if (job.status === 'in-progress' && application && application.status === 'hired') { %>
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Job Progress</h3>
          </div>
          <div class="card-body">
            <p><strong>Status:</strong> In Progress</p>
            
            <% if (completionStatus) { %>
              <div class="mb-3">
                <p><strong>Client confirmed:</strong> 
                  <% if (completionStatus.client_confirmed) { %>
                    <span class="text-success">Yes</span>
                  <% } else { %>
                    <span class="text-warning">Waiting</span>
                  <% } %>
                </p>
                
                <p><strong>Freelancer confirmed:</strong> 
                  <% if (completionStatus.freelancer_confirmed) { %>
                    <span class="text-success">Yes</span>
                  <% } else { %>
                    <span class="text-warning">Waiting</span>
                  <% } %>
                </p>
              </div>
              
              <% if (!completionStatus.freelancer_confirmed) { %>
                <form action="/freelancer/jobs/<%= job.id %>/complete" method="POST">
                  <button type="submit" class="btn btn-success">Mark as Complete</button>
                </form>
              <% } else { %>
                <div class="alert alert-info">
                  You have marked this job as complete. Waiting for the client to confirm.
                </div>
              <% } %>
            <% } %>
          </div>
        </div>
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Report an Issue</h3>
          </div>
          <div class="card-body">
            <form action="/freelancer/jobs/<%= job.id %>/report" method="POST">
              <input type="hidden" name="reportedUser" value="<%= job.client_id %>">
              
              <div class="form-group">
                <label for="issue" class="form-label">Describe the issue:</label>
                <textarea id="issue" name="issue" class="form-control" rows="3" required></textarea>
              </div>
              
              <button type="submit" class="btn btn-warning">Report Issue</button>
            </form>
          </div>
        </div>
      <% } %>
    </div>
    
    <div class="col-md-4">
      <div class="card mb-4">
        <div class="card-header">
          <h3 class="card-title">Application Status</h3>
        </div>
        <div class="card-body">
          <% if (!application) { %>
            <% if (job.status === 'open') { %>
              <p>You haven't applied to this job yet.</p>
              <a href="/jobs/<%= job.id %>/apply" class="btn btn-primary btn-block">Apply for this Job</a>
            <% } else { %>
              <p>This job is no longer accepting applications.</p>
            <% } %>
          <% } else { %>
            <p class="mb-3">
              <strong>Status:</strong> 
              <span class="status-badge status-<%= application.status %>">
                <%= application.status.charAt(0).toUpperCase() + application.status.slice(1) %>
              </span>
            </p>
            
            <p class="mb-3">
              <strong>Applied:</strong> <%= new Date(application.created_at).toLocaleString() %>
            </p>
            
            <div class="mb-3">
              <h4>Your Motivation:</h4>
              <p><%= application.motivation %></p>
            </div>
            
            <% if (application.status === 'hired') { %>
              <div class="alert alert-success">
                <p>Congratulations! You have been hired for this job.</p>
                
                <% if (job.status === 'completed') { %>
                  <p>This job has been completed.</p>
                <% } %>
              </div>
            <% } else if (application.status === 'rejected') { %>
              <div class="alert alert-danger">
                <p>Your application was not selected for this job.</p>
              </div>
            <% } else { %>
              <div class="alert alert-info">
                <p>Your application is awaiting client review.</p>
              </div>
            <% } %>
          <% } %>
        </div>
      </div>
      
      <% if (job.status === 'completed' && application && application.status === 'hired') { %>
        <div class="card mb-4">
          <div class="card-header">
            <h3 class="card-title">Job Completion</h3>
          </div>
          <div class="card-body">
            <div class="alert alert-success">
              <p>This job has been completed successfully!</p>
            </div>
            
            <a href="/jobs/<%= job.id %>/invoice" class="btn btn-primary btn-block">Download Invoice</a>
          </div>
        </div>
      <% } %>
      
      <div class="card">
        <div class="card-header">
          <h3 class="card-title">Actions</h3>
        </div>
        <div class="card-body">
          <a href="/jobs/browse" class="btn btn-light btn-block">Back to Jobs</a>
          <a href="/freelancer/dashboard" class="btn btn-light btn-block">Dashboard</a>
        </div>
      </div>
    </div>
  </div>
</div>

=== END OF FILE: views/freelancer/job-details.ejs ===



=== FILE: views/freelancer/jobs.ejs ===

<%- contentFor('body') %>

<div class="container">
  <h1 class="mb-4">Available Jobs</h1>
  
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="form-group">
        <input type="text" id="jobSearch" class="form-control" placeholder="Search jobs...">
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="form-group">
        <select id="jobSort" class="form-control">
          <option value="latest">Latest First</option>
          <option value="budget-high">Highest Budget</option>
          <option value="budget-low">Lowest Budget</option>
          <option value="deadline">Closest Deadline</option>
        </select>
      </div>
    </div>
  </div>
  
  <% if (jobs.length === 0) { %>
    <div class="alert alert-info">
      <p>No jobs available at the moment.</p>
    </div>
  <% } else { %>
    <div class="job-list" id="jobContainer">
      <% jobs.forEach(function(job) { %>
        <div class="job-item" data-budget="<%= job.budget %>" data-date="<%= job.created_at %>" data-deadline="<%= job.deadline || '9999-12-31' %>">
          <h3 class="job-title"><a href="/jobs/<%= job.id %>"><%= job.title %></a></h3>
          <div class="job-company">
            <%= job.company_name || `${job.first_name} ${job.last_name}` %>
          </div>
          <div class="job-details">
            <div class="job-budget">Budget: $<%= parseFloat(job.budget).toFixed(2) %></div>
            <% if (job.deadline) { %>
              <div class="job-deadline">Deadline: <%= new Date(job.deadline).toLocaleDateString() %></div>
            <% } %>
          </div>
          <div class="job-description">
            <%= job.description.length > 200 ? job.description.substring(0, 200) + '...' : job.description %>
          </div>
          <div class="job-actions">
            <a href="/jobs/<%= job.id %>" class="btn btn-primary">View Details</a>
            <a href="/jobs/<%= job.id %>/apply" class="btn btn-secondary">Apply Now</a>
          </div>
        </div>
      <% }); %>
    </div>
  <% } %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('jobSearch');
    const sortSelect = document.getElementById('jobSort');
    const jobContainer = document.getElementById('jobContainer');
    const jobItems = document.querySelectorAll('.job-item');
    
    // Search functionality
    searchInput.addEventListener('keyup', function() {
      const searchText = searchInput.value.toLowerCase();
      
      jobItems.forEach(function(item) {
        const jobText = item.textContent.toLowerCase();
        
        if (jobText.includes(searchText)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
    
    // Sort functionality
    sortSelect.addEventListener('change', function() {
      const sortValue = sortSelect.value;
      const jobsArray = Array.from(jobItems);
      
      jobsArray.sort(function(a, b) {
        if (sortValue === 'latest') {
          return new Date(b.dataset.date) - new Date(a.dataset.date);
        } else if (sortValue === 'budget-high') {
          return parseFloat(b.dataset.budget) - parseFloat(a.dataset.budget);
        } else if (sortValue === 'budget-low') {
          return parseFloat(a.dataset.budget) - parseFloat(b.dataset.budget);
        } else if (sortValue === 'deadline') {
          return new Date(a.dataset.deadline) - new Date(b.dataset.deadline);
        }
      });
      
      // Remove all existing items
      jobItems.forEach(function(item) {
        item.remove();
      });
      
      // Append sorted items
      jobsArray.forEach(function(item) {
        jobContainer.appendChild(item);
      });
    });
  });
</script>

=== END OF FILE: views/freelancer/jobs.ejs ===



=== FILE: views/index.ejs ===

<%- contentFor('body') %>

<!-- Hero Section -->
<div class="hero bg-primary p-5 mb-5">
  <div class="row align-items-center">
    <div class="col-12 col-md-6">
      <h1 class="mb-3">Find the Perfect Freelancer for Your Project</h1>
      <p class="mb-4">Connect with skilled professionals, post jobs, and get your projects done efficiently.</p>
      <div class="d-flex">
        <% if (!user) { %>
          <a href="/auth/register" class="btn btn-primary mr-3">Sign Up</a>
          <a href="/auth/login" class="btn btn-secondary">Login</a>
        <% } else if (user.role === 'client') { %>
          <a href="/jobs/create" class="btn btn-primary mr-3">Post a Job</a>
          <a href="/client/dashboard" class="btn btn-secondary">My Dashboard</a>
        <% } else if (user.role === 'freelancer') { %>
          <a href="/jobs/browse" class="btn btn-primary mr-3">Find Jobs</a>
          <a href="/freelancer/dashboard" class="btn btn-secondary">My Dashboard</a>
        <% } %>
      </div>
    </div>
    <div class="col-12 col-md-6 text-center mt-4 mt-md-0">
      <img src="https://via.placeholder.com/600x400" alt="Freelancer Platform" class="img-fluid rounded shadow">
    </div>
  </div>
</div>

<!-- How It Works Section -->
<section class="how-it-works container">
  <div class="row mb-5">
    <div class="col-12 text-center mb-4">
      <h2>How It Works</h2>
      <p class="text-muted">Our platform makes it easy to connect clients and freelancers</p>
    </div>
    
    <div class="col-12 col-md-4 mb-4">
      <div class="card h-100">
        <div class="card-body text-center">
          <h3 class="card-title">1. Post a Job</h3>
          <p class="card-text">Clients can post jobs with details about their requirements and budget.</p>
        </div>
      </div>
    </div>
    
    <div class="col-12 col-md-4 mb-4">
      <div class="card h-100">
        <div class="card-body text-center">
          <h3 class="card-title">2. Find Talent</h3>
          <p class="card-text">Freelancers apply with their qualifications and you choose the best fit.</p>
        </div>
      </div>
    </div>
    
    <div class="col-12 col-md-4 mb-4">
      <div class="card h-100">
        <div class="card-body text-center">
          <h3 class="card-title">3. Complete Projects</h3>
          <p class="card-text">Work together efficiently and securely through our platform.</p>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Featured Categories Section -->
<section class="featured-categories bg-light p-4">
  <div class="container">
    <div class="row mb-5">
      <div class="col-12 text-center mb-4">
        <h2>Featured Categories</h2>
        <p class="text-muted">Explore popular job categories on our platform</p>
      </div>
      
      <div class="col-6 col-md-3 mb-3">
        <div class="card p-3 text-center">
          <h4>Web Development</h4>
        </div>
      </div>
      
      <div class="col-6 col-md-3 mb-3">
        <div class="card p-3 text-center">
          <h4>Design</h4>
        </div>
      </div>
      
      <div class="col-6 col-md-3 mb-3">
        <div class="card p-3 text-center">
          <h4>Writing</h4>
        </div>
      </div>
      
      <div class="col-6 col-md-3 mb-3">
        <div class="card p-3 text-center">
          <h4>Marketing</h4>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Join Community Section -->
<section class="join-community">
  <div class="container">
    <div class="row">
      <div class="col-12 text-center mb-4">
        <h2>Join Our Community Today</h2>
        <p class="text-muted mb-4">Start hiring or working on projects in minutes</p>
        
        <% if (!user) { %>
          <a href="/auth/register/client" class="btn btn-primary mr-3">Register as Client</a>
          <a href="/auth/register/freelancer" class="btn btn-secondary">Register as Freelancer</a>
        <% } else { %>
          <a href="/jobs/browse" class="btn btn-primary">Explore Jobs</a>
        <% } %>
      </div>
    </div>
  </div>
</section>

=== END OF FILE: views/index.ejs ===



=== FILE: views/profile/admin-profile.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row">
    <div class="col-md-4 mb-4">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Profile</h2>
        </div>
        <div class="card-body">
          <div class="text-center mb-4">
            <div class="profile-image mb-3" style="background-color: #e74c3c;">
              <span class="profile-initial">
                <%= user.profile.first_name.charAt(0) + user.profile.last_name.charAt(0) %>
              </span>
            </div>
            <h3><%= user.profile.first_name %> <%= user.profile.last_name %></h3>
            <p class="text-muted"><%= user.email %></p>
            
            <p class="badge badge-danger">Administrator</p>
          </div>
          
          <div class="mb-3">
            <h4>Contact</h4>
            <p><strong>Email:</strong> <%= user.email %></p>
          </div>
          
          <div>
            <h4>Quick Links</h4>
            <div class="list-group">
              <a href="/admin/dashboard" class="list-group-item list-group-item-action">Dashboard</a>
              <a href="/admin/users" class="list-group-item list-group-item-action">User Management</a>
              <a href="/admin/approvals" class="list-group-item list-group-item-action">Freelancer Approvals</a>
              <a href="/admin/reports" class="list-group-item list-group-item-action">Issue Reports</a>
              <a href="/admin/stats" class="list-group-item list-group-item-action">System Statistics</a>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header">
          <h2 class="card-title">Edit Profile</h2>
        </div>
        <div class="card-body">
          <form action="/profile/admin?_method=PUT" method="POST">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="firstName" class="form-label">First Name*</label>
                  <input type="text" id="firstName" name="firstName" class="form-control" value="<%= user.profile.first_name %>" required>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="form-group">
                  <label for="lastName" class="form-label">Last Name*</label>
                  <input type="text" id="lastName" name="lastName" class="form-control" value="<%= user.profile.last_name %>" required>
                </div>
              </div>
            </div>
            
            <button type="submit" class="btn btn-primary">Update Profile</button>
          </form>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Change Password</h2>
        </div>
        <div class="card-body">
          <form action="/profile/change-password" method="POST">
            <div class="form-group">
              <label for="currentPassword" class="form-label">Current Password*</label>
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
            </div>
            
            <div class="form-group">
              <label for="newPassword" class="form-label">New Password*</label>
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <small class="form-text">Minimum 6 characters</small>
            </div>
            
            <div class="form-group">
              <label for="confirmPassword" class="form-label">Confirm New Password*</label>
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
            </div>
            
            <button type="submit" class="btn btn-primary">Change Password</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .profile-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: var(--danger-color);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0 auto;
  }
</style>

=== END OF FILE: views/profile/admin-profile.ejs ===



=== FILE: views/profile/client-profile.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row">
    <div class="col-md-4 mb-4">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Profile</h2>
        </div>
        <div class="card-body">
          <div class="text-center mb-4">
            <div class="profile-image mb-3">
              <span class="profile-initial">
                <%= user.profile.first_name.charAt(0) + user.profile.last_name.charAt(0) %>
              </span>
            </div>
            <h3><%= user.profile.first_name %> <%= user.profile.last_name %></h3>
            <p class="text-muted"><%= user.email %></p>
            
            <p class="badge badge-primary">Client</p>
            <% if (user.profile.company_name) { %>
              <p class="text-muted"><%= user.profile.company_name %></p>
            <% } %>
          </div>
          
          <div class="mb-3">
            <h4>Skills & Expertise</h4>
            <div>
              <% if (user.profile.skills && user.profile.skills.length > 0) { %>
                <% user.profile.skills.forEach(function(skill) { %>
                  <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                <% }); %>
              <% } else { %>
                <p class="text-muted">No skills listed</p>
              <% } %>
            </div>
          </div>
          
          <div class="mb-3">
            <h4>Contact</h4>
            <p><strong>Email:</strong> <%= user.email %></p>
            <p><strong>Phone:</strong> <%= user.profile.phone || 'Not provided' %></p>
          </div>
          
          <div>
            <h4>Document</h4>
            <% if (user.profile.cv_path) { %>
              <a href="<%= user.profile.cv_path %>" target="_blank" class="btn btn-sm btn-light">
                View CV/Resume
              </a>
            <% } else { %>
              <p class="text-muted">No CV/Resume uploaded</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header">
          <h2 class="card-title">Edit Profile</h2>
        </div>
        <div class="card-body">
          <form action="/profile/client?_method=PUT" method="POST" enctype="multipart/form-data">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="firstName" class="form-label">First Name*</label>
                  <input type="text" id="firstName" name="firstName" class="form-control" value="<%= user.profile.first_name %>" required>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="form-group">
                  <label for="lastName" class="form-label">Last Name*</label>
                  <input type="text" id="lastName" name="lastName" class="form-control" value="<%= user.profile.last_name %>" required>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="companyName" class="form-label">Company Name</label>
              <input type="text" id="companyName" name="companyName" class="form-control" value="<%= user.profile.company_name || '' %>">
            </div>
            
            <div class="form-group">
              <label for="phone" class="form-label">Phone Number</label>
              <input type="tel" id="phone" name="phone" class="form-control" value="<%= user.profile.phone || '' %>">
            </div>
            
            <div class="form-group">
              <label for="address" class="form-label">Address</label>
              <textarea id="address" name="address" class="form-control" rows="2"><%= user.profile.address || '' %></textarea>
            </div>
            
            <div class="form-group">
              <label for="skills" class="form-label">Skills/Expertise</label>
              <input type="text" id="skills" name="skills" class="form-control" value="<%= user.profile.skills ? user.profile.skills.join(', ') : '' %>">
              <small class="form-text">Separate skills with commas</small>
            </div>
            
            <div class="form-group">
              <label for="experience" class="form-label">Experience</label>
              <textarea id="experience" name="experience" class="form-control" rows="4"><%= user.profile.experience || '' %></textarea>
            </div>
            
            <div class="form-group">
              <label for="cv" class="form-label">Update Resume/CV</label>
              <input type="file" id="cv" name="cv" class="form-control">
              <small class="form-text">Upload PDF, DOC, or DOCX file (max 5MB). Leave empty to keep current file.</small>
            </div>
            
            <button type="submit" class="btn btn-primary">Update Profile</button>
          </form>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Change Password</h2>
        </div>
        <div class="card-body">
          <form action="/profile/change-password" method="POST">
            <div class="form-group">
              <label for="currentPassword" class="form-label">Current Password*</label>
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
            </div>
            
            <div class="form-group">
              <label for="newPassword" class="form-label">New Password*</label>
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <small class="form-text">Minimum 6 characters</small>
            </div>
            
            <div class="form-group">
              <label for="confirmPassword" class="form-label">Confirm New Password*</label>
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
            </div>
            
            <button type="submit" class="btn btn-primary">Change Password</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .profile-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0 auto;
  }
</style>

=== END OF FILE: views/profile/client-profile.ejs ===



=== FILE: views/profile/freelancer-profile.ejs ===

<%- contentFor('body') %>

<div class="container">
  <div class="row">
    <div class="col-md-4 mb-4">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Profile</h2>
        </div>
        <div class="card-body">
          <div class="text-center mb-4">
            <div class="profile-image mb-3">
              <span class="profile-initial">
                <%= user.profile.first_name.charAt(0) + user.profile.last_name.charAt(0) %>
              </span>
            </div>
            <h3><%= user.profile.first_name %> <%= user.profile.last_name %></h3>
            <p class="text-muted"><%= user.email %></p>
            
            <p class="badge badge-primary">Freelancer</p>
            <p class="badge badge-<%= user.profile.is_approved ? 'success' : 'warning' %>">
              <%= user.profile.is_approved ? 'Approved' : 'Pending Approval' %>
            </p>
          </div>
          
          <div class="mb-3">
            <h4>Skills</h4>
            <div>
              <% if (user.profile.skills && user.profile.skills.length > 0) { %>
                <% user.profile.skills.forEach(function(skill) { %>
                  <span class="badge badge-primary mr-2 mb-2"><%= skill %></span>
                <% }); %>
              <% } else { %>
                <p class="text-muted">No skills listed</p>
              <% } %>
            </div>
          </div>
          
          <div class="mb-3">
            <h4>Contact</h4>
            <p><strong>Email:</strong> <%= user.email %></p>
            <p><strong>Phone:</strong> <%= user.profile.phone || 'Not provided' %></p>
          </div>
          
          <div>
            <h4>Documents</h4>
            <% if (user.profile.cv_path) { %>
              <a href="<%= user.profile.cv_path %>" target="_blank" class="btn btn-sm btn-light mb-2">
                View CV
              </a>
            <% } else { %>
              <p class="text-muted">No CV uploaded</p>
            <% } %>
            
            <% if (user.profile.clearance_path) { %>
              <a href="<%= user.profile.clearance_path %>" target="_blank" class="btn btn-sm btn-light">
                View Police Clearance
              </a>
            <% } else { %>
              <p class="text-muted">No clearance certificate uploaded</p>
            <% } %>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header">
          <h2 class="card-title">Edit Profile</h2>
        </div>
        <div class="card-body">
          <form action="/profile/freelancer?_method=PUT" method="POST" enctype="multipart/form-data">
            <div class="row">
              <div class="col-md-6">
                <div class="form-group">
                  <label for="firstName" class="form-label">First Name*</label>
                  <input type="text" id="firstName" name="firstName" class="form-control" value="<%= user.profile.first_name %>" required>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="form-group">
                  <label for="lastName" class="form-label">Last Name*</label>
                  <input type="text" id="lastName" name="lastName" class="form-control" value="<%= user.profile.last_name %>" required>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="phone" class="form-label">Phone Number</label>
              <input type="tel" id="phone" name="phone" class="form-control" value="<%= user.profile.phone || '' %>">
            </div>
            
            <div class="form-group">
              <label for="address" class="form-label">Address</label>
              <textarea id="address" name="address" class="form-control" rows="2"><%= user.profile.address || '' %></textarea>
            </div>
            
            <div class="form-group">
              <label for="skills" class="form-label">Skills*</label>
              <input type="text" id="skills" name="skills" class="form-control" value="<%= user.profile.skills ? user.profile.skills.join(', ') : '' %>" required>
              <small class="form-text">Separate skills with commas</small>
            </div>
            
            <div class="form-group">
              <label for="experience" class="form-label">Experience*</label>
              <textarea id="experience" name="experience" class="form-control" rows="4" required><%= user.profile.experience || '' %></textarea>
            </div>
            
            <div class="form-group">
              <label for="cv" class="form-label">Update Resume/CV</label>
              <input type="file" id="cv" name="cv" class="form-control">
              <small class="form-text">Upload PDF, DOC, or DOCX file (max 5MB). Leave empty to keep current CV.</small>
            </div>
            
            <div class="form-group">
              <label for="clearance" class="form-label">Update Police Clearance Certificate</label>
              <input type="file" id="clearance" name="clearance" class="form-control">
              <small class="form-text">Upload PDF, JPG, or PNG file (max 5MB). Leave empty to keep current certificate.</small>
            </div>
            
            <button type="submit" class="btn btn-primary">Update Profile</button>
          </form>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Change Password</h2>
        </div>
        <div class="card-body">
          <form action="/profile/change-password" method="POST">
            <div class="form-group">
              <label for="currentPassword" class="form-label">Current Password*</label>
              <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
            </div>
            
            <div class="form-group">
              <label for="newPassword" class="form-label">New Password*</label>
              <input type="password" id="newPassword" name="newPassword" class="form-control" required>
              <small class="form-text">Minimum 6 characters</small>
            </div>
            
            <div class="form-group">
              <label for="confirmPassword" class="form-label">Confirm New Password*</label>
              <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
            </div>
            
            <button type="submit" class="btn btn-primary">Change Password</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .profile-image {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0 auto;
  }
</style>

=== END OF FILE: views/profile/freelancer-profile.ejs ===

