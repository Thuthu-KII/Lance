<!-- client-dashboard.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Dashboard</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            500: '#0ea5e9',
                            600: '#0284c7',
                        }
                    }
                }
            }
        }
    </script>

    <style>
        .glass-effect {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
    </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-gray-50 to-primary-50 font-sans">
    <section class="flex h-screen overflow-hidden">
        <!-- Sidebar -->
        <section id="sidebar" class="fixed inset-y-0 left-0 transform -translate-x-full md:translate-x-0 transition duration-200 ease-in-out z-30 w-64 bg-white shadow-lg">
            <section class="flex flex-col h-full">
                <!-- Logo Section -->
                <section class="p-6 border-b">
                    <section class="flex items-center space-x-3">
                        <section class="h-10 w-10 bg-primary-500 rounded-lg flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                        </section>
                        <span class="text-xl font-bold">Client Portal</span>
                    </section>
                </section>

                <!-- Navigation Links -->
                <nav class="flex-1 p-4 space-y-2">
                    <a href="#" class="flex items-center space-x-3 px-4 py-3 rounded-lg bg-primary-50 text-primary-600">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                        <span>Dashboard</span>
                    </a>

                    <a href="#" class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition duration-150">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                        </svg>
                        <span>Freelancers</span>
                    </a>

                    <a href="#" class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition duration-150">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        <span>My Jobs</span>
                    </a>
                </nav>

                <!-- Bottom Section with Sign Out -->
                <section class="p-4 border-t">
                    <button onclick="handleSignOut()" class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-600 hover:bg-gray-50 transition duration-150 w-full">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        <span>Sign Out</span>
                    </button>
                </section>
            </section>
        </section>

        <!-- Main Content -->
        <section class="flex-1 flex flex-col md:pl-64">
            <!-- Top Navigation Bar -->
            <header class="bg-white shadow-sm h-16 fixed w-full md:w-[calc(100%-16rem)] z-10">
                <section class="px-4 h-full flex items-center justify-between">
                    <button onclick="toggleSidebar()" class="p-2 rounded-lg hover:bg-gray-100 md:hidden">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>

                    <section class="flex items-center space-x-4">
                        <span class="text-sm text-gray-600" id="clientName">Lance</span>
                        <button class="h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center text-primary-600 font-medium" id="clientInitials">
                        </button>
                    </section>
                </section>
            </header>

            <!-- Main Content Area -->
            <main class="flex-1 overflow-y-auto pt-16">
                <section class="p-6 md:p-8">
                    

                    <!-- Posted Jobs Section -->
                    <section class="glass-effect rounded-2xl shadow-lg overflow-hidden">
                        <section class="p-6 border-b border-gray-100 flex justify-between items-center">
                            <h2 class="text-xl font-semibold text-gray-800">Posted Jobs</h2>
                            <button onclick="handlePostNewJob()" class="bg-primary-500 hover:bg-primary-600 text-white px-4 py-2 rounded-lg transition duration-200">
                                + Post New Job
                            </button>
                        </section>
                        <section class="p-6">
                            <!-- Jobs Grid -->
                            <section class="grid grid-cols-1 md:grid-cols-2 gap-6" id="jobsContainer">
                                <!-- Loading State -->
                                <section class="animate-pulse">
                                    <section class="h-48 bg-gray-200 rounded-lg"></section>
                                </section>
                                <section class="animate-pulse">
                                    <section class="h-48 bg-gray-200 rounded-lg"></section>
                                </section>
                            </section>
                        </section>
                    </section>
                </section>
            </main>
        </section>
    </section>

    <!-- Job Card Template -->
    <template id="jobCardTemplate">
        <section class="bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow">
            <section class="flex justify-between items-start mb-4">
                <section>
                    <h3 class="font-semibold text-gray-800 job-title">...</h3>
                    <p class="text-sm text-gray-500 client-name">...</p>
                    <p class="text-sm text-gray-500 job-date">...</p>
                </section>
                <span class="px-3 py-1 rounded-full text-sm job-status"></span>
            </section>
            <p class="text-gray-600 mb-4 job-description">...</p>
            <section class="flex flex-wrap gap-2 mb-4 job-skills"></section>
            <section class="flex items-center justify-between pt-4 border-t border-gray-100">
                <section class="flex items-center space-x-4">
                    <span class="text-sm text-gray-500 job-budget">...</span>
                    <span class="text-sm text-gray-500 job-applications">...</span>
                </section>
                <button onclick="viewApplications(this.dataset.jobId)" class="px-4 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors">
                    View Applications
                </button>
            </section>
        </section>
    </template>

    <script>
        // Toggle Sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');
            sidebar.classList.toggle('-translate-x-full');
            if (overlay) overlay.classList.toggle('hidden');
        }

        // Handle Sign Out
        function handleSignOut() {
            // Add your sign out logic here
            console.log('Signing out...');
        }

        // Handle Post New Job
        function handlePostNewJob() {
            // Add your post new job logic here
            console.log('Posting new job...');
        }

        // View Applications
        function viewApplications(jobId) {
            // Navigate to applications page with job ID
            window.location.href = `/applications?jobId=${jobId}`;
        }

        // Fetch and Display Jobs
        async function fetchAndDisplayJobs() {
            try {
                // Replace with your API endpoint
                // const response = await fetch('/api/client/jobs');
                const data = [{
                    id: 3,
                    jobTitle: "SEO Optimization",
                    description: "Improve website ranking and visibility",
                    budget: "R300",
                    postedDate: "13/03/2025",
                    status: "Active",
                    skills: ["astronaut","plumber"]
                }];
                
                // Update stats
                // document.getElementById('activeJobsCount').textContent = data.stats.activeJobs;//
                // document.getElementById('totalApplicationsCount').textContent = data.stats.totalApplications;//get
                // document.getElementById('hiredFreelancersCount').textContent = data.stats.hiredFreelancers;

                // Clear loading state
                const jobsContainer = document.getElementById('jobsContainer');
                jobsContainer.innerHTML = '';

                // Create job cards
                data.forEach(job => {
                    const template = document.getElementById('jobCardTemplate');
                    const clone = template.content.cloneNode(true);

                    // Populate job data
                    clone.querySelector('.job-title').textContent = job.jobTitle;
                    clone.querySelector('.job-date').textContent = new Date(job.postedDate).toLocaleDateString();
                    clone.querySelector('.job-description').textContent = job.description;
                    clone.querySelector('.job-budget').textContent = job.budget;
                    clone.querySelector('.job-applications').textContent = `${job.applications} applications`;

                    // Set status
                    const statusElement = clone.querySelector('.job-status');
                    statusElement.textContent = job.status;
                    statusElement.className = `px-3 py-1 rounded-full text-sm ${getStatusClass(job.status)}`;

                    // Add skills
                    const skillsContainer = clone.querySelector('.job-skills');
                    job.skills.forEach(skill => {
                        const skillTag = document.createElement('span');
                        skillTag.className = 'px-2 py-1 rounded text-xs bg-gray-100 text-gray-600';
                        skillTag.textContent = skill;
                        skillsContainer.appendChild(skillTag);
                    });

                    // Set job ID for view applications button
                    const viewButton = clone.querySelector('button');
                    viewButton.dataset.jobId = job.id;

                    jobsContainer.appendChild(clone);
                });
            } catch (error) {
                console.error('Error fetching jobs:', error);
                // Handle error state
            }
        }

        // Helper function for status classes
        function getStatusClass(status) {
            const classes = {
                'Active': 'bg-green-100 text-green-600',
                'Pending': 'bg-yellow-100 text-yellow-600',
                'Closed': 'bg-gray-100 text-gray-600'
            };
            return classes[status] || classes['Pending'];
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            fetchAndDisplayJobs();
        });
    </script>
</body>
</html>